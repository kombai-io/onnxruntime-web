{"version":3,"file":"ort-web.min.js","mappings":"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","sources":["webpack://onnxruntime-web/webpack/universalModuleDefinition","webpack://onnxruntime-web/./lib/backend-onnxjs.ts","webpack://onnxruntime-web/./lib/backend-wasm.ts","webpack://onnxruntime-web/./lib/index.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute-with-cache-key.ts","webpack://onnxruntime-web/./lib/onnxjs/attribute.ts","webpack://onnxruntime-web/./lib/onnxjs/backend.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/backend-webgl.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-coordinate-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-definitions.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-encoding-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-fragcolor-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-function-inliner.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-preprocessor.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-registered-libs.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-shape-utils-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-source.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/glsl-vec-lib.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/inference-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/op-resolve-rules.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/batch-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/binary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/cast.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/concat.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-grouped.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv-transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/conv.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/depth-to-space.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/dot-product.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/flatten.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/fuse-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gather.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/gemm.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/im2col.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/image-scaler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/instance-normalization.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/lrn.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul-pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/matmul.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/packing-utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pad.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/pool.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reduce.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/reshape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/resize-packed.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/shape.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/slice.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/softmax.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/split.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/squeeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/sum.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/tile.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/transpose.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/uint8-encode.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unary-op.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unpack.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/unsqueeze.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/ops/upsample.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/program-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-data-encoder.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout-strategy.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-layout.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/texture-manager.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/types.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/utils.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context-factory.ts","webpack://onnxruntime-web/./lib/onnxjs/backends/webgl/webgl-context.ts","webpack://onnxruntime-web/./lib/onnxjs/execution-plan.ts","webpack://onnxruntime-web/./lib/onnxjs/graph.ts","webpack://onnxruntime-web/./lib/onnxjs/instrument.ts","webpack://onnxruntime-web/./lib/onnxjs/model.ts","webpack://onnxruntime-web/./lib/onnxjs/operators.ts","webpack://onnxruntime-web/./lib/onnxjs/opset.ts","webpack://onnxruntime-web/./lib/onnxjs/ort-schema/ort-generated.ts","webpack://onnxruntime-web/./lib/onnxjs/session-handler.ts","webpack://onnxruntime-web/./lib/onnxjs/session.ts","webpack://onnxruntime-web/./lib/onnxjs/tensor.ts","webpack://onnxruntime-web/./lib/onnxjs/util.ts","webpack://onnxruntime-web/./lib/version.ts","webpack://onnxruntime-web/./lib/wasm/proxy-wrapper.ts","webpack://onnxruntime-web/./lib/wasm/run-options.ts","webpack://onnxruntime-web/./lib/wasm/session-handler.ts","webpack://onnxruntime-web/./lib/wasm/session-options.ts","webpack://onnxruntime-web/./lib/wasm/wasm-common.ts","webpack://onnxruntime-web/./lib/wasm/wasm-core-impl.ts","webpack://onnxruntime-web/./lib/wasm/wasm-factory.ts","webpack://onnxruntime-web/./lib/wasm/wasm-utils.ts","webpack://onnxruntime-web/./lib/wasm/proxy-worker/main.ts","webpack://onnxruntime-web/../node_modules/worker-loader/dist/runtime/inline.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm-threaded.min.js","webpack://onnxruntime-web/./lib/wasm/binding/ort-wasm.js","webpack://onnxruntime-web/./node_modules/@protobufjs/aspromise/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/base64/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/eventemitter/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/float/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/inquire/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/pool/index.js","webpack://onnxruntime-web/./node_modules/@protobufjs/utf8/index.js","webpack://onnxruntime-web/./node_modules/guid-typescript/dist/guid.js","webpack://onnxruntime-web/./node_modules/long/src/long.js","webpack://onnxruntime-web/./node_modules/onnx-proto/dist/onnx.js","webpack://onnxruntime-web/./node_modules/protobufjs/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/index-minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/reader_buffer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/roots.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/rpc/service.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/longbits.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/util/minimal.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer.js","webpack://onnxruntime-web/./node_modules/protobufjs/src/writer_buffer.js","webpack://onnxruntime-web/external umd {\"commonjs\":\"onnxruntime-common\",\"commonjs2\":\"onnxruntime-common\",\"root\":\"ort\"}","webpack://onnxruntime-web/./node_modules/flatbuffers/js/flatbuffers.mjs","webpack://onnxruntime-web/webpack/bootstrap","webpack://onnxruntime-web/webpack/runtime/compat get default export","webpack://onnxruntime-web/webpack/runtime/define property getters","webpack://onnxruntime-web/webpack/runtime/hasOwnProperty shorthand","webpack://onnxruntime-web/webpack/runtime/make namespace object","webpack://onnxruntime-web/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"onnxruntime-common\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"onnxruntime-common\")) : factory(root[\"ort\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, (__WEBPACK_EXTERNAL_MODULE__1670__) => {\nreturn ","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable import/no-internal-modules */\nimport {Backend, InferenceSession, SessionHandler} from 'onnxruntime-common';\n\nimport {Session} from './onnxjs/session';\nimport {OnnxjsSessionHandler} from './onnxjs/session-handler';\n\nclass OnnxjsBackend implements Backend {\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  async init(): Promise<void> {}\n\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    // NOTE: Session.Config(from onnx.js) is not compatible with InferenceSession.SessionOptions(from\n    // onnxruntime-common).\n    //       In future we should remove Session.Config and use InferenceSession.SessionOptions.\n    //       Currently we allow this to happen to make test runner work.\n    const session = new Session(options as unknown as Session.Config);\n\n    // typescript cannot merge method override correctly (so far in 4.2.3). need if-else to call the method.\n    if (typeof pathOrBuffer === 'string') {\n      await session.loadModel(pathOrBuffer);\n    } else {\n      await session.loadModel(pathOrBuffer);\n    }\n\n    return new OnnxjsSessionHandler(session);\n  }\n}\n\nexport const onnxjsBackend = new OnnxjsBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Backend, env, InferenceSession, SessionHandler} from 'onnxruntime-common';\nimport {cpus} from 'os';\n\nimport {initializeWebAssemblyInstance} from './wasm/proxy-wrapper';\nimport {OnnxruntimeWebAssemblySessionHandler} from './wasm/session-handler';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (typeof env.wasm.simd !== 'boolean') {\n    env.wasm.simd = true;\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    const numCpuLogicalCores = typeof navigator === 'undefined' ? cpus().length : navigator.hardwareConcurrency;\n    env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n  }\n};\n\nclass OnnxruntimeWebAssemblyBackend implements Backend {\n  async init(): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssemblyInstance();\n  }\n  createSessionHandler(path: string, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  createSessionHandler(buffer: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SessionHandler>;\n  async createSessionHandler(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions):\n      Promise<SessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow terser to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow terser remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport {registerBackend, env} from 'onnxruntime-common';\nimport {version} from './version';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_WEBGPU && typeof navigator !== 'undefined' && navigator.gpu) {\n    registerBackend('webgpu', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n  registerBackend('xnnpack', wasmBackend, 9);\n  registerBackend('webnn', wasmBackend, 9);\n}\n\nenv.versions.web = version;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nclass AttributeWithCacheKeyImpl {\n  constructor(attribute: Record<string, unknown>) {\n    Object.assign(this, attribute);\n  }\n\n  private _cacheKey: string;\n  public get cacheKey(): string {\n    if (!this._cacheKey) {\n      this._cacheKey =\n          Object.getOwnPropertyNames(this).sort().map(name => `${(this as Record<string, unknown>)[name]}`).join(';');\n    }\n    return this._cacheKey;\n  }\n}\n\nexport interface AttributeWithCacheKey {\n  readonly cacheKey: string;\n}\n\nexport const createAttributeWithCacheKey = <T extends Record<string, unknown>>(attribute: T): T&AttributeWithCacheKey =>\n    new AttributeWithCacheKeyImpl(attribute) as unknown as T & AttributeWithCacheKey;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {decodeUtf8String, LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Attribute {\n  export interface DataTypeMap {\n    float: number;\n    int: number;\n    string: string;\n    tensor: Tensor;\n    floats: number[];\n    ints: number[];\n    strings: string[];\n    tensors: Tensor[];\n  }\n\n  export type DataType = keyof DataTypeMap;\n}\n\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\n\ntype Value = [ValueTypes, Attribute.DataType];\n\nexport class Attribute {\n  constructor(attributes: onnx.IAttributeProto[]|ortFbs.Attribute[]|null|undefined) {\n    this._attributes = new Map();\n    if (attributes !== null && attributes !== undefined) {\n      for (const attr of attributes) {\n        if (attr instanceof onnx.AttributeProto) {\n          this._attributes.set(attr.name, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        } else if (attr instanceof ortFbs.Attribute) {\n          this._attributes.set(attr.name()!, [Attribute.getValue(attr), Attribute.getType(attr)]);\n        }\n      }\n      if (this._attributes.size < attributes.length) {\n        throw new Error('duplicated attribute names');\n      }\n    }\n  }\n\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\n    this._attributes.set(key, [value, type]);\n  }\n  delete(key: string): void {\n    this._attributes.delete(key);\n  }\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\n    return this.get(key, 'float', defaultValue);\n  }\n\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\n    return this.get(key, 'int', defaultValue);\n  }\n\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\n    return this.get(key, 'string', defaultValue);\n  }\n\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\n    return this.get(key, 'tensor', defaultValue);\n  }\n\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\n    return this.get(key, 'floats', defaultValue);\n  }\n\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\n    return this.get(key, 'ints', defaultValue);\n  }\n\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\n    return this.get(key, 'strings', defaultValue);\n  }\n\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\n    return this.get(key, 'tensors', defaultValue);\n  }\n\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\n    const valueAndType = this._attributes.get(key);\n    if (valueAndType === undefined) {\n      if (defaultValue !== undefined) {\n        return defaultValue;\n      }\n      throw new Error(`required attribute not found: ${key}`);\n    }\n    if (valueAndType[1] !== type) {\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\n    }\n    return valueAndType[0] as V;\n  }\n\n  private static getType(attr: onnx.IAttributeProto|ortFbs.Attribute): Attribute.DataType {\n    const type = attr instanceof onnx.AttributeProto ? (attr).type : (attr as ortFbs.Attribute).type();\n    switch (type) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return 'float';\n      case onnx.AttributeProto.AttributeType.INT:\n        return 'int';\n      case onnx.AttributeProto.AttributeType.STRING:\n        return 'string';\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return 'tensor';\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return 'floats';\n      case onnx.AttributeProto.AttributeType.INTS:\n        return 'ints';\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return 'strings';\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return 'tensors';\n      default:\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[type]}`);\n    }\n  }\n\n  private static getValue(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    const attrType = attr instanceof onnx.AttributeProto ? attr.type : (attr as ortFbs.Attribute).type();\n    if (attrType === onnx.AttributeProto.AttributeType.GRAPH || attrType === onnx.AttributeProto.AttributeType.GRAPHS) {\n      throw new Error('graph attribute is not supported yet');\n    }\n\n    const value = this.getValueNoCheck(attr);\n\n    // cast LONG to number\n    if (attrType === onnx.AttributeProto.AttributeType.INT && LongUtil.isLong(value)) {\n      return LongUtil.longToNumber(value as Long | flatbuffers.Long);\n    }\n\n    // cast LONG[] to number[]\n    if (attrType === onnx.AttributeProto.AttributeType.INTS) {\n      const arr = (value as Array<number|Long|flatbuffers.Long>);\n      const numberValue: number[] = new Array<number>(arr.length);\n\n      for (let i = 0; i < arr.length; i++) {\n        const maybeLong = arr[i];\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\n      }\n\n      return numberValue;\n    }\n\n    // cast onnx.TensorProto to onnxjs.Tensor\n    if (attrType === onnx.AttributeProto.AttributeType.TENSOR) {\n      return attr instanceof onnx.AttributeProto ? Tensor.fromProto(value as onnx.ITensorProto) :\n                                                   Tensor.fromOrtTensor(value as ortFbs.Tensor);\n    }\n\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\n    if (attrType === onnx.AttributeProto.AttributeType.TENSORS) {\n      if (attr instanceof onnx.AttributeProto) {\n        const tensorProtos = value as onnx.ITensorProto[];\n        return tensorProtos.map(value => Tensor.fromProto(value));\n      } else if (attr instanceof ortFbs.Attribute) {\n        const tensorProtos = value as ortFbs.Tensor[];\n        return tensorProtos.map(value => Tensor.fromOrtTensor(value));\n      }\n    }\n\n    // cast Uint8Array to string\n    if (attrType === onnx.AttributeProto.AttributeType.STRING) {\n      // string in onnx attribute is of uint8array type, so we need to convert it to string below. While in ort format,\n      // string attributes are returned as string, so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8String = value as Uint8Array;\n        return decodeUtf8String(utf8String);\n      }\n    }\n\n    // cast Uint8Array[] to string[]\n    if (attrType === onnx.AttributeProto.AttributeType.STRINGS) {\n      // strings in onnx attribute is returned as uint8array[], so we need to convert it to string[] below. While in ort\n      // format strings attributes are returned as string[], so no conversion is needed.\n      if (attr instanceof onnx.AttributeProto) {\n        const utf8Strings = value as Uint8Array[];\n        return utf8Strings.map(decodeUtf8String);\n      }\n    }\n\n    return value as ValueTypes;\n  }\n\n  private static getValueNoCheck(attr: onnx.IAttributeProto|ortFbs.Attribute) {\n    return attr instanceof (onnx.AttributeProto) ? this.getValueNoCheckFromOnnxFormat(attr) :\n                                                   this.getValueNoCheckFromOrtFormat(attr as ortFbs.Attribute);\n  }\n\n  private static getValueNoCheckFromOnnxFormat(attr: onnx.IAttributeProto) {\n    switch (attr.type!) {\n      case onnx.AttributeProto.AttributeType.FLOAT:\n        return attr.f;\n      case onnx.AttributeProto.AttributeType.INT:\n        return attr.i;\n      case onnx.AttributeProto.AttributeType.STRING:\n        return attr.s;\n      case onnx.AttributeProto.AttributeType.TENSOR:\n        return attr.t;\n      case onnx.AttributeProto.AttributeType.GRAPH:\n        return attr.g;\n      case onnx.AttributeProto.AttributeType.FLOATS:\n        return attr.floats;\n      case onnx.AttributeProto.AttributeType.INTS:\n        return attr.ints;\n      case onnx.AttributeProto.AttributeType.STRINGS:\n        return attr.strings;\n      case onnx.AttributeProto.AttributeType.TENSORS:\n        return attr.tensors;\n      case onnx.AttributeProto.AttributeType.GRAPHS:\n        return attr.graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\n    }\n  }\n\n  private static getValueNoCheckFromOrtFormat(attr: ortFbs.Attribute) {\n    switch (attr.type()) {\n      case ortFbs.AttributeType.FLOAT:\n        return attr.f();\n      case ortFbs.AttributeType.INT:\n        return attr.i();\n      case ortFbs.AttributeType.STRING:\n        return attr.s();\n      case ortFbs.AttributeType.TENSOR:\n        return attr.t();\n      case ortFbs.AttributeType.GRAPH:\n        return attr.g();\n      case ortFbs.AttributeType.FLOATS:\n        return attr.floatsArray();\n      case ortFbs.AttributeType.INTS: {\n        const ints = [];\n        for (let i = 0; i < attr.intsLength(); i++) {\n          ints.push(attr.ints(i)!);\n        }\n        return ints;\n      }\n      case ortFbs.AttributeType.STRINGS: {\n        const strings = [];\n        for (let i = 0; i < attr.stringsLength(); i++) {\n          strings.push(attr.strings(i));\n        }\n        return strings;\n      }\n      case ortFbs.AttributeType.TENSORS: {\n        const tensors = [];\n        for (let i = 0; i < attr.tensorsLength(); i++) {\n          tensors.push(attr.tensors(i)!);\n        }\n        return tensors;\n      }\n      // case ortFbs.AttributeType.GRAPHS:\n      // TODO: Subgraph not supported yet.\n      // const graphs = [];\n      // for (let i = 0; i < attr.graphsLength(); i++) {\n      //   graphs.push(attr.graphs(i)!);\n      // }\n      // return graphs;\n      default:\n        throw new Error(`unsupported attribute type: ${ortFbs.AttributeType[attr.type()]}`);\n    }\n  }\n\n  protected _attributes: Map<string, Value>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {WebGLBackend} from './backends/backend-webgl';\nimport {Graph} from './graph';\nimport {Operator} from './operators';\nimport {OpSet} from './opset';\nimport {Session} from './session';\n\nexport interface InferenceHandler {\n  /**\n   * dispose the inference handler. it will be called as the last step in Session.run()\n   */\n  dispose(): void;\n}\n\nexport interface SessionHandler {\n  /**\n   * transform the graph at initialization time\n   * @param graphTransformer the graph transformer to manipulate the model graph\n   */\n  transformGraph?(graphTransformer: Graph.Transformer): void;\n\n  /**\n   * create an instance of InferenceHandler to use in a Session.run() call\n   */\n  createInferenceHandler(): InferenceHandler;\n\n  /**\n   * dispose the session handler. it will be called when a session is being disposed explicitly\n   */\n  dispose(): void;\n\n  /**\n   * Resolves the operator from the name and opset version; backend specific\n   * @param node the node to resolve\n   * @param opsets a list of opsets that exported from the model\n   * @param graph the completely initialized graph\n   */\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator;\n\n  /**\n   * This method let's the sessionHandler know that the graph initialization is complete\n   * @param graph the completely initialized graph\n   */\n  onGraphInitialized?(graph: Graph): void;\n\n  /**\n   * a reference to the corresponding backend\n   */\n  readonly backend: Backend;\n\n  /**\n   * a reference to the session context\n   */\n  readonly context: Session.Context;\n}\n\nexport interface Backend {\n  /**\n   * initialize the backend. will be called only once, when the first time the\n   * backend it to be used\n   */\n  initialize(): boolean|Promise<boolean>;\n\n  /**\n   * create an instance of SessionHandler to use in a Session object's lifecycle\n   */\n  createSessionHandler(context: Session.Context): SessionHandler;\n\n  /**\n   * dispose the backend. currently this will not be called\n   */\n  dispose(): void;\n}\n\n// caches all initialized backend instances\nconst backendsCache: Map<string, Backend> = new Map();\n\nexport const backend: {[name: string]: Backend} = {\n  webgl: new WebGLBackend()\n};\n\n/**\n * Resolve a reference to the backend. If a hint is specified, the corresponding\n * backend will be used.\n */\nexport async function resolveBackend(hint?: string|readonly string[]): Promise<Backend> {\n  if (!hint) {\n    return resolveBackend(['webgl']);\n  } else {\n    const hints = typeof hint === 'string' ? [hint] : hint;\n\n    for (const backendHint of hints) {\n      const cache = backendsCache.get(backendHint);\n      if (cache) {\n        return cache;\n      }\n\n      const backend = await tryLoadBackend(backendHint);\n      if (backend) {\n        return backend;\n      }\n    }\n  }\n\n  throw new Error('no available backend to use');\n}\n\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\n  const backendObj = backend;\n\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\n    const backend = backendObj[backendHint];\n    let init = backend.initialize();\n    if (typeof init === 'object' && 'then' in init) {\n      init = await init;\n    }\n    if (init) {\n      backendsCache.set(backendHint, backend);\n      return backend;\n    }\n  }\n\n  return undefined;\n}\n\nfunction isBackend(obj: unknown) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const o = obj as any;\n\n  // check if an object is a Backend instance\n  if (\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nexport type BackendType = Backend;\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Backend, SessionHandler} from '../backend';\nimport {Logger} from '../instrument';\nimport {Session} from '../session';\n\nimport {WebGLSessionHandler} from './webgl/session-handler';\nimport {WebGLContext} from './webgl/webgl-context';\nimport {createWebGLContext} from './webgl/webgl-context-factory';\n\n/**\n * WebGLBackend is the entry point for all WebGL opeartions\n * When it starts it created the WebGLRenderingContext\n * and other main framework components such as Program and Texture Managers\n */\nexport class WebGLBackend implements Backend {\n  glContext: WebGLContext;\n\n  get contextId(): 'webgl'|'webgl2'|undefined {\n    return env.webgl.contextId;\n  }\n  set contextId(value: 'webgl'|'webgl2'|undefined) {\n    env.webgl.contextId = value;\n  }\n\n  get matmulMaxBatchSize(): number|undefined {\n    return env.webgl.matmulMaxBatchSize;\n  }\n  set matmulMaxBatchSize(value: number|undefined) {\n    env.webgl.matmulMaxBatchSize = value;\n  }\n\n  get textureCacheMode(): 'initializerOnly'|'full'|undefined {\n    return env.webgl.textureCacheMode;\n  }\n  set textureCacheMode(value: 'initializerOnly'|'full'|undefined) {\n    env.webgl.textureCacheMode = value;\n  }\n\n  get pack(): boolean|undefined {\n    return env.webgl.pack;\n  }\n  set pack(value: boolean|undefined) {\n    env.webgl.pack = value;\n  }\n\n  get async(): boolean|undefined {\n    return env.webgl.async;\n  }\n  set async(value: boolean|undefined) {\n    env.webgl.async = value;\n  }\n\n  initialize(): boolean {\n    try {\n      this.glContext = createWebGLContext(this.contextId);\n      if (typeof this.matmulMaxBatchSize !== 'number') {\n        this.matmulMaxBatchSize = 16;\n      }\n      if (typeof this.textureCacheMode !== 'string') {\n        this.textureCacheMode = 'full';\n      }\n      if (typeof this.pack !== 'boolean') {\n        this.pack = false;\n      }\n      if (typeof this.async !== 'boolean') {\n        this.async = false;\n      }\n\n      Logger.setWithEnv(env);\n\n      Logger.verbose(\n          'WebGLBackend',\n          `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${\n              this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${\n              this.async}.`);\n      return true;\n    } catch (e) {\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\n      return false;\n    }\n  }\n  createSessionHandler(context: Session.Context): SessionHandler {\n    return new WebGLSessionHandler(this, context);\n  }\n  dispose(): void {\n    this.glContext.dispose();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ArrayUtil, BroadcastUtil, ShapeUtil} from '../../util';\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\nimport {squeezeShape} from './texture-layout-strategy';\nimport {TextureLayout} from './types';\nimport {generateShaderFuncNameFromInputSamplerName, generateShaderFuncNameFromInputSamplerNameAtOutCoords, getCoordsDataType, getGlChannels, getSqueezedParams, squeezeInputShape} from './utils';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class CoordsGlslLib extends GlslLib {\n  returnType: string;\n\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.offsetToCoords(),\n      ...this.coordsToOffset(),\n      ...this.toVec(),\n      ...this.valueFrom(),\n      // TODO return these only when packing is enabled.\n      ...this.getCommonUtilFuncs(),\n      ...this.getInputsSamplingSnippets(),\n      ...this.getOutputSamplingSnippet()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'offsetToCoords';\n    return {\n      offsetToCoords: new GlslLibRoutine(`\n      vec2 ${funcName}(int offset, int width, int height) {\n        int t = offset / width;\n        int s = offset - t*width;\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\n        return coords;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Produces a function that can map from\n   * 2D normalzied coordinates (s,t) to a flat offset\n   */\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\n    const funcName = 'coordsToOffset';\n    return {\n      coordsToOffset: new GlslLibRoutine(`\n      int ${funcName}(vec2 coords, int width, int height) {\n        float s = coords.s * float(width);\n        float t = coords.t * float(height);\n        int offset = int(t) * width + int(s);\n        return offset;\n      }\n      `)\n    };\n  }\n\n  /**\n   * Generates code for output sampler.\n   */\n\n  protected getOutputSamplingSnippet(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    if (outputLayout.isPacked) {\n      return this.getPackedOutputSamplingSnippet(outputLayout);\n    } else {\n      return this.getUnpackedOutputSamplingSnippet(outputLayout);\n    }\n  }\n\n  /**\n   * Generates code for packed output sampler.\n   */\n  protected getPackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputPacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] = this.getOutputPacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputPacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        result[funcName] = this.getOutputPackedNDCoords(outShape, outTexShape as [number, number]);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRGBASource = `\n      void setOutput(vec4 val) {\n        ${glsl.output} = val;\n      }\n    `;\n    const floatTextureSetRGBAFuncName = 'floatTextureSetRGBA';\n    result[floatTextureSetRGBAFuncName] = new GlslLibRoutine(floatTextureSetRGBASource);\n    return result;\n  }\n\n  /**\n   * Generates code for unpacked output sampler.\n   */\n  protected getUnpackedOutputSamplingSnippet(outputLayout: TextureLayout): {[name: string]: GlslLibRoutine} {\n    const outShape = outputLayout.unpackedShape;\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const funcName = 'getOutputCoords';\n    switch (outShape.length) {\n      case 0:\n        result[funcName] = this.getOutputScalarCoords();\n        break;\n      case 1:\n        result[funcName] = this.getOutputUnpacked1DCoords(outShape as [number], outTexShape as [number, number]);\n        break;\n      case 2:\n        result[funcName] =\n            this.getOutputUnpacked2DCoords(outShape as [number, number], outTexShape as [number, number]);\n        break;\n      case 3:\n        result[funcName] =\n            this.getOutputUnpacked3DCoords(outShape as [number, number, number], outTexShape as [number, number]);\n        break;\n      case 4:\n        result[funcName] = this.getOutputUnpacked4DCoords(\n            outShape as [number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 5:\n        result[funcName] = this.getOutputUnpacked5DCoords(\n            outShape as [number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      case 6:\n        result[funcName] = this.getOutputUnpacked6DCoords(\n            outShape as [number, number, number, number, number, number], outTexShape as [number, number]);\n        break;\n      default:\n        throw new Error(`Unsupported output dimensionality: ${outShape.length}`);\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    // TODO we need this to properly return a packed vec4 from kernels.\n    // Replace all '{glsl.output} = result' with 'setOutput(result)' in all kernels.\n    const floatTextureSetRSource = `\n        void setOutput(float val) {\n          ${glsl.output} = vec4(val, 0, 0, 0);\n        }\n    `;\n    const floatTextureSetRFuncName = 'floatTextureSetR';\n    result[floatTextureSetRFuncName] = new GlslLibRoutine(floatTextureSetRSource);\n    return result;\n  }\n\n  /**\n   * Scalar output coordinates.\n   */\n  protected getOutputScalarCoords(): GlslLibRoutine {\n    return new GlslLibRoutine(`\n      int getOutputCoords() {\n        return 0;\n      }\n    `);\n  }\n\n  /**\n   * 1D packed output coordinates.\n   */\n  protected getOutputPacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = texShape;\n    let source = '';\n    if (packedTexShape[0] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.y * ${packedTexShape[1]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    if (packedTexShape[1] === 1) {\n      source = `\n          int getOutputCoords() {\n            return 2 * int(TexCoords.x * ${packedTexShape[0]}.0);\n          }\n        `;\n      return new GlslLibRoutine(source);\n    }\n\n    source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                 vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          return 2 * (resTexRC.y * ${packedTexShape[0]} + resTexRC.x);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 2D packed output coordinates.\n   */\n  protected getOutputPacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    if (ArrayUtil.arraysEqual(shape, texShape)) {\n      source = `\n        ivec2 getOutputCoords() {\n          return 2 * ivec2(TexCoords.xy * vec2(${texShape[0]}, ${texShape[1]}));\n        }\n      `;\n      return new GlslLibRoutine(source);\n    }\n\n    const packedTexShape = texShape;\n    // texels needed to accommodate a logical row\n    const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n    /**\n     * getOutputCoords\n     *\n     * resTexRC: The rows and columns of the texels. If you move over one\n     * texel to the right in the packed texture, you are moving over one column\n     * (not two).\n     *\n     * index: The texel index\n     */\n    source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * 3D packed output coordinates.\n   */\n  protected getOutputPacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n    const source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n          int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n          int b = index / ${texelsInBatch};\n          index -= b * ${texelsInBatch};\n\n          // reverse r and c order for packed texture\n          int r = imod(index, ${texelsInLogicalRow}) * 2;\n          int c = 2 * (index / ${texelsInLogicalRow});\n\n          return ivec3(b, r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * ND packed output coordinates.\n   */\n  protected getOutputPackedNDCoords(shape: readonly number[], texShape: [number, number]): GlslLibRoutine {\n    const packedTexShape = [texShape[0], texShape[1]];\n\n    const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n    const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n    let texelsInBatchN = texelsInBatch;\n    let batches = '';\n    let coords = 'b, r, c';\n\n    for (let b = 2; b < shape.length - 1; b++) {\n      texelsInBatchN *= shape[shape.length - b - 1];\n      batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n      coords = `b${b}, ` + coords;\n    }\n    const source = `\n      ivec${shape.length} getOutputCoords() {\n        ivec2 resTexRC = ivec2(TexCoords.xy *\n                              vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n        int index = resTexRC.y * ${packedTexShape[0]} + resTexRC.x;\n\n        ${batches}\n\n        int b = index / ${texelsInBatch};\n        index -= b * ${texelsInBatch};\n\n        // reverse r and c order for packed texture\n        int r = imod(index, ${texelsInLogicalRow}) * 2;\n        int c = 2 * (index / ${texelsInLogicalRow});\n\n        return ivec${shape.length}(${coords});\n      }\n    `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 1D output coordinates.\n   */\n  protected getOutputUnpacked1DCoords(shape: [number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        int getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          return resTexRC.y * ${texShape[0]} + resTexRC.x;\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 2D output coordinates.\n   */\n  protected getOutputUnpacked2DCoords(shape: [number, number], texShape: [number, number]): GlslLibRoutine {\n    const source = `\n        ivec2 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          int r = index / ${shape[1]};\n          int c = index - r * ${shape[1]};\n          return ivec2(r, c);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 3D output coordinates.\n   */\n  protected getOutputUnpacked3DCoords(shape: [number, number, number], texShape: [number, number]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n        ivec3 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec3(r, c, d);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 4D output coordinates.\n   */\n  protected getOutputUnpacked4DCoords(shape: [number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec4 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec4(r, c, d, d2);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 5D output coordinates.\n   */\n  protected getOutputUnpacked5DCoords(shape: [number, number, number, number, number], texShape: [number, number]):\n      GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n      ivec5 getOutputCoords() {\n          ivec2 resTexRC = ivec2(TexCoords.xy *\n                                vec2(${texShape[0]}, ${texShape[1]}));\n          int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n          ${coordsFromIndexSnippet}\n          return ivec5(r, c, d, d2, d3);\n        }\n      `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked 6D output coordinates.\n   */\n  protected getOutputUnpacked6DCoords(shape: [number, number, number, number, number, number], texShape: [\n    number, number\n  ]): GlslLibRoutine {\n    let source = '';\n    const rank = shape.length;\n\n    let strides = null;\n    if (rank < 2) {\n      strides = [];\n    }\n\n    strides = new Array(rank - 1);\n    strides[rank - 2] = shape[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * shape[i + 1];\n    }\n    const coordsToCompute = ['r', 'c', 'd', 'd2', 'd3', 'd4'];\n    const coordsFromIndexSnippet =\n        strides\n            .map((stride, i) => {\n              const line1 = `int ${coordsToCompute[i]} = index / ${stride}`;\n              const line2 = i === strides.length - 1 ?\n                  `int ${coordsToCompute[i + 1]} = index - ${coordsToCompute[i]} * ${stride}` :\n                  `index -= ${coordsToCompute[i]} * ${stride}`;\n              return `${line1}; ${line2};`;\n            })\n            .join('');\n\n    source = `\n     ivec6 getOutputCoords() {\n         ivec2 resTexRC = ivec2(TexCoords.xy *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n         int index = resTexRC.y * ${texShape[0]} + resTexRC.x;\n         ${coordsFromIndexSnippet}\n         return ivec6(r, c, d, d2, d3, d4);\n       }\n     `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Generates code for common UV coords computation utility functions.\n   */\n  protected getCommonUtilFuncs(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    let funcName = 'uvFromFlat';\n    result[funcName] = new GlslLibRoutine(`\n    vec2 uvFromFlat(int texNumR, int texNumC, int index) {\n      int texC = index / texNumR;\n      int texR = index - texC * texNumR;\n      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to\n      //       v.\n      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);\n    }\n    `);\n    funcName = 'packedUVfrom1D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n        int texelIndex = index / 2;\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom2D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {\n        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = texelIndex / texNumC;\n        int texC = texelIndex - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'packedUVfrom3D';\n    result[funcName] = new GlslLibRoutine(`\n      vec2 packedUVfrom3D(int texNumR, int texNumC,\n          int texelsInBatch, int texelsInLogicalRow, int b,\n          int row, int col) {\n        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n        int texR = index / texNumC;\n        int texC = index - texR * texNumC;\n        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n      }\n      `);\n    funcName = 'sampleTexture';\n    const glsl = getGlsl(this.context.glContext.version);\n    result[funcName] = new GlslLibRoutine(`\n        float sampleTexture(sampler2D textureSampler, vec2 uv) {\n            return ${glsl.texture2D}(textureSampler, uv).r;\n        }`);\n    return result;\n  }\n\n  /**\n   * Constructing snippets for inputs\n   */\n  protected getInputsSamplingSnippets(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    const outputLayout = this.context.outputTextureLayout;\n    this.context.programInfo.inputNames.forEach((samplerName, i) => {\n      const inputLayout = this.context.inputTextureLayouts[i];\n      const funcName = generateShaderFuncNameFromInputSamplerName(samplerName);\n      if (inputLayout.isPacked) {\n        result[funcName] = this.getPackedSamplerFromInput(funcName, samplerName, inputLayout);\n      } else {\n        result[funcName] = this.getUnpackedSamplerFromInput(funcName, samplerName, inputLayout);\n      }\n\n      const outCoordFuncName = generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName);\n      if (inputLayout.unpackedShape.length <= outputLayout.unpackedShape.length) {\n        if (inputLayout.isPacked) {\n          result[outCoordFuncName] =\n              this.getPackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        } else {\n          result[outCoordFuncName] =\n              this.getUnpackedSamplerAtOutputCoords(outCoordFuncName, inputLayout, outputLayout, samplerName);\n        }\n      }\n    });\n\n    return result;\n  }\n\n  /**\n   * Constructing snippets for output coordinates of samplers\n   */\n  protected getPackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texName = name;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(texName);\n\n    const inRank = inShape.length;\n    const outRank = outShape.length;\n\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n\n    const type = getCoordsDataType(outRank);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n\n    let output = 'return outputValue;';\n    const inSize = ShapeUtil.size(inShape);\n    const isInputScalar = inSize === 1;\n    const outSize = ShapeUtil.size(outShape);\n    const isOutputScalar = outSize === 1;\n\n    if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n      output = `\n        return vec4(outputValue.xy, outputValue.xy);\n      `;\n    } else if (isInputScalar && !isOutputScalar) {\n      if (outRank === 1) {\n        output = `\n          return vec4(outputValue.x, outputValue.x, 0., 0.);\n        `;\n      } else {\n        output = `\n          return vec4(outputValue.x);\n        `;\n      }\n    } else if (broadcastDims.length) {\n      const rows = inRank - 2;\n      const cols = inRank - 1;\n\n      if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.x);';\n      } else if (broadcastDims.indexOf(rows) > -1) {\n        output = 'return vec4(outputValue.x, outputValue.y, ' +\n            'outputValue.x, outputValue.y);';\n      } else if (broadcastDims.indexOf(cols) > -1) {\n        output = 'return vec4(outputValue.xx, outputValue.zz);';\n      }\n    }\n\n    const swapLastDimsSnippet = `\n        int lastDim = coords.${fields[outRank - 1]};\n        coords.${fields[outRank - 1]} = coords.${fields[outRank - 2]};\n        coords.${fields[outRank - 2]} = lastDim;\n      `;\n    const source = `\n      vec4 ${funcName}() {\n        ${type} coords = getOutputCoords();\n        ${swapLastDimsSnippet}\n        ${coordsSnippet}\n        vec4 outputValue = ${texFuncSnippet}(${unpackedCoordsSnippet});\n        ${output}\n      }\n    `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for unpacked output coordinates of samplers\n   */\n  protected getUnpackedSamplerAtOutputCoords(\n      funcName: string, inputLayout: TextureLayout, outputLayout: TextureLayout, name: string): GlslLibRoutine {\n    const outTexShape = [outputLayout.width, outputLayout.height];\n    const inTexShape = [inputLayout.width, inputLayout.height];\n    const inRank = inputLayout.unpackedShape.length;\n    const outRank = outputLayout.unpackedShape.length;\n    const inShape = inputLayout.unpackedShape;\n    const outShape = outputLayout.unpackedShape;\n    const texFuncSnippet = generateShaderFuncNameFromInputSamplerName(name);\n\n    if (inRank === outRank && ArrayUtil.arraysEqual(inTexShape, outTexShape)) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, TexCoords);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const type = getCoordsDataType(outRank);\n    const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n    const rankDiff = outRank - inRank;\n    let coordsSnippet: string;\n    const fields = getGlChannels();\n\n    if (inRank === 0) {\n      coordsSnippet = '';\n    } else if (outRank < 2 && broadcastDims.length >= 1) {\n      coordsSnippet = 'coords = 0;';\n    } else {\n      coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n    }\n    let unpackedCoordsSnippet = '';\n    if (outRank < 2 && inRank > 0) {\n      unpackedCoordsSnippet = 'coords';\n    } else {\n      unpackedCoordsSnippet = inputLayout.unpackedShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n    }\n    const source = `\n        float ${funcName}() {\n          ${type} coords = getOutputCoords();\n          ${coordsSnippet}\n          return ${texFuncSnippet}(${unpackedCoordsSnippet});\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.getOutputCoords']);\n  }\n\n  /**\n   * Constructing snippets for packed operations.\n   */\n  protected getPackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    switch (inputLayout.unpackedShape.length) {\n      case 0:\n        return this.getPackedSamplerScalar(funcName, name);\n      case 1:\n        return this.getPackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getPackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getPackedSampler3D(funcName, name, inputLayout);\n      default:\n        return this.getPackedSamplerND(funcName, name, inputLayout);\n    }\n  }\n\n  /**\n   * Constructing snippets for unpacked operations.\n   */\n  protected getUnpackedSamplerFromInput(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    switch (shape.length) {\n      case 0:\n        return this.getUnpackedSamplerScalar(funcName, name, inputLayout);\n      case 1:\n        return this.getUnpackedSampler1D(funcName, name, inputLayout);\n      case 2:\n        return this.getUnpackedSampler2D(funcName, name, inputLayout);\n      case 3:\n        return this.getUnpackedSampler3D(funcName, name, inputLayout);\n      case 4:\n        return this.getUnpackedSampler4D(funcName, name, inputLayout);\n      case 5:\n        return this.getUnpackedSampler5D(funcName, name, inputLayout);\n      case 6:\n        return this.getUnpackedSampler6D(funcName, name, inputLayout);\n      default:\n        // TODO support more dimensionalities\n        throw new Error(`Unsupported dimension ${shape.length}-D`);\n    }\n  }\n\n  /**\n   * Packed scalar snippet.\n   */\n  protected getPackedSamplerScalar(funcName: string, name: string): GlslLibRoutine {\n    const glsl = getGlsl(this.context.glContext.version);\n    const source = `\n          vec4 ${funcName}() {\n            return ${glsl.texture2D}(${name}, halfCR);\n          }\n        `;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Packed 1D snippet.\n   */\n  protected getPackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[1], texShape[0]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedSampler = `vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n      ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom1D']);\n  }\n\n  /**\n   * Packed 2D snippet.\n   */\n  protected getPackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const packedSampler = `vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n        return ${glsl.texture2D}(${name}, uv);\n      }`;\n\n      return new GlslLibRoutine(packedSampler);\n    }\n    const packedTexShape = texShape;\n    const valuesPerRow = Math.ceil(shape[1] / 2);\n    const packedSampler = `vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${packedTexShape[1]}, ${packedTexShape[0]}, ${valuesPerRow}, row, col);\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom2D']);\n  }\n\n  /**\n   * Packed 3D snippet.\n   */\n  protected getPackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const packedTexShape = [texShape[0], texShape[1]];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    if (shape[0] === 1) {\n      const squeezedShape = shape.slice(1);\n      const keptDims = [1, 2];\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['b', 'row', 'col'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const samplerRoutine = this.getPackedSamplerFromInput(funcName, name, newInputLayout);\n      const packedSampler = `${samplerRoutine.routineBody}\n      vec4 ${funcName}(int b, int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      } `;\n      const source = packedSampler;\n      return new GlslLibRoutine(source, samplerRoutine.dependencies);\n    }\n    const texNumR = packedTexShape[0];\n    const texNumC = packedTexShape[1];\n\n    const valuesPerRow = Math.ceil(shape[2] / 2);\n    const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n    const packedSampler = `vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumC}, ${texNumR}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${name}, uv);}`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source, ['coordinates.packedUVfrom3D']);\n  }\n  /*\n   * Packed ND snippet.\n   */\n  protected getPackedSamplerND(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const rank = shape.length;\n    const texShape = [inputLayout.width, inputLayout.height];\n    const glsl = getGlsl(this.context.glContext.version);\n\n    const packedTexShape = [texShape[0], texShape[1]];\n    const texNumR = packedTexShape[1];\n    const texNumC = packedTexShape[0];\n    const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n    let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n    let params = 'int b, int row, int col';\n    let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n    for (let b = 2; b < rank - 1; b++) {\n      params = `int b${b}, ` + params;\n      texelsInBatch *= shape[rank - b - 1];\n      index = `b${b} * ${texelsInBatch} + ` + index;\n    }\n    const packedSampler = `vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${name}, uv);\n    }`;\n    const source = packedSampler;\n    return new GlslLibRoutine(source);\n  }\n\n  /**\n   * Unpacked scalar snippet.\n   */\n  protected getUnpackedSamplerScalar(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const [texNumR, texNumC] = [inputLayout.width, inputLayout.height];\n    if (texNumR === 1 && texNumC === 1) {\n      const source = `\n          float ${funcName}() {\n            return sampleTexture(${name}, halfCR);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const source = `\n        float ${funcName}() {\n          int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, offset_${name});\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 1D snippet.\n   */\n  protected getUnpackedSampler1D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const tNumR = inputLayout.width;\n    const tNumC = inputLayout.height;\n\n    if (tNumC === 1 && tNumR === 1) {\n      const source = `\n        float ${funcName}(int index) {\n          return sampleTexture(${name}, halfCR);\n        }\n      `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    if (tNumC === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2((float(index) + 0.5) / ${tNumR}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    if (tNumR === 1) {\n      const source = `\n          float ${funcName}(int index) {\n            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${tNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n    const source = `\n        float ${funcName}(int index) {\n          vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 2D snippet.\n   */\n\n  protected getUnpackedSampler2D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n\n    // TODO: modify row/col order for other dimensions.\n    const texShape = [inputLayout.height, inputLayout.width];\n\n    if (texShape != null && ArrayUtil.arraysEqual(shape, texShape)) {\n      const texNumR = texShape[1];\n      const texNumC = texShape[0];\n      const source = `\n          float ${funcName}(int row, int col) {\n            vec2 uv = (vec2(row, col) + halfCR) / vec2(${texNumR}.0, ${texNumC}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const params = ['col', 'row'];\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture']);\n    }\n\n    const texNumR = texShape[1];\n    const texNumC = texShape[0];\n    if (texNumC === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    if (texNumR === 1) {\n      const source = `\n          float ${funcName}(int row, int col) {\n            int offset_${name} = coordsToOffset(TexCoords, ${texNumR}, ${texNumC});\n            float index = dot(vec3(row, col, offset_${name}), vec3(${shape[1]}, 1, 1));\n            vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    }\n\n    const source = `\n        float ${funcName}(int row, int col) {\n          int index = col * ${shape[1]} + row;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 3D snippet.\n   */\n\n  protected getUnpackedSampler3D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride0 = shape[1] * shape[2];\n    const stride1 = shape[2];\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    const squeezedShape = newShape;\n    if (squeezedShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, squeezedShape);\n      const params = ['batch', 'col', 'row'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n      const routine = this.getUnpackedSamplerFromInput(funcName, name, newInputLayout);\n      // TODO: revisit the logic here to make it simpler\n      const revDims = keptDims.reverse();\n      const source = `\n          ${routine.routineBody}\n          float ${funcName}(int batch, int row, int col) {\n            return ${funcName}(${getSqueezedParams(params, revDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, routine.dependencies);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int depth, int row, int col) {\n            // Explicitly use integer operations as dot() only works on floats.\n            int index = depth * ${stride0} + col * ${stride1} + row;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n      `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * Unpacked 4D snippet.\n   */\n\n  protected getUnpackedSampler4D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride2 = shape[3];\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    //\n    // TODO: re-enable this shortcut once the index calculation bug is fixed.\n    //\n    // const {newShape, keptDims} = squeezeShape(shape as number[]);\n    // if (newShape.length < shape.length) {\n    //   const newInputShape = squeezeInputShape(shape, newShape);\n    //   const params = ['row', 'col', 'depth', 'depth2'];\n    //   // Deep copy of input texture layout.\n    //   const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n    //   newInputLayout.unpackedShape = newInputShape;\n    //   const source = `\n    //       ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n    //       float ${funcName}(int row, int col, int depth, int depth2) {\n    //         return ${funcName}(${getSqueezedParams(params, keptDims)});\n    //       }\n    //     `;\n    //   return new GlslLibRoutine(\n    //       source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n    // }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2) {\n          int index = row * ${stride0} + col * ${stride1} +\n              depth2 * ${stride2} + depth;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture']);\n  }\n\n  /**\n   * Unpacked 5D snippet.\n   */\n  protected getUnpackedSampler5D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride3 = shape[4];\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n          ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n          float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n            return ${funcName}(${getSqueezedParams(params, keptDims)});\n          }\n        `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n        float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n          int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth3 * ${stride3} + depth2;\n          vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n          return sampleTexture(${name}, uv);\n        }\n      `;\n    return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n  }\n\n  /**\n   * Unpacked 6D snippet.\n   */\n  protected getUnpackedSampler6D(funcName: string, name: string, inputLayout: TextureLayout): GlslLibRoutine {\n    const shape = inputLayout.unpackedShape;\n    const stride4 = shape[5];\n    const stride3 = shape[4] * stride4;\n    const stride2 = shape[3] * stride3;\n    const stride1 = shape[2] * stride2;\n    const stride0 = shape[1] * stride1;\n\n    const {newShape, keptDims} = squeezeShape(shape as number[]);\n    if (newShape.length < shape.length) {\n      const newInputShape = squeezeInputShape(shape, newShape);\n      const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n      // Deep copy of input texture layout.\n      const newInputLayout: TextureLayout = JSON.parse(JSON.stringify(inputLayout));\n      newInputLayout.unpackedShape = newInputShape;\n\n      const source = `\n            ${this.getUnpackedSamplerFromInput(funcName, name, newInputLayout).routineBody}\n            float ${funcName}(int row, int col, int depth,\n              int depth2, int depth3, int depth4) {\n              return ${funcName}(${getSqueezedParams(params, keptDims)});\n            }\n          `;\n      return new GlslLibRoutine(source, ['coordinates.sampleTexture', 'coordinates.uvFromFlat']);\n    }\n\n    const texNumR = inputLayout.width;\n    const texNumC = inputLayout.height;\n    const source = `\n          float ${funcName}(int row, int col, int depth,\n            int depth2, int depth3, int depth4) {\n            int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n            depth2 * ${stride3} + depth3 * ${stride4} + depth4;\n            vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n            return sampleTexture(${name}, uv);\n          }\n        `;\n    return new GlslLibRoutine(\n        source, ['coordinates.uvFromFlat', 'coordinates.sampleTexture', 'coordinates.coordsToOffset']);\n  }\n\n  /**\n   * This is the main function to map from the given texture coordiantes (s,t)\n   * to logical indices for the output\n   * There will only be one single variation of this\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\n   */\n  protected toVec(): {[name: string]: GlslLibRoutine} {\n    const output = this.context.outputTextureLayout;\n    const rank = output.shape.length;\n    const strides = output.strides;\n    const xScale = output.width;\n    const yScale = output.height;\n\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n        c[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= c[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n        c[${rank - 1}] = offset;`);\n    const body = `\n      void toVec(vec2 texCoords, out int c[${rank}]) {\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\n        ${stridesBlock.join('')}\n      }\n      void toVec(int offset, out int c[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n    `;\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\n  }\n  /**\n   * These are value getter functions generated for each input\n   * Each function is hardwired to the name and dimensions of the input\n   * An '_T' variation is also produced which accesses values as if the\n   * input was transposed\n   */\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const layout = this.context.inputTextureLayouts[i];\n      const shape = layout.unpackedShape.length > 0 ? layout.unpackedShape : layout.shape;\n      const rank = shape.length;\n      let funcName = `_${name}`;\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n      funcName = funcName + '_T';\n      result[funcName] = new GlslLibRoutine(\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\n          [`shapeUtils.indicesToOffset${funcName}`, 'coordinates.offsetToCoords', 'fragcolor.getColorAsFloat']);\n    });\n    return result;\n  }\n  /**\n   * Produces one value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        float ${name}(int m[${rank}]) {\n          int offset = indicesToOffset${name}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\n          return value;\n        }\n        `;\n  }\n\n  /**\n   * Produces a packed value getter function for the name and rank given\n   * If a transpose is set proper offsetToCoords mapping will be used\n   * @param name name of the function\n   * @param rank rank of the input\n   * @param transpose whether or not should generate a transpose variation\n   */\n  protected getPackedValueFrom(varName: string, rank: number, width: number, height: number, transpose: boolean):\n      string {\n    let name = `_${varName}_Pack`;\n    if (transpose) {\n      name = name + '_T';\n    }\n    const glsl = getGlsl(this.context.glContext.version);\n    return `\n        vec4 ${name}(int m[${rank}]) {\n          int offset = indicesToOffset_${varName}(m);\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\n          return ${glsl.texture2D}(${varName}, coords);\n        }\n        `;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ProgramInfo, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport enum FunctionType {\n  ValueBased,\n  Positional\n}\nexport interface GlslFunction<T extends FunctionType> {\n  body: string;\n  name: string;\n  type: T;\n}\nexport type GlslValueFunction = GlslFunction<FunctionType.ValueBased>;\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\n  inputShape: readonly number[];\n  outputShape: readonly number[];\n}\n\nexport class GlslContext {\n  constructor(\n      public glContext: WebGLContext, public programInfo: ProgramInfo, public inputTextureLayouts: TextureLayout[],\n      public outputTextureLayout: TextureLayout) {}\n}\nexport abstract class GlslLib {\n  constructor(public context: GlslContext) {}\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\n  abstract getCustomTypes(): {[name: string]: string};\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies\nexport class GlslLibRoutine {\n  constructor(public routineBody: string, public dependencies?: string[]) {}\n}\n\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\nexport class GlslLibRoutineNode {\n  dependencies: GlslLibRoutineNode[];\n  routineBody: string;\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\n    if (dependencies) {\n      this.dependencies = dependencies;\n    } else {\n      this.dependencies = [];\n    }\n\n    if (routineBody) {\n      this.routineBody = routineBody;\n    }\n  }\n  addDependency(node: GlslLibRoutineNode) {\n    if (node) {\n      this.dependencies.push(node);\n    }\n  }\n}\n\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\nexport class TopologicalSortGlslRoutines {\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\n    if (!nodes || nodes.length === 0) {\n      return [];\n    }\n\n    if (nodes.length === 1) {\n      return nodes;\n    }\n\n    const cycleCheck = new Set<string>();\n    const alreadyTraversed = new Set<string>();\n    const result = new Array<GlslLibRoutineNode>();\n\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\n    return result;\n  }\n\n  private static createOrderedNodes(\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\n      result: GlslLibRoutineNode[]) {\n    for (let i = 0; i < graphNodes.length; ++i) {\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\n    }\n  }\n\n  private static dfsTraverse(\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\n    // if this root has already been traversed return\n    if (!root || alreadyTraversed.has(root.name)) {\n      return;\n    }\n\n    // cyclic dependency has been detected\n    if (cycleCheck.has(root.name)) {\n      throw new Error('Cyclic dependency detected. Can\\'t topologically sort routines needed for shader.');\n    }\n\n    // hold this node to detect cycles if any\n    cycleCheck.add(root.name);\n\n    // traverse children in a dfs fashion\n    const dependencies = root.dependencies;\n    if (dependencies && dependencies.length > 0) {\n      for (let i = 0; i < dependencies.length; ++i) {\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\n      }\n    }\n\n    // add to result holder\n    result.push(root);\n\n    // mark this node as traversed so that we don't traverse from this again\n    alreadyTraversed.add(root.name);\n\n    // release the hold\n    cycleCheck.delete(root.name);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * This GLSL library handles routines converting\n * float32 to/from Unsigned byte or float 16\n */\nexport class EncodingGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\n        return vec4(f, 0.0, 0.0, 0.0);\n      }\n        `)\n    };\n  }\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\n    return {\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\n        return rgba.r;\n      }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      encode: new GlslLibRoutine(`\n      highp vec4 encode(highp float f) {\n        highp float F = abs(f);\n        highp float Sign = step(0.0,-f);\n        highp float Exponent = floor(log2(F));\n        highp float Mantissa = (exp2(- Exponent) * F);\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\n        highp vec4 rgba;\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\n        ${endianness}\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\n        return rgba;\n    }\n        `)\n    };\n  }\n  /**\n   * returns the routine to encode a vec4 of unsigned bytes to float32\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\n   */\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\n    return {\n      decode: new GlslLibRoutine(`\n        highp float decode(highp vec4 rgba) {\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\n          ${endianness}\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\n          return Result;\n      }\n        `)\n    };\n  }\n  /**\n   * Determines if the machine is little endian or not\n   * @credit: https://gist.github.com/TooTallNate/4750953\n   */\n  static isLittleEndian(): boolean {\n    const b = new ArrayBuffer(4);\n    const a = new Uint32Array(b);\n    const c = new Uint8Array(b);\n    a[0] = 0xdeadbeef;\n    if (c[0] === 0xef) {\n      return true;\n    }\n    if (c[0] === 0xde) {\n      return false;\n    }\n    throw new Error('unknown endianness');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\nimport {getGlsl} from './glsl-source';\n\n/**\n * This GLSL library handles routines around reading a texlet and writing to it\n * Reading and writing could be more than just dealing with one channel\n * It may require encoding/decoding to/from 4 channels into one\n */\nexport class FragColorGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\n    const glsl = getGlsl(this.context.glContext.version);\n    return {\n      setFragColor: new GlslLibRoutine(\n          `\n        void setFragColor(float value) {\n            ${glsl.output} = encode(value);\n        }\n        `,\n          ['encoding.encode'])\n    };\n  }\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\n    return {\n      getColorAsFloat: new GlslLibRoutine(\n          `\n        float getColorAsFloat(vec4 color) {\n            return decode(color);\n        }\n        `,\n          ['encoding.decode'])\n    };\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nconst INLINE_FUNC_DEF_REGEX = /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\n/**\n * GLSL preprocessor responsible for resolving @inline directives\n */\nexport function replaceInlines(script: string): string {\n  const inlineDefs: {[name: string]: {params: Array<{type: string; name: string}|null>; body: string}} = {};\n  let match;\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\n    const params = match[3]\n                       .split(',')\n                       .map(s => {\n                         const tokens = s.trim().split(' ');\n                         if (tokens && tokens.length === 2) {\n                           return {type: tokens[0], name: tokens[1]};\n                         }\n                         return null;\n                       })\n                       .filter(v => v !== null);\n    inlineDefs[match[2]] = {params, body: match[4]};\n  }\n  for (const name in inlineDefs) {\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\n    const regex = new RegExp(regexString, 'gm');\n    while ((match = regex.exec(script)) !== null) {\n      const type = match[1];\n      const variable = match[2];\n      const params = match[3].split(',');\n      const declLine = (type) ? `${type} ${variable};` : '';\n      let newBody: string = inlineDefs[name].body;\n      let paramRedecLine = '';\n      inlineDefs[name].params.forEach((v, i) => {\n        if (v) {\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\n        }\n      });\n      newBody = `${paramRedecLine}\\n ${newBody}`;\n      newBody = newBody.replace('return', `${variable} = `);\n      const replacement = `\n      ${declLine}\n      {\n        ${newBody}\n      }\n      `;\n      script = script.replace(match[0], replacement);\n    }\n  }\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\n  return script;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\nimport {replaceInlines} from './glsl-function-inliner';\nimport {glslRegistry} from './glsl-registered-libs';\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\nimport {ProgramInfo, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * Preprocessor for the additions to the GLSL language\n * It deals with:\n *  @include directives\n *  @inline\n *  Loop unrolling (not implemented)\n *  Macro resolution (not implemented)\n */\nexport class GlslPreprocessor {\n  readonly context: GlslContext;\n  readonly libs: {[name: string]: GlslLib} = {};\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\n\n  constructor(\n      glContext: WebGLContext, programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[],\n      outputTextureLayout: TextureLayout) {\n    this.context = new GlslContext(glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n\n    // construct GlslLibs\n    Object.keys(glslRegistry).forEach((name: string) => {\n      const lib = new glslRegistry[name](this.context);\n      this.libs[name] = lib;\n    });\n\n    // construct GlslRoutineDependencyGraph\n    const map = this.glslLibRoutineDependencyGraph;\n    for (const libName in this.libs) {\n      const lib = this.libs[libName];\n      const routinesInLib = lib.getFunctions();\n      for (const routine in routinesInLib) {\n        const key = libName + '.' + routine;\n        let currentNode: GlslLibRoutineNode;\n        if (map[key]) {\n          currentNode = map[key];\n          currentNode.routineBody = routinesInLib[routine].routineBody;\n        } else {\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\n          map[key] = currentNode;\n        }\n        const dependencies = routinesInLib[routine].dependencies;\n        if (dependencies) {\n          for (let i = 0; i < dependencies.length; ++i) {\n            if (!map[dependencies[i]]) {\n              const node = new GlslLibRoutineNode(dependencies[i]);\n              map[dependencies[i]] = node;\n              currentNode.addDependency(node);\n            } else {\n              currentNode.addDependency(map[dependencies[i]]);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  preprocess(): string {\n    const programInfo = this.context.programInfo;\n    let source = programInfo.shaderSource;\n\n    // append main() function\n    if (!this.context.programInfo.hasMain) {\n      source = `${source}\n      ${getDefaultFragShaderMain(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`;\n    }\n    // replace inlines\n    source = replaceInlines(source);\n\n    // concat final source string\n    return `${getFragShaderPreamble(this.context.glContext.version)}\n    ${this.getUniforms(programInfo.inputNames, programInfo.variables)}\n    ${this.getImports(source)}\n    ${source}`;\n  }\n\n  protected getImports(script: string): string {\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\n\n    if (routinesIncluded.length === 0) {\n      return '';\n    }\n\n    let routines = '';\n    for (let i = 0; i < routinesIncluded.length; ++i) {\n      if (routinesIncluded[i].routineBody) {\n        routines += routinesIncluded[i].routineBody + '\\n';\n      } else {\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\n      }\n    }\n\n    return routines;\n  }\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\n    const nodes: GlslLibRoutineNode[] = [];\n\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\n      const routine = classAndRoutine.split('.')[1];\n      if (script.indexOf(routine) !== -1) {\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\n      }\n    });\n\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\n  }\n\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\n    const uniformLines: string[] = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLines.push(`uniform sampler2D ${sampler};`);\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLines.push(\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\n      }\n    }\n    return uniformLines.join('\\n');\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\nimport {GlslContext, GlslLib} from './glsl-definitions';\nimport {EncodingGlslLib} from './glsl-encoding-lib';\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\nimport {VecGlslLib} from './glsl-vec-lib';\n\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\n  'encoding': EncodingGlslLib,\n  'fragcolor': FragColorGlslLib,\n  'vec': VecGlslLib,\n  'shapeUtils': ShapeUtilsGlslLib,\n  'coordinates': CoordsGlslLib,\n  //  'arrays': ArrayGlslSLib\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for data types and routines for manipulating\n * coordinates and mapping to/from tensor indices\n */\nexport class ShapeUtilsGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {\n      ...this.bcastIndex(),\n      ...this.bcastMatmulIndex(),\n      ...this.offsetToIndices(),\n      ...this.indicesToOffset(),\n      ...this.incrementIndices()\n    };\n  }\n  getCustomTypes() {\n    return {};\n  }\n  protected bcastIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].unpackedShape;\n      if (shape.length <= outputRank) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine} {\n    const outputRank = this.context.outputTextureLayout.shape.length;\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      if (!(shape.length < 2 || shape.length > outputRank)) {\n        const rank = shape.length;\n        const dimOffset = outputRank - rank;\n        const funcName = `bcastMatmulIndices_${name}`;\n        let block = '';\n        for (let i = 0; i < rank - 2; ++i) {\n          block += `\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\n          `;\n        }\n        const body = `\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\n          ${block}\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\n        }\n        `;\n        result[funcName] = new GlslLibRoutine(body);\n      }\n    });\n    return result;\n  }\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `indicesToOffset_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\n      funcName = `indicesToOffset_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static indexToOffsetSingle(name: string, rank: number, strides: readonly number[]): string {\n    let block = '';\n    for (let i = rank - 1; i >= 0; --i) {\n      block += `\n        offset += indices[${i}] * ${strides[i]};\n        `;\n    }\n    return `\n      int ${name}(int indices[${rank}]) {\n        int offset = 0;\n        ${block}\n        return offset;\n      }\n      `;\n  }\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const strides = this.context.inputTextureLayouts[i].strides;\n      const rank = shape.length;\n      let funcName = `offsetToIndices_${name}`;\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\n      funcName = `offsetToIndices_${name}_T`;\n      result[funcName] =\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\n    });\n    return result;\n  }\n  static offsetToIndicesSingle(name: string, rank: number, strides: readonly number[]): string {\n    const stridesBlock = [];\n    for (let i = 0; i < rank - 1; ++i) {\n      stridesBlock.push(`\n      indices[${i}] = offset / ${strides[i]};`);\n      stridesBlock.push(`\n        offset -= indices[${i}] * ${strides[i]};`);\n    }\n    stridesBlock.push(`\n      indices[${rank - 1}] = offset;`);\n    return `\n      void ${name}(int offset, out int indices[${rank}]) {\n        ${stridesBlock.join('')}\n      }\n      `;\n  }\n  protected incrementIndices(): {[name: string]: GlslLibRoutine} {\n    const result: {[name: string]: GlslLibRoutine} = {};\n    this.context.programInfo.inputNames.forEach((name, i) => {\n      const shape = this.context.inputTextureLayouts[i].shape;\n      const rank = shape.length;\n      const funcName = `incrementIndices_${name}`;\n      let shapeInit = '';\n      for (let i = 0; i < rank; ++i) {\n        shapeInit += `\n        shape[${i}] = ${shape[i]};`;\n      }\n      const body = `\n        void ${funcName}(int axis, out int indices[${rank}]) {\n          int shape[${rank}];\n          ${shapeInit};\n          for(int i = ${rank} -1 ; i >= 0; --i) {\n            if(i > axis) continue;\n            indices[i] += 1;\n            if(indices[i] < shape[i]) {\n              break;\n            }\n            indices[i] = 0;\n          }\n        }\n        `;\n      result[funcName] = new GlslLibRoutine(body);\n    });\n    return result;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/**\n * represent a version irrelevant abstraction of for GLSL source code\n */\nexport interface Glsl {\n  readonly version: string;\n  readonly attribute: string;\n  readonly varyingVertex: string;\n  readonly varyingFrag: string;\n  readonly texture2D: string;\n  readonly output: string;\n  readonly outputDeclaration: string;\n}\n\nconst GLSL_ES_2_0: Glsl = {\n  version: '',\n  attribute: 'attribute',\n  varyingVertex: 'varying',\n  varyingFrag: 'varying',\n  texture2D: 'texture2D',\n  output: 'gl_FragColor',\n  outputDeclaration: '',\n};\nconst GLSL_ES_3_0: Glsl = {\n  version: '#version 300 es',\n  attribute: 'in',\n  varyingVertex: 'out',\n  varyingFrag: 'in',\n  texture2D: 'texture',\n  output: 'outputColor',\n  outputDeclaration: 'out vec4 outputColor;',\n};\n\nexport function getGlsl(version: 1|2) {\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\n}\n\nexport function getVertexShaderSource(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n      precision highp float;\n      ${glsl.attribute} vec3 position;\n      ${glsl.attribute} vec2 textureCoord;\n\n      ${glsl.varyingVertex} vec2 TexCoords;\n\n      void main()\n      {\n          gl_Position = vec4(position, 1.0);\n          TexCoords = textureCoord;\n      }`;\n}\n\nexport function getFragShaderPreamble(version: 1|2): string {\n  const glsl = getGlsl(version);\n  return `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFrag} vec2 TexCoords;\n    ${glsl.outputDeclaration}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    // Custom vector types to handle higher dimenalities.\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    `;\n}\n\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\n  const glsl = getGlsl(version);\n  return `\n  void main() {\n    int indices[${outputShapeLength}];\n    toVec(TexCoords, indices);\n    vec4 result = vec4(process(indices));\n    ${glsl.output} = result;\n  }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\n\n/**\n * GLSL Library responsible for vec routines\n * Vec is an varible length int array. The length is fixed at the time of\n * generating the library functions from the dimensions of the output.\n */\nexport class VecGlslLib extends GlslLib {\n  constructor(context: GlslContext) {\n    super(context);\n  }\n  getCustomTypes(): {[name: string]: string} {\n    return {};\n  }\n  getFunctions(): {[name: string]: GlslLibRoutine} {\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\n  }\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    const nameOp: {[name: string]: string} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\n    const result: {[name: string]: GlslLibRoutine} = {};\n    for (const name in nameOp) {\n      const fname = `${name}Vec`;\n      let assignmentBlock = '';\n      for (let i = 0; i < rank; ++i) {\n        assignmentBlock += `\n          dest[${i}] ${nameOp[name]} src[${i}];\n          `;\n      }\n      const body = `\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\n          ${assignmentBlock}\n        }\n        `;\n      result[fname] = new GlslLibRoutine(body);\n    }\n\n    return result;\n  }\n  protected copyVec(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let assignmentBlock = '';\n    for (let i = 0; i < rank; ++i) {\n      assignmentBlock += `\n        dest[${i}] = src[${i}];\n        `;\n    }\n    const body = `\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\n        ${assignmentBlock}\n      }\n      `;\n    return {copyVec: new GlslLibRoutine(body)};\n  }\n\n  protected setVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index =${rank} + index;\n        if (index == 0)\n            m[0] = value;\n        `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            m[${i}] = value;\n            `;\n    }\n    block += `\n        else\n            m[${rank - 1}] = value;\n        `;\n    const body = `\n      void setVecItem(out int m[${rank}], int index, int value) {\n        ${block}\n      }\n        `;\n    return {setVecItem: new GlslLibRoutine(body)};\n  }\n  protected getVecItem(): {[name: string]: GlslLibRoutine} {\n    const outputLayout = this.context.outputTextureLayout;\n    const rank = outputLayout.shape.length;\n    let block = `\n        if(index < 0)\n            index = ${rank} + index;\n        if (index == 0)\n            return m[0];\n      `;\n    for (let i = 1; i < rank - 1; ++i) {\n      block += `\n        else if (index == ${i})\n            return m[${i}];\n      `;\n    }\n    block += `\n        else\n            return m[${rank - 1}];\n        `;\n    const body = `\n      int getVecItem(int m[${rank}], int index) {\n        ${block}\n      }\n    `;\n    return {getVecItem: new GlslLibRoutine(body)};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from '../../backend';\nimport {Logger} from '../../instrument';\nimport {Tensor} from '../../tensor';\nimport {ShapeUtil} from '../../util';\n\nimport {createPackProgramInfoLoader} from './ops/pack';\nimport {createPackedReshape3DProgramInfoLoader, isReshapeCheap, processDims3D} from './ops/reshape-packed';\nimport {encodeAsUint8} from './ops/uint8-encode';\nimport {createUnpackProgramInfoLoader} from './ops/unpack';\nimport {WebGLSessionHandler} from './session-handler';\nimport {Encoder} from './texture-data-encoder';\nimport {calculateTextureWidthAndHeight, createTextureLayoutFromShape, createTextureLayoutFromTextureType} from './texture-layout';\nimport {Artifact, ProgramInfo, ProgramInfoLoader, TextureData, TextureLayout, TextureType} from './types';\n\nconst getProgramInfoUniqueKey =\n    (programInfo: ProgramInfo|ProgramInfoLoader, inputTextureDatas: TextureData[]): string => {\n      const inputs =\n          inputTextureDatas.map(texture => `${texture.unpackedShape.join(',')};${texture.width}x${texture.height}`)\n              .join('_');\n      let key = programInfo.name;\n      if (programInfo.cacheHint) {\n        key += '[' + programInfo.cacheHint + ']';\n      }\n      key += ':' + inputs;\n      return key;\n    };\n\nexport class WebGLInferenceHandler implements InferenceHandler {\n  private packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  private unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  constructor(public session: WebGLSessionHandler) {\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  /**\n   * @returns [width, height]\n   */\n  calculateTextureWidthAndHeight(shape: readonly number[], textureType: TextureType): [number, number] {\n    return calculateTextureWidthAndHeight(this.session.layoutStrategy, shape, textureType);\n  }\n\n  executeProgram(program: ProgramInfo|ProgramInfoLoader, inputs: readonly Tensor[]): TextureData {\n    if (inputs.length < program.inputNames.length) {\n      throw new Error(`Input size mustn't be less than ${program.inputNames.length}.`);\n    }\n    if (program.inputNames.length !== program.inputTypes.length) {\n      throw new Error('input names size does not match input types');\n    }\n\n    // create texture info for input\n    const inputTextureDatas: TextureData[] = [];\n    for (let i = 0; i < program.inputNames.length; ++i) {\n      inputTextureDatas[i] = this.getOrCreateTextureData(inputs[i], program.inputTypes[i]);\n    }\n\n    const key = getProgramInfoUniqueKey(program, inputTextureDatas);\n    let artifact = this.session.programManager.getArtifact(key);\n    const programInfo = artifact ?\n        artifact.programInfo :\n        (typeof (program as ProgramInfoLoader).get === 'function' ? (program as ProgramInfoLoader).get() :\n                                                                    (program as ProgramInfo));\n\n    // create texture info for output\n    const outputTextureLayout = createTextureLayoutFromTextureType(\n        this.session.layoutStrategy, programInfo.output.dims, programInfo.output.textureType);\n    const outputTextureData = this.createTextureData(outputTextureLayout, programInfo.output.type);\n\n    if (!artifact) {\n      artifact = this.session.programManager.build(programInfo, inputTextureDatas, outputTextureData);\n      this.session.programManager.setArtifact(key, artifact);\n    }\n\n    this.runProgram(artifact, inputTextureDatas, outputTextureData);\n    return outputTextureData;\n  }\n\n  run(program: ProgramInfoLoader, inputs: readonly Tensor[]): Tensor {\n    const outputTextureData = this.executeProgram(program, inputs);\n    return outputTextureData.tensor;\n  }\n\n  private runProgram(artifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    // input should match\n    for (let i = 0; i < inputs.length; ++i) {\n      if (!!inputs[i].isPacked !== (artifact.programInfo.inputTypes[i] === TextureType.packed)) {\n        throw new Error(`input[${i}] property packed inconsistent`);\n      }\n    }\n\n    // output should match\n    if (!!output.isPacked !== (artifact.programInfo.output.textureType === TextureType.packed)) {\n      throw new Error('output property packed inconsistent');\n    }\n\n    this.session.programManager.run(artifact, inputs, output);\n  }\n\n  /**\n   * Create a TextureData object from a tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * If a related texture data is found in cache, returns it;\n   * Otherwise:\n   *   Creates a new texture layout if not provided;\n   *   Creates WebGLTexture with the layout;\n   *   Upload tensor data to the texture;\n   *   Creates a texture data object associated with the given tensor.\n   * @param tensor the tensor with data to upload\n   */\n  private getOrCreateTextureData(tensor: Tensor, textureType: TextureType) {\n    let td = this.getTextureData(tensor.dataId, textureType === TextureType.packed);\n\n    if (!td) {\n      // check if we have texture data in different type\n      td = this.getTextureData(tensor.dataId, textureType !== TextureType.packed);\n      if (td) {\n        if (textureType === TextureType.packed) {\n          return this.pack(td);\n        } else {\n          return this.unpack(td);\n        }\n      }\n    }\n\n    if (!td) {\n      const layout = createTextureLayoutFromTextureType(this.session.layoutStrategy, tensor.dims, textureType);\n\n      if (textureType === TextureType.packedLastDimension) {\n        const group = 1;\n        const channels = 4;\n        const shape = tensor.dims;\n        if (shape.length === 4) {\n          // pre-processing for kernel data of Conv.\n          //\n          // TODO: currently this is a hacking to overwrite Conv's weight. The correct way to do this should be:\n          // 1. implement texture based const-folding\n          // 2. create a WebGL program \"preprocessConvWeight\" to do the same work as below\n          // 3. run the program before dotProduct.\n          //\n          const adjustedKernelShape = [shape[0], Math.ceil((shape[1] * shape[2] * shape[3]) / channels)];\n          const adjustedLayout =\n              createTextureLayoutFromTextureType(this.session.layoutStrategy, adjustedKernelShape, textureType);\n          let buffer = tensor.numberData;\n          if (shape[1] * shape[2] * shape[3] % channels !== 0) {\n            const numFeatureMaps = shape[0];\n            const oldRowSize = shape[1] * shape[2] * shape[3];\n            const newRowSize = Math.ceil(oldRowSize * group / channels) * channels;\n            const newSize = numFeatureMaps * newRowSize;\n            buffer = new Float32Array(newSize);\n            for (let f = 0; f < numFeatureMaps; ++f) {\n              const oldOffset = f * oldRowSize;\n              const newOffset = f * newRowSize + f % group * oldRowSize;\n              buffer.set(tensor.numberData.subarray(oldOffset, oldOffset + oldRowSize), newOffset);\n            }\n          }\n          return this.createTextureData(adjustedLayout, tensor.type, buffer, tensor, Encoder.Usage.UploadOnly);\n        }\n      }\n\n      if (textureType === TextureType.packed) {\n        const unpackedTextureLayout =\n            createTextureLayoutFromShape(this.session.layoutStrategy, tensor.dims, 1, [], {reverseWH: true});\n        const unpackedTextureData = this.createTextureData(\n            unpackedTextureLayout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n        td = this.pack(unpackedTextureData);\n      } else {\n        td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\n      }\n    }\n    return td;\n  }\n\n  /**\n   * Create a TextureData object using the given data and bind to the given tensor.\n   * Usage = Encoder.Usage.UploadOnly.\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\n   * implementation by Graph.Transformer\n   * @param dataType the tensor data type\n   * @param data the actual data to upload\n   * @param tensor the tensor to bind. tensor's data is ignored.\n   */\n  createTextureDataFromLayoutBindTensor(\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\n  }\n\n  private createTextureData(\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\n      usage?: Encoder.Usage): TextureData {\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\n  }\n\n  reshapeUnpacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureLayout: TextureLayout = {\n      channels: inputTD.channels,\n      height: inputTD.height,\n      width: inputTD.width,\n      // handle reshaping into scalar Tensors\n      shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n      strides: ShapeUtil.computeStrides(reshapedDims),\n      unpackedShape: reshapedDims,\n    };\n    const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  reshapePacked(input: Tensor, reshapedDims: readonly number[]): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.packed);\n\n    // check if the reshape is 'cheap'\n    if (isReshapeCheap(input.dims, reshapedDims)) {\n      const newTextureLayout: TextureLayout = {\n        channels: inputTD.channels,\n        height: inputTD.height,\n        width: inputTD.width,\n        // handle reshaping into scalar Tensors\n        shape: reshapedDims.length !== 0 ? reshapedDims : [1],\n        strides: ShapeUtil.computeStrides(reshapedDims),\n        unpackedShape: reshapedDims,\n        isPacked: true\n      };\n      const newTextureData = this.createTextureDataFromTexture(newTextureLayout, input.type, inputTD.texture);\n      return newTextureData.tensor;\n    }\n\n    const squeezedInputShape = processDims3D(input.dims);\n    const squeezedOutputShape = processDims3D(reshapedDims);\n\n    const squeezedInputTensor = this.reshapePacked(input, squeezedInputShape);\n    const squeezedOutputTensor = this.run(\n        createPackedReshape3DProgramInfoLoader(this, squeezedInputTensor, squeezedOutputShape), [squeezedInputTensor]);\n    const outputTensor = this.reshapePacked(squeezedOutputTensor, reshapedDims);\n    return outputTensor;\n  }\n\n  cast(input: Tensor, type: Tensor.DataType): Tensor {\n    const inputTD = this.getOrCreateTextureData(input, TextureType.unpacked);\n    const newTextureData = this.createTextureDataFromTexture(inputTD as TextureLayout, type, inputTD.texture);\n    return newTextureData.tensor;\n  }\n\n  private createTextureDataFromTexture(\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\n    const textureData: TextureData = {\n      ...layout,\n      tensor: tensor ||\n          new Tensor(\n                  layout.unpackedShape, dataType, (_id: Tensor.Id) => this.readTexture(textureData),\n                  async (_id: Tensor.Id) => this.readTextureAsync(textureData), undefined, tensorId),\n      texture\n    };\n    this.setTextureData(textureData.tensor.dataId, textureData, layout.isPacked);\n    return textureData;\n  }\n\n  private getTextureData(tensorId: Tensor.Id, isPacked = false): TextureData|undefined {\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId, isPacked) :\n        isPacked                                ? this.packedTextureDataCache.get(tensorId) :\n                                                  this.unpackedTextureDataCache.get(tensorId);\n  }\n  setTextureData(tensorId: Tensor.Id, td: TextureData, isPacked = false): void {\n    if (this.session.isInitializer(tensorId)) {\n      this.session.setTextureData(tensorId, td, isPacked);\n    } else {\n      (isPacked ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(tensorId, td);\n    }\n  }\n  isTextureLayoutCached(tensor: Tensor, isPacked = false): boolean {\n    return !!this.getTextureData(tensor.dataId, isPacked);\n  }\n\n  dispose(): void {\n    this.session.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\n    this.unpackedTextureDataCache = new Map();\n  }\n\n  readTexture(textureData: TextureData): Tensor.NumberType {\n    if (textureData.isPacked) {\n      return this.readTexture(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  async readTextureAsync(textureData: TextureData): Promise<Tensor.NumberType> {\n    if (textureData.isPacked) {\n      return this.readTextureAsync(this.unpack(textureData));\n    }\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\n      return this.session.textureManager.readUint8TextureAsFloat(encodeAsUint8(this, textureData));\n    }\n    return this.session.textureManager.readTextureAsync(textureData, textureData.tensor.type, textureData.channels);\n  }\n\n  pack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createPackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n\n  unpack(input: TextureData): TextureData {\n    const outputTextureData = this.executeProgram(createUnpackProgramInfoLoader(this, input.tensor), [input.tensor]);\n    return outputTextureData;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {OpSet} from '../../opset';\n\nimport {batchNormalization, parseBatchNormalizationAttributes} from './ops/batch-normalization';\nimport * as binaryOps from './ops/binary-op';\nimport {cast, parseCastAttributes} from './ops/cast';\nimport {concat, parseConcatAttributes} from './ops/concat';\nimport {conv, parseConvAttributes} from './ops/conv';\nimport {convTranspose, parseConvTransposeAttributes} from './ops/conv-transpose';\nimport {depthToSpace, parseDepthToSpaceAttributes} from './ops/depth-to-space';\nimport {flatten, parseFlattenAttributes} from './ops/flatten';\nimport {gather, parseGatherAttributes} from './ops/gather';\nimport {gemm, parseGemmAttributesV11, parseGemmAttributesV7} from './ops/gemm';\nimport {imageScaler, parseImageScalerAttributes} from './ops/image-scaler';\nimport {instanceNormalization, parseInstanceNormalizationAttributes} from './ops/instance-normalization';\nimport {lrn, parseLrnAttributes} from './ops/lrn';\nimport {matMul, parseMatMulAttributes} from './ops/matmul';\nimport {padV11, padV2, parsePadAttributesV11, parsePadAttributesV2} from './ops/pad';\nimport {averagePool, globalAveragePool, globalMaxPool, maxPool, parseAveragePoolAttributes, parseGlobalAveragePoolAttributes, parseMaxPoolAttributes} from './ops/pool';\nimport {parseReduceAttributes, reduceLogSum, reduceLogSumSquare, reduceMax, reduceMean, reduceMin, reduceProd, reduceSum} from './ops/reduce';\nimport {reshape} from './ops/reshape';\nimport {parseResizeAttributesV10, parseResizeAttributesV11, resize} from './ops/resize-packed';\nimport {shape} from './ops/shape';\nimport {parseSliceAttributes, slice, sliceV10} from './ops/slice';\nimport {parseSoftmaxAttributes, parseSoftmaxAttributesV13, softmax, softmaxV13} from './ops/softmax';\nimport {parseSplitAttributes, split} from './ops/split';\nimport {parseSqueezeAttributes, squeeze, squeezeV13} from './ops/squeeze';\nimport {sum} from './ops/sum';\nimport {tile} from './ops/tile';\nimport {parseTransposeAttributes, transpose} from './ops/transpose';\nimport * as unaryOps from './ops/unary-op';\nimport {parseUnsqueezeAttributes, unsqueeze, unsqueezeV13} from './ops/unsqueeze';\nimport {parseUpsampleAttributesV7, parseUpsampleAttributesV9, upsample} from './ops/upsample';\n\nexport const WEBGL_OP_RESOLVE_RULES: readonly OpSet.ResolveRule[] = [\n  ['Abs', '', '6+', unaryOps.abs],\n  ['Acos', '', '7+', unaryOps.acos],\n  ['Add', '', '7+', binaryOps.add],\n  ['And', '', '7+', binaryOps.and],\n  ['Asin', '', '7+', unaryOps.asin],\n  ['Atan', '', '7+', unaryOps.atan],\n  // TODO: support new attributes for AveragePool-10\n  ['AveragePool', '', '7+', averagePool, parseAveragePoolAttributes],\n  ['BatchNormalization', '', '7+', batchNormalization, parseBatchNormalizationAttributes],\n  ['Cast', '', '6+', cast, parseCastAttributes],\n  ['Ceil', '', '6+', unaryOps.ceil],\n  ['Clip', '', '6-10', unaryOps.clip, unaryOps.parseClipAttributes],\n  ['Clip', '', '11+', unaryOps.clipV11],\n  ['Concat', '', '4+', concat, parseConcatAttributes],\n  ['Conv', '', '1+', conv, parseConvAttributes],\n  ['ConvTranspose', '', '1+', convTranspose, parseConvTransposeAttributes],\n  ['Cos', '', '7+', unaryOps.cos],\n  ['Div', '', '7+', binaryOps.div],\n  ['Dropout', '', '7+', unaryOps.identity],\n  ['DepthToSpace', '', '1+', depthToSpace, parseDepthToSpaceAttributes],\n  ['Equal', '', '7+', binaryOps.equal],\n  ['Elu', '', '6+', unaryOps.elu, unaryOps.parseEluAttributes],\n  ['Exp', '', '6+', unaryOps.exp],\n  ['Flatten', '', '1+', flatten, parseFlattenAttributes],\n  ['Floor', '', '6+', unaryOps.floor],\n  ['FusedConv', 'com.microsoft', '1+', conv, parseConvAttributes],\n  ['Gather', '', '1+', gather, parseGatherAttributes],\n  ['Gemm', '', '7-10', gemm, parseGemmAttributesV7],\n  ['Gemm', '', '11+', gemm, parseGemmAttributesV11],\n  ['GlobalAveragePool', '', '1+', globalAveragePool, parseGlobalAveragePoolAttributes],\n  ['GlobalMaxPool', '', '1+', globalMaxPool],\n  ['Greater', '', '7+', binaryOps.greater],\n  ['Identity', '', '1+', unaryOps.identity],\n  ['ImageScaler', '', '1+', imageScaler, parseImageScalerAttributes],\n  ['InstanceNormalization', '', '6+', instanceNormalization, parseInstanceNormalizationAttributes],\n  ['LeakyRelu', '', '6+', unaryOps.leakyRelu, unaryOps.parseLeakyReluAttributes],\n  ['Less', '', '7+', binaryOps.less],\n  ['LRN', '', '1+', lrn, parseLrnAttributes],\n  ['Log', '', '6+', unaryOps.log],\n  ['MatMul', '', '1+', matMul, parseMatMulAttributes],\n  // TODO: support new attributes for MaxPool-8 and MaxPool-10\n  ['MaxPool', '', '1+', maxPool, parseMaxPoolAttributes],\n  ['Mul', '', '7+', binaryOps.mul],\n  ['Neg', '', '6+', unaryOps.neg],\n  ['Not', '', '1+', unaryOps.not],\n  ['Or', '', '7+', binaryOps.or],\n  ['Pad', '', '2-10', padV2, parsePadAttributesV2],\n  ['Pad', '', '11+', padV11, parsePadAttributesV11],\n  ['Pow', '', '7+', binaryOps.pow],\n  ['PRelu', '', '7+', binaryOps.pRelu],\n  ['ReduceLogSum', '', '1+', reduceLogSum, parseReduceAttributes],\n  ['ReduceMax', '', '1+', reduceMax, parseReduceAttributes],\n  ['ReduceMean', '', '1+', reduceMean, parseReduceAttributes],\n  ['ReduceMin', '', '1+', reduceMin, parseReduceAttributes],\n  ['ReduceProd', '', '1+', reduceProd, parseReduceAttributes],\n  ['ReduceSum', '', '1-12', reduceSum, parseReduceAttributes],\n  ['ReduceSumSquare', '', '1+', reduceLogSumSquare, parseReduceAttributes],\n  ['Relu', '', '6+', unaryOps.relu],\n  ['Reshape', '', '5+', reshape],\n  ['Resize', '', '10', resize, parseResizeAttributesV10],\n  ['Resize', '', '11+', resize, parseResizeAttributesV11],\n  ['Shape', '', '1+', shape],\n  ['Sigmoid', '', '6+', unaryOps.sigmoid],\n  ['Sin', '', '7+', unaryOps.sin],\n  ['Slice', '', '10+', sliceV10],  // TODO: support 'steps' for Slice-10\n  ['Slice', '', '1-9', slice, parseSliceAttributes],\n  // The \"semantic\" meaning of axis has changed in opset-13.\n  ['Softmax', '', '1-12', softmax, parseSoftmaxAttributes],\n  ['Softmax', '', '13+', softmaxV13, parseSoftmaxAttributesV13],\n  // 'Split' operator has an optional attribute 'split'\n  // this attribute determines how the specified axis of input data is split.\n  // When the attribute is missing, we need the count of number of outputs\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\n  ['Split', '', '2-12', split, parseSplitAttributes],\n  ['Sqrt', '', '6+', unaryOps.sqrt],\n  ['Squeeze', '', '1-12', squeeze, parseSqueezeAttributes],\n  ['Squeeze', '', '13+', squeezeV13],\n  ['Sub', '', '7+', binaryOps.sub],\n  ['Sum', '', '6+', sum],\n  ['Tan', '', '7+', unaryOps.tan],\n  ['Tanh', '', '6+', unaryOps.tanh],\n  ['Tile', '', '6+', tile],\n  ['Transpose', '', '1+', transpose, parseTransposeAttributes],\n  ['Upsample', '', '7-8', upsample, parseUpsampleAttributesV7],\n  ['Upsample', '', '9', upsample, parseUpsampleAttributesV9],\n  ['Unsqueeze', '', '1-12', unsqueeze, parseUnsqueezeAttributes],\n  ['Unsqueeze', '', '13+', unsqueezeV13],\n  ['Xor', '', '7+', binaryOps.xor],\n];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface BatchNormalizationAttributes extends AttributeWithCacheKey {\n  epsilon: number;\n  momentum: number;\n  spatial: number;\n}\n\nconst batchNormalizationProgramMetadata = {\n  name: 'BatchNormalization',\n  inputNames: ['A', 'Scale', 'B', 'Mean', 'Variance'],\n  inputTypes:\n      [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked, TextureType.unpacked]\n};\n\nexport const batchNormalization: OperatorImplementation<BatchNormalizationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...batchNormalizationProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createBatchNormalizationProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseBatchNormalizationAttributes: OperatorInitialization<BatchNormalizationAttributes> =\n    (node: Graph.Node): BatchNormalizationAttributes => {\n      const epsilon = node.attributes.getFloat('epsilon', 1e-5);\n      const momentum = node.attributes.getFloat('momentum', 0.9);\n      const spatial = node.attributes.getInt('spatial', 1);\n      return createAttributeWithCacheKey({epsilon, momentum, spatial});\n    };\n\nconst createBatchNormalizationProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: BatchNormalizationAttributes):\n        ProgramInfo => {\n          const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n          const rank = inputs[0].dims.length;\n          const [scaleWidth, scaleHeight] =\n              inferenceHandler.calculateTextureWidthAndHeight(inputs[1].dims, TextureType.unpacked);\n          const shaderSource = `\n  float process(int[${rank}] indices) {\n    vec2 position = offsetToCoords(indices[1], ${scaleWidth}, ${scaleHeight});\n    float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\n    float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\n    float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\n    float b = getColorAsFloat(${glsl.texture2D}(B, position));\n\n    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${attributes.epsilon})) ) + b;\n  }`;\n          return {\n            ...batchNormalizationProgramMetadata,\n            output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 5) {\n    throw new Error('BatchNormalization requires 5 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n  const mean = inputs[3];\n  const var_ = inputs[4];\n\n  // input should atleast have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\n      var_.dims.length !== 1) {\n    throw new Error('invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\n      var_.dims[0] !== X.dims[1]) {\n    throw new Error('invalid input shape.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\n      (var_.type !== 'float32' && var_.type !== 'float64')) {\n    throw new Error('invalid input tensor types.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport function glslAdd(): GlslValueFunction {\n  const name = 'add_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a + b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 + v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslDiv(): GlslValueFunction {\n  const name = 'div_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a / b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 / v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslMul(): GlslValueFunction {\n  const name = 'mul_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a * b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 * v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSub(): GlslValueFunction {\n  const name = 'sub_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a - b;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return v1 - v2;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslEqual(): GlslValueFunction {\n  const name = 'equal_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a == b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(equal(v1, v2));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslGreater(): GlslValueFunction {\n  const name = 'greater_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a > b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r > v2.r ,\n      v1.g > v2.g,\n      v1.b > v2.b,\n      v1.a > v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLess(): GlslValueFunction {\n  const name = 'less_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float(a < b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4( v1.r < v2.r ,\n                v1.g < v2.g,\n                v1.b < v2.b,\n                v1.a < v2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslAnd(): GlslValueFunction {\n  const name = 'and_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) && bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r && b2.r ,\n                b1.g && b2.g,\n                b1.b && b2.b,\n                b1.a && b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslOr(): GlslValueFunction {\n  const name = 'or_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) || bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r || b2.r ,\n                b1.g || b2.g,\n                b1.b || b2.b,\n                b1.a || b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslXor(): GlslValueFunction {\n  const name = 'xor_';\n  const body = `\n  float ${name}(float a, float b) {\n    return float( bool(a) ^^ bool(b) );\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    bvec4 b1 = bvec4(v1);\n    bvec4 b2 = bvec4(v2);\n    return vec4( b1.r ^^ b2.r ,\n                b1.g ^^ b2.g,\n                b1.b ^^ b2.b,\n                b1.a ^^ b2.a );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslPow(): GlslValueFunction {\n  return glslBuiltinBinary('pow');\n}\nexport function glslPRelu(): GlslValueFunction {\n  const name = 'prelu_';\n  const body = `\n  float ${name}(float a, float b) {\n    return a < 0.0 ? a * b: a;\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return vec4(\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\n      );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\n  const name = `${fname}_`;\n  const body = `\n  float ${name}(float a, float b) {\n    return ${fname}(a, b);\n  }\n  vec4 ${name}(vec4 v1, vec4 v2) {\n    return ${fname}(v1, v2);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\nconst createBinaryProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type, cacheKey?: string): ProgramInfoLoader => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        cacheHint: cacheKey,\n        get: () => createBinaryProgramInfo(handler, inputs, glslFunc, outputTensorType)\n      };\n    };\n\nconst createBinaryProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], glslFunc: GlslValueFunction,\n     outputTensorType: Tensor.DataType = inputs[0].type): ProgramInfo => {\n      const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n      let outputShape = inputs[0].dims;\n\n      const usePackedTexture = handler.session.pack;\n\n      if (isBroadcast) {\n        const calculatedShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\n        if (!calculatedShape) {\n          throw new Error('Can\\'t perform binary op on the given tensors');\n        }\n        outputShape = calculatedShape;\n        const outputRank = outputShape.length;\n        const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\n        const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\n        const aBcast = inputs[0].dims.length !== 0 ? 'bcastIndices_A(indices, aindices);' : 'aindices[0] = 0;';\n        const bBcast = inputs[1].dims.length !== 0 ? 'bcastIndices_B(indices, bindices);' : 'bindices[0] = 0;';\n\n        const glsl = getGlsl(handler.session.backend.glContext.version);\n        const shaderSource = usePackedTexture ? `\n      ${glslFunc.body}\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n        vec4 result = ${glslFunc.name}(a, b);\n        ${glsl.output} = result;\n      }` :\n                                                `\n      ${glslFunc.body}\n      float process(int indices[${outputRank}]) {\n        int aindices[${aRank}];\n        int bindices[${bRank}];\n        ${aBcast}\n        ${bBcast}\n        return ${glslFunc.name}(_A(aindices), _B(bindices));\n      }`;\n\n        return {\n          name: glslFunc.name,\n          inputNames: ['A', 'B'],\n          inputTypes: [textureType, textureType],\n          output: {dims: outputShape, type: outputTensorType, textureType},\n          shaderSource,\n          hasMain: usePackedTexture\n        };\n      }\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n      const shaderSource = `\n    ${glslFunc.body}\n    void main() {\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\n      vec4 result = ${glslFunc.name}(v1, v2);\n      ${glsl.output} = result;\n    }\n    `;\n\n      return {\n        name: glslFunc.name,\n        inputNames: ['A', 'B'],\n        inputTypes: [textureType, textureType],\n        output: {dims: inputs[0].dims, type: outputTensorType, textureType},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const add = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAdd()), inputs)];\n\nexport const and = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslAnd(), 'bool'), inputs)];\n\nexport const div = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslDiv()), inputs)];\n\nexport const equal = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslEqual(), 'bool'), inputs)];\n\nexport const greater = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslGreater(), 'bool'), inputs)];\n\nexport const less = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslLess(), 'bool'), inputs)];\n\nexport const mul = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslMul()), inputs)];\n\nexport const or = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslOr(), 'bool'), inputs)];\n\nexport const pow = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPow()), inputs)];\n\nexport const pRelu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslPRelu()), inputs)];\n\nexport const sub = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslSub()), inputs)];\n\nexport const xor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createBinaryProgramInfoLoader(handler, inputs, glslXor(), 'bool'), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ProtoUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const cast: OperatorImplementation<Tensor.DataType> =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], to: Tensor.DataType): Tensor[] => {\n      validateInputs(inputs);\n      return [handler.cast(inputs[0], to)];\n    };\n\nexport const parseCastAttributes: OperatorInitialization<Tensor.DataType> = (node: Graph.Node): Tensor.DataType =>\n    ProtoUtil.tensorDataTypeFromProto(node.attributes.getInt('to'));\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Cast requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {ConcatAttributes} from './concat';\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst createPackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat (packed)',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.packed),\n  cacheHint\n});\n\nconst createPackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n      const coords = getChannels('coords', rank);\n      const dtype = getCoordsDataType(rank);\n      const unpackChannel = unpackFromChannel();\n\n      const shapes = inputs.map(i => i.dims);\n      const channels = getGlChannels(rank);\n      const offsets: number[] = new Array(shapes.length - 1);\n\n      offsets[0] = shapes[0][axis];\n      for (let i = 1; i < offsets.length; i++) {\n        offsets[i] = offsets[i - 1] + shapes[i][axis];\n      }\n\n      const channel = channels[axis];\n      const lastChannels = channels.slice(-2);\n      const allChannels = channels.join();\n\n      let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getX0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n      for (let i = 1; i < offsets.length; i++) {\n        const shift = offsets[i - 1];\n        getValueSnippet += `\n            if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n              return getChannel(\n                getX${i}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n                vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));\n            }`;\n      }\n      const lastIndex = offsets.length;\n      const shift = offsets[offsets.length - 1];\n      getValueSnippet += `\n            return getChannel(\n              getX${lastIndex}(${getShiftedChannelsSnippet(channels, channel, shift)}),\n              vec2(${getShiftedChannelsSnippet(lastChannels, channel, shift)}));`;\n\n      const glsl = getGlsl(handler.session.backend.glContext.version);\n\n      const shaderSource = `\n          ${unpackChannel}\n          float getValue(${channels.map(x => 'int ' + x)}) {\n            ${getValueSnippet}\n          }\n\n          void main() {\n            ${dtype} coords = getOutputCoords();\n            int lastDim = coords.${channels[rank - 1]};\n            coords.${channels[rank - 1]} = coords.${channels[rank - 2]};\n            coords.${channels[rank - 2]} = lastDim;\n\n            vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n            if (${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.g = getValue(${coords});\n            }\n\n            ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]}) {\n              result.a = getValue(${coords});\n            }\n\n            ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n            if (${coords[rank - 2]} < ${outputShape[rank - 2]} &&\n                ${coords[rank - 1]} < ${outputShape[rank - 1]}) {\n              result.b = getValue(${coords});\n            }\n            ${glsl.output} = result;\n          }\n        `;\n\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createPackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createPackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createPackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getShiftedChannelsSnippet = (channels: string[], channel: string, shift: number): string => {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {createPackedConcatProgramInfoLoader} from './concat-packed';\n\nexport interface ConcatAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const concat: OperatorImplementation<ConcatAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): Tensor[] => {\n      validateInputs(inputs);\n      if (inferenceHandler.session.pack && inputs[0].dims.length > 1) {\n        const output =\n            inferenceHandler.run(createPackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      } else {\n        const output =\n            inferenceHandler.run(createUnpackedConcatProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n        return [output];\n      }\n    };\n\nconst createUnpackedConcatProgramMetadata = (inputCount: number, cacheHint: string) => ({\n  name: 'Concat',\n  inputNames: Array.from({length: inputCount}, (v, i) => `X${i}`),\n  inputTypes: Array(inputCount).fill(TextureType.unpacked),\n  cacheHint\n});\n\nconst createUnpackedConcatProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\n        throw new Error('axis specified for concat doesn\\'t match input dimensionality');\n      }\n      if (axis < 0) {\n        axis = inputShape.length + axis;\n      }\n      // ensure all of the non-concatenated axes match each other\n      // calculate the shape of the output tensor while we do that\n      const outputShape = inputShape.slice(0);\n      for (let i = 1; i < inputs.length; i++) {\n        const dataNShape = inputs[i].dims.slice();\n        for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\n          // add to the placeholder for computing output shape\n          if (axisIndex === axis) {\n            outputShape[axis] += dataNShape[axisIndex];\n          }\n          // ensure all non-cancatenated axes match each other\n          else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\n            throw new Error('non concat dimensions must match');\n          }\n        }\n      }\n\n      const rank = outputShape.length;\n\n      const sizeInConcatAxis = new Array<number>(inputs.length);\n      let previousSum = 0;\n      for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n        previousSum += inputs[i].dims[axis];\n        sizeInConcatAxis[i] = previousSum;\n      }\n\n      let getTextureIndexWhereDataResidesMethod = '';\n      // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\n      if (inputs.length < 5) {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n      } else {\n        getTextureIndexWhereDataResidesMethod = getTextureIndexWhereDataResidesBinarySearch(sizeInConcatAxis);\n      }\n\n      const fetchDataFromCorrectTextureMethod = getFetchDataFromCorrectTextureMethod(inputs.length, rank);\n      const getSizeInConcatAxisValueFromIndexMethod = getGetSizeInConcatAxisValueFromIndexMethod(sizeInConcatAxis);\n      const shaderSource = `\n        ${fetchDataFromCorrectTextureMethod}\n        ${getSizeInConcatAxisValueFromIndexMethod}\n        ${getTextureIndexWhereDataResidesMethod}\n        float process(int indices[${rank}]) {\n          int textureIndex = getTextureWhereDataResides (indices[${axis}]);\n\n          if(textureIndex != 0) {\n            indices[${axis}] = indices[${axis}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));\n          }\n\n          return fetchDataFromCorrectTexture(textureIndex, indices);\n        }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n      };\n    };\n\nconst createUnpackedConcatProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConcatAttributes): ProgramInfoLoader => {\n      const metadata = createUnpackedConcatProgramMetadata(inputs.length, attributes.cacheKey);\n      return {...metadata, get: () => createUnpackedConcatProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst getTextureIndexWhereDataResidesLinearSearch = (sizeInConcatAxis: number[]): string => {\n  const searchAxis = sizeInConcatAxis.map((size, i) => `if(index<${size}) {return ${i};}\n`);\n  return `int getTextureWhereDataResides(int index) {\n      ${searchAxis.join('')}\n    }`;\n};\n\n// TODO: Implement BinarySearch in GLSL\nconst getTextureIndexWhereDataResidesBinarySearch = (sizeInConcatAxis: number[]): string =>\n    getTextureIndexWhereDataResidesLinearSearch(sizeInConcatAxis);\n\nconst getFetchDataFromCorrectTextureMethod = (numberOfTensors: number, tensorRank: number) => {\n  const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\n  for (let i = 0; i < numberOfTensors; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    } else if (i === numberOfTensors - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return _X${i}(indices); }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst getGetSizeInConcatAxisValueFromIndexMethod = (sizeInConcatAxis: number[]): string => {\n  const codeLines: string[] = ['int getSizeInConcatAxisValueFromIndex(int index) {'];\n  for (let i = 0; i < sizeInConcatAxis.length; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    } else if (i === sizeInConcatAxis.length - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return ${sizeInConcatAxis[i]}; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (index == ${i}) { return ${sizeInConcatAxis[i]}; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n\n  return codeLines.join('\\n');\n};\n\nexport const parseConcatAttributes: OperatorInitialization<ConcatAttributes> = (node: Graph.Node): ConcatAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis')});\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 1) {\n    throw new Error('too few inputs');\n  }\n\n  const inputType = inputs[0].type;\n  const inputDimensionality = inputs[0].dims.length;\n\n  // TODO: Support string concat\n  if (inputType === 'string') {\n    throw new Error('string tensor is not supported yet');\n  }\n\n  for (const input of inputs) {\n    // make sure types of all inputs match\n    if (input.type !== inputType) {\n      throw new Error('input tensors should be one type');\n    }\n\n    // make sure the dimensionality of all inputs are the same\n    if (input.dims.length !== inputDimensionality) {\n      throw new Error('input tensors should have the same shape');\n    }\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../../instrument';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {getActivationSnippet} from './fuse-utils';\n\nconst createUnpackedGroupedConvProgramMetadata = (hasBias: boolean, cacheHint: string): ProgramMetadata => ({\n  name: 'GroupedConv',\n  inputNames: hasBias ? ['X', 'W', 'Bias'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedGroupedConvProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBias(output_channel);' : '';\n      const xShape = inputs[0].dims.slice();\n      const wShape = inputs[1].dims.slice();\n      const outputChannelsPerGroup = wShape[0] / attributes.group;\n      Logger.verbose(\n          'GroupedConv',\n          `autpPad:${attributes.autoPad}, dilations:${attributes.dilations}, group:${attributes.group}, kernelShape:${\n              attributes.kernelShape}, pads:${attributes.pads}, strides:${attributes.strides}`);\n      const outputShape =\n          calculateOutputShape(xShape, wShape, attributes.dilations, attributes.pads, attributes.strides);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n    ivec2 xRCCorner = coords.zw * strides - pads;\n    int group_id = output_channel / ${outputChannelsPerGroup};\n\n    float value = 0.0;\n    for (int wInChannel = 0; wInChannel < ${wShape[1]}; wInChannel++) {\n      int input_channel = group_id * ${wShape[1]} + wInChannel;\n      for (int wHeight = 0; wHeight < ${wShape[2]}; wHeight++) {\n        int xHeight = xRCCorner.x + wHeight * ${attributes.dilations[0]};\n\n        if (xHeight < 0 || xHeight >= ${xShape[2]}) {\n          continue;\n        }\n\n        for (int wWidth = 0; wWidth < ${wShape[3]}; wWidth++) {\n          int xWidth = xRCCorner.y + wWidth * ${attributes.dilations[1]};\n          if (xWidth < 0 || xWidth >= ${xShape[3]}) {\n            continue;\n          }\n\n          float xVal = getX(batch, input_channel, xWidth, xHeight);\n          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);\n          value += xVal*wVal;\n        }\n      }\n    }\n    ${processBias}\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nexport const createUnpackedGroupedConvProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes):\n        ProgramInfoLoader => {\n          const metadata = createUnpackedGroupedConvProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedGroupedConvProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {calculateOutputShape, ConvAttributes} from './conv';\nimport {createPackedIm2ColProgramInfoLoader} from './im2col-pack';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const conv2DPackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapePacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapePacked(matmulOutput, outputShape);\n    };\n\nexport const conv2DPacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n\n      // run im2col\n      const im2colOutput = inferenceHandler.run(\n          createPackedIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes),\n          [inputs[0]]);\n\n      // reshape kernel\n      const kernelReshaped = inferenceHandler.reshapePacked(inputs[1], [kshape[0], kshape[1] * kshape[2] * kshape[3]]);\n\n      // run matmul\n      const matmulInputs =\n          (inputs.length === 3) ? [kernelReshaped, im2colOutput, inputs[2]] : [kernelReshaped, im2colOutput];\n      const matmulOutput = inferenceHandler.run(\n          createPackedMatmulProgramInfoLoader(inferenceHandler, matmulInputs, attributes), matmulInputs);\n\n      // reshape output\n      const outputReshaped = inferenceHandler.reshapePacked(matmulOutput, outputShape);\n      return outputReshaped;\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {getActivationSnippet, parseInternalActivationAttributes} from './fuse-utils';\n\nconst computeTotalPad =\n    (inDim: number, stride: number, adj: number, kernel: number, dilation: number, outSize: number) =>\n        (inDim - 1) * stride + adj + (kernel - 1) * dilation + 1 - outSize;\n\nconst distributePadding = (totalPad: number, autoPad: string, pads: number[], head: number, tail: number) => {\n  const smallPad = Math.floor(totalPad / 2);\n  if (autoPad === 'SAME_UPPER') {\n    pads[head] = smallPad;\n    pads[tail] = totalPad - smallPad;\n  } else if (autoPad === 'SAME_LOWER') {\n    pads[head] = totalPad - smallPad;\n    pads[tail] = smallPad;\n  }\n};\n\nconst calculateOutputShapeAndPads =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[], autoPad: string,\n     pads: number[], strides: readonly number[], outputPadding: readonly number[], outputShape: number[]) => {\n      const spatialRank = inputShape.length - 2;\n      const updateShape = outputShape.length === 0;\n      for (let i = 0; i < spatialRank; ++i) {\n        const outSize = updateShape ? inputShape[i + 2] * strides[i] : outputShape[i];\n        const totalPad = computeTotalPad(inputShape[i + 2], strides[i], pads[i], kernelShape[i], dilations[i], outSize);\n        distributePadding(totalPad, autoPad, pads, i, i + spatialRank);\n        if (updateShape) {\n          outputShape.push(\n              strides[i] * (inputShape[i + 2] - 1) + outputPadding[i] + (kernelShape[i] - 1) * dilations[i] + 1 -\n              pads[i] - pads[i + spatialRank]);\n        }\n      }\n    };\n\nexport interface ConvTransposeAttributes extends ConvAttributes {\n  readonly outputPadding: readonly number[];\n  readonly outputShape: readonly number[];\n}\n\nexport const convTranspose: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not convTranspose2D\n      return convTranspose2d(inferenceHandler, inputs, attributes);\n    };\n\nconst convTranspose2d: OperatorImplementation<ConvTransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvTransposeAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvTransposeAttributes(attributes, inputs);\n      return [convTranspose2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n    };\n\nconst createConvTransposeProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'ConvTranspose',\n  inputNames: hasBias ? ['X', 'W', 'B'] : ['X', 'W'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nconst createUnpackedConvTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], metadata: ProgramMetadata,\n     attributes: ConvTransposeAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const valueInit = hasBias ? 'getB(output_channel)' : '0.0';\n      const xShape = inputs[0].dims;\n      const wShape = inputs[1].dims;\n      const outputChannelsPerGroup = wShape[1];\n      const inputChannelsPerGroup = wShape[0] / attributes.group;\n      const outputShape = [inputs[0].dims[0], inputs[1].dims[1] * attributes.group, ...attributes.outputShape];\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n\n      const shaderSource = `\n  const ivec2 strides = ivec2(${attributes.strides[0]}, ${attributes.strides[1]});\n  const ivec2 pads = ivec2(${attributes.pads[0]}, ${attributes.pads[1]});\n  ${activationFunction}\n  void main() {\n    ivec4 coords = getOutputCoords();\n    int batch = coords.x;\n    int output_channel = coords.y;\n\n    ivec2 loc = coords.zw + pads;\n\n    int group_id = output_channel / ${outputChannelsPerGroup};\n    int wOutChannel = output_channel - group_id * ${outputChannelsPerGroup};\n\n    float value = ${valueInit};\n    for (int inChannelOffset = 0; inChannelOffset < ${inputChannelsPerGroup}; inChannelOffset++) {\n      int input_channel = group_id * ${inputChannelsPerGroup} + inChannelOffset;\n      for (int wWOff = 0; wWOff < ${wShape[2]}; wWOff++) {\n        for (int wHOff = 0; wHOff < ${wShape[3]}; wHOff++) {\n          ivec2 wOff = ivec2(wWOff * ${attributes.dilations[0]}, wHOff * ${attributes.dilations[1]});\n          ivec2 wLoc = loc - wOff;\n          ivec2 wLocIn = wLoc / strides;\n          if (\n            wLocIn * strides == wLoc &&\n            wLocIn.x >= 0 && wLocIn.x < ${xShape[2]} &&\n            wLocIn.y >= 0 && wLocIn.y < ${xShape[3]}\n          ) {\n            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);\n            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);\n            value += xVal * wVal;\n          }\n        }\n      }\n    }\n    ${applyActivation}\n    ${glsl.output} = vec4(value, .0, .0, .0);\n  }\n`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        hasMain: true,\n      };\n    };\n\nconst createUnpackedConvTransposeProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        ProgramInfoLoader => {\n          const metadata = createConvTransposeProgramMetadata(inputs.length > 2, attributes.cacheKey);\n          return {\n            ...metadata,\n            get: () => createUnpackedConvTransposeProgramInfo(inferenceHandler, inputs, metadata, attributes)\n          };\n        };\n\n\nconst convTranspose2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvTransposeAttributes):\n        Tensor => {\n          const result = inferenceHandler.run(\n              createUnpackedConvTransposeProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n          return result;\n        };\n\nconst getAdjustedConvTransposeAttributes = <T extends ConvTransposeAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n\n  const pads = attributes.pads.slice();\n  const outputShape = attributes.outputShape.slice();\n  const inputShape = inputs[0].dims;\n  // If outputShape is not specified in the attributes of this op, infer it from the parameters\n  // Similarly, automatically infer pads if not specified\n  calculateOutputShapeAndPads(\n      inputShape, kernelShape, attributes.dilations, attributes.autoPad, pads, attributes.strides,\n      attributes.outputPadding, outputShape);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, outputShape, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvTransposeAttributes: OperatorInitialization<ConvTransposeAttributes> =\n    (node: Graph.Node): ConvTransposeAttributes => {\n      const attributes = node.attributes;\n      const activationAttributes = parseInternalActivationAttributes(attributes);\n      // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n      const autoPad = attributes.getString('auto_pad', 'NOTSET');\n      const dilations = attributes.getInts('dilations', [1, 1]);\n      const group = attributes.getInt('group', 1);\n      const kernelShape = attributes.getInts('kernel_shape', []);\n      const outputPadding = attributes.getInts('output_padding', [0, 0]);\n      const outputShape = attributes.getInts('output_shape', []);\n      const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n      const strides = attributes.getInts('strides', [1, 1]);\n\n      return createAttributeWithCacheKey(\n          {autoPad, dilations, group, kernelShape, outputPadding, outputShape, pads, strides, ...activationAttributes});\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvTransposeAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[0];\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  const featureMaps = inputs[1].dims[1] * attributes.group;\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[2].dims[0] !== featureMaps)) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // Wrong output padding dimension\n  if (attributes.outputPadding.length !== spatialRank) {\n    throw new Error(`output_padding should be ${spatialRank}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // as with kernelShape, must have same number of spatial dims as input\n  if (attributes.outputShape.length !== 0 && attributes.outputShape.length !== inputs[0].dims.length - 2) {\n    throw new Error('invalid output shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('ConvTranspose input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('ConvTranspose input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {InferenceHandler} from '../../../backend';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {createUnpackedGroupedConvProgramInfoLoader} from './conv-grouped';\nimport {conv2DPacked} from './conv-pack';\nimport {createDotProductProgramInfoLoader} from './dot-product';\nimport {InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createIm2ColProgramInfoLoader} from './im2col';\nimport {createMatmulProgramInfoLoader} from './matmul';\n\n\nexport const calculateOutputShape =\n    (inputShape: readonly number[], kernelShape: readonly number[], dilations: readonly number[],\n     adjustPads: readonly number[], strides: readonly number[]): number[] => {\n      const batchSize = inputShape[0];\n      const inputSpatialShape = inputShape.slice(2);\n      const spatialRank = inputSpatialShape.length;\n      const outChannels = kernelShape[0];\n      const kernelSpatialShape = kernelShape.slice(2);\n      const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\n      const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\n      const outputSpatialShape =\n          inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\n      const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\n      return outputShape;\n    };\n\nexport interface ConvAttributes extends InternalActivationAttributes, AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly dilations: readonly number[];\n  readonly group: number;\n  readonly kernelShape: readonly number[];\n  readonly pads: readonly number[];\n  readonly strides: readonly number[];\n}\n\nexport const conv: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: InferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);  // currently will fail if not conv2D\n      return conv2d(inferenceHandler, inputs, attributes);\n    };\n\nconst conv2d: OperatorImplementation<ConvAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ConvAttributes): Tensor[] => {\n      const adjustedAttributes = getAdjustedConvAttributes(attributes, inputs);\n      const packMode = inferenceHandler.session.pack;\n      const isPointwise = adjustedAttributes.kernelShape[0] === 1 && adjustedAttributes.kernelShape[1] === 1;\n      if (adjustedAttributes.group > 1) {\n        const result = inferenceHandler.run(\n            createUnpackedGroupedConvProgramInfoLoader(inferenceHandler, inputs, adjustedAttributes), inputs);\n        return [result];\n      } else if (isPointwise && packMode) {\n        return [conv2DUnpackedPointwise(inferenceHandler, inputs, adjustedAttributes)];\n      } else if (packMode && inputs[0].dims.length === 4 && inputs[0].dims[0] === 1 && !isPointwise) {\n        return [conv2DPacked(inferenceHandler, inputs, adjustedAttributes)];\n      } else {\n        return [conv2DUnpacked(inferenceHandler, inputs, adjustedAttributes)];\n      }\n    };\n\nconst conv2DUnpackedPointwise =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const reshapedX = inferenceHandler.reshapeUnpacked(inputs[0], [xshape[1], xshape[2] * xshape[3]]);\n      const reshapedK = inferenceHandler.reshapeUnpacked(inputs[1], [kshape[0], kshape[1]]);\n\n      const matmulInputs = inputs.length > 2 ? [reshapedK, reshapedX, inputs[2]] : [reshapedK, reshapedX];\n      const matmulOutput = inferenceHandler.run(createMatmulProgramInfoLoader(matmulInputs, attributes), matmulInputs);\n      return inferenceHandler.reshapeUnpacked(matmulOutput, outputShape);\n    };\n\nconst conv2DUnpacked =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], attributes: ConvAttributes): Tensor => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const outputShape =\n          calculateOutputShape(xshape, kshape, attributes.dilations, attributes.pads, attributes.strides);\n      const xIm2Col = inferenceHandler.run(\n          createIm2ColProgramInfoLoader(inferenceHandler, inputs[0], inputs[1], outputShape, attributes), [inputs[0]]);\n\n      const dotProductInputs = inputs.length === 3 ? [xIm2Col, inputs[1], inputs[2]] : [xIm2Col, inputs[1]];\n      const output = inferenceHandler.run(\n          createDotProductProgramInfoLoader(inferenceHandler, inputs, outputShape, attributes), dotProductInputs);\n      return output;\n    };\n\nconst getAdjustedConvAttributes = <T extends ConvAttributes>(attributes: T, inputs: Tensor[]): T => {\n  const kernelShape = attributes.kernelShape.slice();\n  // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\n  if (attributes.kernelShape.length === 0) {\n    for (let i = 2; i < inputs[1].dims.length; ++i) {\n      kernelShape.push(inputs[1].dims[i]);\n    }\n  }\n  const pads = attributes.pads.slice();\n  PoolConvUtil.adjustPadsBasedOnAutoPad(\n      inputs[0].dims, attributes.strides, attributes.dilations, kernelShape, pads, attributes.autoPad);\n\n  // always return a new object so does not modify the original attributes\n  const newAttributes: T = Object.assign({}, attributes);\n  Object.assign(newAttributes, {kernelShape, pads, cacheKey: attributes.cacheKey});\n  return newAttributes;\n};\n\nexport const parseConvAttributes: OperatorInitialization<ConvAttributes> = (node: Graph.Node): ConvAttributes => {\n  const attributes = node.attributes;\n  const activationAttributes = parseInternalActivationAttributes(attributes);\n  // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\n  const autoPad = attributes.getString('auto_pad', 'NOTSET');\n  const dilations = attributes.getInts('dilations', [1, 1]);\n  const group = attributes.getInt('group', 1);\n  const kernelShape = attributes.getInts('kernel_shape', []);\n  const pads = attributes.getInts('pads', [0, 0, 0, 0]);\n  const strides = attributes.getInts('strides', [1, 1]);\n\n  return createAttributeWithCacheKey({autoPad, dilations, group, kernelShape, pads, strides, ...activationAttributes});\n};\n\nconst validateInputs = (inputs: Tensor[], attributes: ConvAttributes): void => {\n  // Refer to the below link for all input checks\n  // https://github.com/onnx/onnx/blob/main/docs/Operators.md#Conv\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Conv requires 2 or 3 inputs');\n  }\n\n  // TODO : Need to add support for multi-dimensional conv\n  if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\n    throw new Error('currently only support 2-dimensional conv');\n  }\n\n  // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\n  const dataChannel = inputs[0].dims[1];\n  const filterInChannel = inputs[1].dims[1] * attributes.group;\n  if (dataChannel !== filterInChannel) {\n    throw new Error('FILTER_IN_CHANNEL should be equal to DATA_CHANNEL');\n  }\n\n  // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\n  if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\n    throw new Error('invalid bias');\n  }\n\n  const spatialRank = inputs[0].dims.length - 2;\n  // wrong dilations dimension\n  if (attributes.dilations.length !== spatialRank) {\n    throw new Error(`dilations should be ${spatialRank}D`);\n  }\n\n  // Wrong strides dimension\n  if (attributes.strides.length !== spatialRank) {\n    throw new Error(`strides should be ${spatialRank}D`);\n  }\n\n  // Wrong pads dimension\n  if (attributes.pads.length !== spatialRank * 2) {\n    throw new Error(`pads should be ${spatialRank * 2}D`);\n  }\n\n  // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\n  // (the first 2 dims are batch_size and channels)\n  if (attributes.kernelShape.length !== 0 && attributes.kernelShape.length !== inputs[1].dims.length - 2) {\n    throw new Error('invalid kernel shape');\n  }\n\n  // TODO : Need to add support for float64\n  if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\n    throw new Error('Conv input(X,W) should be float tensor');\n  }\n\n  if (inputs.length === 3 && inputs[2].type !== 'float32') {\n    throw new Error('Conv input(bias) should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface DepthToSpaceAttributes {\n  mode: 'DCR'|'CRD';\n  blocksize: number;\n}\n\nexport const depthToSpace: OperatorImplementation<DepthToSpaceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: DepthToSpaceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const blocksize = attributes.blocksize;\n      const blocksizeSqr = blocksize * blocksize;\n      const transposePerm = attributes.mode === 'DCR' ? [0, 3, 4, 1, 5, 2] : [0, 1, 4, 2, 5, 3];\n      const firstReshapeShape = attributes.mode === 'DCR' ?\n          [\n            inputs[0].dims[0], blocksize, blocksize, inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ] :\n          [\n            inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, blocksize, blocksize, inputs[0].dims[2],\n            inputs[0].dims[3]\n          ];\n\n      // const transpose = new WebGLTranspose();\n      // const attributes = new Attribute(undefined);\n      // attributes.set('perm', 'ints', transposePerm);\n      // transpose.initialize(attributes);\n\n      // First reshape\n      const firstReshapedTensor = inferenceHandler.reshapeUnpacked(inputs[0], firstReshapeShape);\n\n      // transpose\n      const transposeAttributes: TransposeAttributes = {perm: transposePerm, cacheKey: `${transposePerm}`};\n      const [transposeOutput] = transpose(inferenceHandler, [firstReshapedTensor], transposeAttributes);\n\n      // Second reshape\n      const secondReshapeShape = [\n        inputs[0].dims[0], inputs[0].dims[1] / blocksizeSqr, inputs[0].dims[2] * blocksize,\n        inputs[0].dims[3] * blocksize\n      ];\n      const result = inferenceHandler.reshapeUnpacked(transposeOutput, secondReshapeShape);\n      return [result];\n    };\n\nexport const parseDepthToSpaceAttributes: OperatorInitialization<DepthToSpaceAttributes> =\n    (node: Graph.Node): DepthToSpaceAttributes => {\n      // processing node attributes\n      const blocksize = node.attributes.getInt('blocksize');\n      if (blocksize < 1) {\n        throw new Error(`blocksize must be >= 1, but got : ${blocksize} for DepthToSpace`);\n      }\n      const mode = node.attributes.getString('mode', 'DCR');\n      if (mode !== 'DCR' && mode !== 'CRD') {\n        throw new Error(`unrecognized mode: ${mode} for DepthToSpace`);\n      }\n      return {mode, blocksize};\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (inputs.length !== 1) {\n    throw new Error(`DepthToSpace expect 1 inputs, but got ${inputs.length}`);\n  }\n\n  // Input has to be a 4-D tensor\n  // TODO: Support string depth-to-space.\n  if (inputs[0].type === 'string' || inputs[0].dims.length !== 4) {\n    throw new TypeError('DepthToSpace input should be a 4-D numeric tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {calculateIm2ColDims} from './im2col';\n\nconst createDotProductProgramMetadata = (hasBias: boolean, attributes: InternalActivationAttributes) => ({\n  name: 'ConvDotProduct',\n  inputNames: hasBias ? ['Im2Col', 'K', 'B'] : ['Im2Col', 'K'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.packedLastDimension],\n  cacheKey: attributes.activationCacheKey\n});\n\nconst createDotProductProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: readonly Tensor[],\n     outputShape: number[], attributes: InternalActivationAttributes): ProgramInfo => {\n      const xshape = inputs[0].dims;\n      const kshape = inputs[1].dims;\n      const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\n      const im2colShape = calculateIm2ColDims(xshape, kshape, outputShape);\n      const [kWidth, kHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(adjustedKernelShape, TextureType.packedLastDimension);\n\n      const im2colStrides = ShapeUtil.computeStrides(im2colShape);\n      const [im2colWidth, im2colHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(im2colShape, TextureType.packedLastDimension);\n      const rank = outputShape.length;\n\n      const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\n      const sharedDim = Math.ceil(xshape[1] * kshape[2] * kshape[3] / 4);\n      const {activationFunction, applyActivation} = getActivationSnippet(attributes);\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n${activationFunction}\nfloat process(int indices[${rank}]) {\n  int b[1];\n  b[0] = indices[1];\n  int im2col[4];\n  im2col[0] = indices[0];\n  im2col[1] = indices[2];\n  im2col[2] = indices[3];\n  int im2colOffset = im2col[0] * ${im2colStrides[0]} + im2col[1] * ${im2colStrides[1]} + im2col[2] * ${\n          im2colStrides[2]};\n  int kernelOffset = indices[1] * ${adjustedKernelShape[1]};\n  float value = ${initValue};\n  for (int i = 0; i < ${sharedDim}; ++i) {\n    vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colWidth}, ${im2colHeight});\n    vec2 kernelCoords = offsetToCoords(kernelOffset, ${kWidth}, ${kHeight});\n    value += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\n    ++im2colOffset;\n    ++kernelOffset;\n  }\n  ${applyActivation}\n  return value;\n}`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nexport const createDotProductProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: readonly Tensor[], outputShape: number[],\n     attributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createDotProductProgramMetadata(inputs.length > 2, attributes);\n      return {\n        ...metadata,\n        get: () => createDotProductProgramInfo(inferenceHandler, metadata, inputs, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const flatten: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number): Tensor[] => {\n      validateInputs(inputs, axis);\n\n      const outputDims = ShapeUtil.flattenShape(inputs[0].dims, axis);\n      return [inferenceHandler.reshapeUnpacked(inputs[0], outputDims)];\n    };\n\nexport const parseFlattenAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getInt('axis', 1);  // default axis is 1\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Flatten requires 1 input.');\n  }\n\n  const r = inputs[0].dims.length;\n  if (r === 0) {\n    throw new Error('scalar tensor is not supported.');\n  }\n\n  if (axis < -r || axis > r) {\n    throw new Error('Invalid axis');\n  }\n\n  // TODO: Support string type\n  if (inputs[0].type === 'string') {\n    throw new Error('string tensor is not supported.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Attribute} from '../../../attribute';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {GlslValueFunction} from '../glsl-definitions';\n\nimport {glslClip, glslRelu, glslSigmoid} from './unary-op';\n\nexport interface InternalActivationAttributes {\n  readonly activation: string;\n  readonly clipMin?: number;\n  readonly clipMax?: number;\n  readonly activationCacheKey: string;\n}\n\nexport function getActivationSnippet(attributes: InternalActivationAttributes) {\n  let func: GlslValueFunction;\n  switch (attributes.activation) {\n    case 'Relu':\n      func = glslRelu();\n      break;\n    case 'Sigmoid':\n      func = glslSigmoid();\n      break;\n    case 'Clip':\n      func = glslClip(attributes.clipMin!, attributes.clipMax!);\n      break;\n    // TODO: adding other activations that can be fused.\n    default:\n      return {activationFunction: '', applyActivation: ''};\n  }\n\n  const activationName = func.name;\n  const activationFunction = func.body;\n  const applyActivation = `value = ${activationName}_(value);`;\n  return {activationFunction, applyActivation};\n}\n\nexport const parseInternalActivationAttributes = (attributes: Attribute): InternalActivationAttributes => {\n  const activation = attributes.getString('activation', '');\n\n  if (activation === 'Clip') {\n    const [clipMin, clipMax] = attributes.getFloats('activation_params', [MIN_CLIP, MAX_CLIP]);\n    return {activation, clipMax, clipMin, activationCacheKey: `${activation}:${clipMin},${clipMax}`};\n  }\n  return {activation, activationCacheKey: activation};\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\ninterface GatherAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nexport const gather: OperatorImplementation<GatherAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): Tensor[] => {\n      validateInputs(inputs, attributes.axis);\n      const output = inferenceHandler.run(createGatherProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseGatherAttributes: OperatorInitialization<GatherAttributes> = (node: Graph.Node): GatherAttributes =>\n    createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 0)});\n\nconst gatherProgramMetadata = {\n  name: 'Gather',\n  inputNames: ['A', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createGatherProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], axis: number): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const indexDataShape = inputs[1].dims.slice();\n      const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\n\n      axis = ShapeUtil.normalizeAxis(axis, inputShape.length);\n      const indexCopyOps: string[] = [];\n      for (let i = 0; i < outputShape.length; i++) {\n        // outputShape is divided into three parts: A, B, C\n        // |0        axis|  axis + indexDataShape.length |          end|\n        // |     A       |             B                 |      C      |\n        //\n        // inputIdx: [A, inputs[1][B], C]\n        if (i < axis) {  // A\n          outputShape[i] = inputShape[i];\n          indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\n        } else {\n          if (i < axis + indexDataShape.length) {  // B\n            outputShape[i] = indexDataShape[i - axis];\n            indexCopyOps.push(`indexDataIdx[${i - axis}] = outputIdx[${i}];`);\n          } else {                                                       // C\n            outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for axis\n            indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\n          }\n        }\n      }\n\n      const orank = outputShape.length || 1;\n      const irank = inputShape.length;\n      const iDrank = indexDataShape.length || 1;\n      const shaderSource = `\n      float process(int outputIdx[${orank}]) {\n        int inputIdx[${irank}];\n        int indexDataIdx[${iDrank}];\n        indexDataIdx[0] = 0;\n        ${indexCopyOps.join('\\n        ')}\n        int idx = int(_B(indexDataIdx));\n        inputIdx[${axis}] = idx < 0 ? idx + ${inputShape[axis]} : idx;\n        return _A(inputIdx);\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createGatherProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: GatherAttributes): ProgramInfoLoader => {\n      const metadata = {...gatherProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createGatherProgramInfo(handler, metadata, inputs, attributes.axis)};\n    };\n\nconst validateInputs = (inputs: Tensor[], axis: number): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Gather requires 2 inputs.');\n  }\n  const tensorRank = inputs[0].dims.length;\n  if (tensorRank < 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (axis < -tensorRank || axis > tensorRank - 1) {\n    throw new Error('Invalid axis.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invaid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invaid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {GemmUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface GemmAttributes extends AttributeWithCacheKey {\n  transA: boolean;\n  transB: boolean;\n  alpha: number;\n  beta: number;\n  isOptionalC: boolean;  // in opset 11, C becomes optional\n}\n\nexport const gemm: OperatorImplementation<GemmAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: GemmAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(createGemmProgramInfoLoader(inputs, attributes), inputs);\n      return [output];\n    };\n\nconst parseGemmAttributes = (node: Graph.Node, isOptionalC: boolean): GemmAttributes => {\n  const transA = node.attributes.getInt('transA', 0) !== 0;\n  const transB = node.attributes.getInt('transB', 0) !== 0;\n  const alpha = node.attributes.getFloat('alpha', 1.0);\n  const beta = node.attributes.getFloat('beta', 1.0);\n  return createAttributeWithCacheKey({transA, transB, alpha, beta, isOptionalC});\n};\n\nexport const parseGemmAttributesV7: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, false);\n\nexport const parseGemmAttributesV11: OperatorInitialization<GemmAttributes> = (node: Graph.Node): GemmAttributes =>\n    parseGemmAttributes(node, true);\n\nconst createGemmProgramInfoLoader = (inputs: Tensor[], attributes: GemmAttributes): ProgramInfoLoader => {\n  const metadata = {\n    name: 'Gemm',\n    inputNames: inputs.length === 3 ? ['A', 'B', 'C'] : ['A', 'B'],\n    inputTypes: inputs.length === 3 ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                                      [TextureType.unpacked, TextureType.unpacked],\n    key: attributes.cacheKey\n  };\n\n  return {...metadata, get: () => createGemmProgramInfo(metadata, inputs, attributes)};\n};\n\nconst createGemmProgramInfo =\n    (metadata: ProgramMetadata, inputs: Tensor[], attributes: GemmAttributes): ProgramInfo => {\n      const aShape = inputs[0].dims.slice();\n      const bShape = inputs[1].dims.slice();\n      const [M, N] = GemmUtil.getShapeOfGemmResult(\n          aShape, attributes.transA, bShape, attributes.transB, inputs.length === 3 ? inputs[2].dims : undefined);\n      const outputShape = [M, N];\n      if (!outputShape) {\n        throw new Error('Can\\'t use gemm on the given tensors');\n      }\n      let sharedDim = aShape[aShape.length - 1];\n      let line = '';\n      if (attributes.transA) {\n        sharedDim = aShape[0];\n      }\n      if (attributes.transA && attributes.transB) {\n        line = 'value += _A_T(a) * _B_T(b);';\n      } else if (attributes.transA && !attributes.transB) {\n        line = 'value += _A_T(a) * _B(b);';\n      } else if (!attributes.transA && attributes.transB) {\n        line = 'value += _A(a) * _B_T(b);';\n      } else if (!attributes.transA && !attributes.transB) {\n        line = 'value += _A(a) * _B(b);';\n      }\n      const rank = outputShape.length;\n      const declareC = inputs.length === 3 ? `int c[${inputs[2].dims.length}];` : '';\n      const broadcastC = inputs.length === 3 ? 'bcastIndices_C(indices, c);' : '';\n      const calculateC = inputs.length === 3 ? 'value += beta * _C(c);' : '';\n      const shaderSource = `\n      float process(int indices[${rank}]) {\n          int a[${rank}];\n          int b[${rank}];\n          ${declareC}\n\n          copyVec(indices, a);\n          copyVec(indices, b);\n          ${broadcastC}\n\n          float value = 0.0;\n          for (int k=0; k<${sharedDim}; ++k) {\n              a[${rank - 1}] = k;\n              b[${rank - 2}] = k;\n              ${line}\n          }\n\n          value = value * alpha;\n          ${calculateC}\n          return value;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        variables: [\n          {name: 'alpha', type: 'float', data: attributes.alpha}, {name: 'beta', type: 'float', data: attributes.beta}\n        ],\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[], attributes: GemmAttributes): void => {\n  if (!inputs) {\n    throw new Error('Input is missing');\n  }\n  if (attributes.isOptionalC && (inputs.length < 2 || inputs.length > 3)) {\n    throw new Error('Invaid input shape.');\n  }\n  if (!attributes.isOptionalC && inputs.length !== 3) {\n    throw new Error('Gemm requires 3 inputs');\n  }\n\n  // 'C' can be of dimensionality 1 or 2 only\n  if (inputs.length === 3 && inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\n    throw new Error('Invalid input shape of C');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\n      (inputs.length === 3 && inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n\n  if ((inputs[0].type !== inputs[1].type) || (inputs.length === 3 && inputs[0].type !== inputs[2].type)) {\n    throw new Error('Input types are mismatched');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col (packed)',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed],\n  cacheHint,\n});\n\nconst createPackedIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n      const rowDim = 2;\n      const colDim = 3;\n      const rank = outputShape.length;\n      const im2colShape = [wshape[1] * wshape[2] * wshape[3], outputShape[2] * outputShape[3]];\n      const kernelSize = wshape[2] * wshape[3];\n      const unpackChannel = unpackFromChannel();\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      let unrolled = '';\n\n      for (let row = 0; row <= 1; row++) {\n        for (let col = 0; col <= 1; col++) {\n          unrolled += `\n            blockIndex = rc.x + ${col};\n            pos = rc.y + ${row};\n\n            if(blockIndex < ${im2colShape[1]} && pos < ${im2colShape[0]}) {\n              offsetY = int(blockIndex / (${outputShape[rank - 1]})) * ${attributes.strides[0]} -\n                ${attributes.pads[0]};\n              d0 = offsetY + ${attributes.dilations[0]} * (imod(pos, ${kernelSize}) / ${wshape[2]});\n\n              if(d0 < ${xshape[rowDim]} && d0 >= 0) {\n                offsetX = imod(blockIndex, ${outputShape[rank - 1]}) * ${attributes.strides[1]} -\n                  ${attributes.pads[1]};\n                d1 = offsetX + ${attributes.dilations[1]} * imod(imod(pos, ${kernelSize}), ${wshape[2]});\n\n                if(d1 < ${xshape[colDim]} && d1 >= 0) {\n\n                  ch = int(float(pos)/ ${kernelSize}.);\n                    innerDims = vec2(d0, d1);\n                    result[${row * 2 + col}] = getChannel(\n                      getA(0, ch, int(innerDims.x),\n                      int(innerDims.y)), innerDims);\n                }\n              }\n            }\n\n          `;\n        }\n      }\n\n      const shaderSource = `\n      ${unpackChannel}\n\n      void main() {\n        ivec2 rc = getOutputCoords();\n          vec4 result = vec4(0.0);\n          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n          vec2 innerDims;\n          ${unrolled}\n          ${glsl.output} = result;\n      }\n            `;\n      return {\n        ...metadata,\n        output: {dims: im2colShape, type: x.type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createPackedIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {ConvAttributes} from './conv';\n\nconst createIm2ColProgramMetadata = (cacheHint: string) => ({\n  name: 'Im2Col',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n  cacheHint,\n});\n\nconst createIm2ColProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, x: Tensor, w: Tensor,\n     outputShape: readonly number[], attributes: ConvAttributes): ProgramInfo => {\n      const xshape = x.dims;\n      const wshape = w.dims;\n\n      const rank = outputShape.length;\n      const im2colDims = calculateIm2ColDims(xshape, wshape, outputShape, 4);\n\n      const shaderSource = `\n        const int XC = ${xshape[1]};\n        const int XH = ${xshape[2]};\n        const int XW = ${xshape[3]};\n        const int KH = ${attributes.kernelShape[0]};\n        const int KW = ${attributes.kernelShape[1]};\n        const int dilationH = ${attributes.dilations[0]};\n        const int dilationW = ${attributes.dilations[1]};\n        const int strideH = ${attributes.strides[0]};\n        const int strideW = ${attributes.strides[1]};\n        const int padH = ${attributes.pads[0]};\n        const int padW = ${attributes.pads[1]};\n        const int KHKW = KH*KW;\n        const int XCKHKW = XC * KHKW;\n        const int outputChannels = 4;\n        vec4 process(int indices[${rank}]) {\n          int b  = indices[0]; // batch size\n          int oh = indices[1] * strideH - padH; //output height\n          int ow = indices[2] * strideW - padW; //output width\n          int p = indices[3] * outputChannels; //patch\n          vec4 value = vec4(0.0);\n          for(int i=0; i < outputChannels; ++i) {\n            if(p < XCKHKW) {\n              int patchC = p / KHKW;\n              int patchH = (p - patchC*KHKW) / KW;\n              int patchW = (p - patchC*KHKW) - patchH * KW;\n              int xh2 = oh + patchH * dilationH;\n              int xw2 = ow + patchW * dilationW;\n              int x[${xshape.length}];\n              x[0] = b;\n              x[1] = patchC;\n              x[2] = xh2;\n              x[3] = xw2;\n              if(xh2 >= 0 &&\n                  xh2 < XH &&\n                  xw2 >= 0 &&\n                  xw2 < XW) {\n                value[i] = _X(x);\n              }\n            }\n            ++p;\n          }\n          return value;\n        }\n        `;\n      return {\n        ...metadata,\n        output: {dims: im2colDims, type: x.type, textureType: TextureType.packedLastDimension},\n        shaderSource\n      };\n    };\n\nexport const createIm2ColProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, x: Tensor, w: Tensor, outputShape: readonly number[],\n     attributes: ConvAttributes): ProgramInfoLoader => {\n      const metadata = createIm2ColProgramMetadata(attributes.cacheKey);\n      return {\n        ...metadata,\n        get: () => createIm2ColProgramInfo(inferenceHandler, metadata, x, w, outputShape, attributes)\n      };\n    };\n\n\nexport const calculateIm2ColDims =\n    (inputShape: readonly number[], kernelShape: readonly number[], outputShape: readonly number[], channels = 4):\n        number[] =>\n            [outputShape[0], outputShape[2], outputShape[3],\n             Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport interface ImageScalerAttributes extends AttributeWithCacheKey {\n  scale: number;\n  bias: number[];\n}\n\nexport const imageScaler: OperatorImplementation<ImageScalerAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output =\n          inferenceHandler.run(createImageScalerProgramInfoLoader(inferenceHandler, inputs, attributes), inputs);\n      return [output];\n    };\n\nexport const parseImageScalerAttributes: OperatorInitialization<ImageScalerAttributes> =\n    (node: Graph.Node): ImageScalerAttributes => {\n      const scale = node.attributes.getFloat('scale');\n      const bias = node.attributes.getFloats('bias');\n      return createAttributeWithCacheKey({scale, bias});\n    };\n\nconst imageScalerProgramMetadata = {\n  name: 'ImageScaler',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createImageScalerProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[], attributes: ImageScalerAttributes):\n        ProgramInfo => {\n          const outputShape = inputs[0].dims.slice();\n          const rank = outputShape.length;\n          const getBiasMethod = createGetBiasMethod(attributes.bias.length);\n          const shaderSource = `\n      ${getBiasMethod}\n      float process(int indices[${rank}]) {\n        return _X(indices) * scale + getBias(bias, indices[1]);\n      }`;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            variables: [\n              {name: 'bias', type: 'float', arrayLength: attributes.bias.length, data: attributes.bias},\n              {name: 'scale', type: 'float', data: attributes.scale}\n            ],\n            shaderSource\n          };\n        };\n\nconst createImageScalerProgramInfoLoader =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ImageScalerAttributes): ProgramInfoLoader => {\n      const metadata = {...imageScalerProgramMetadata, cacheHint: attributes.cacheKey};\n      return {...metadata, get: () => createImageScalerProgramInfo(handler, metadata, inputs, attributes)};\n    };\n\nconst createGetBiasMethod = (numChannels: number): string => {\n  const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\n  for (let i = 0; i < numChannels; ++i) {\n    if (i === 0) {\n      codeLines.push(\n          '\\t' +\n          `if (channel == ${i}) { return bias[${i}]; }`);\n    } else if (i === numChannels - 1) {\n      codeLines.push(\n          '\\t' +\n          `else { return bias[${i}]; }`);\n    } else {\n      codeLines.push(\n          '\\t' +\n          `else if (channel == ${i}) { return bias[${i}]; }`);\n    }\n  }\n  codeLines.push(\n      '\\t' +\n      '}');\n  return codeLines.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('ImageScaler requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Invalid input shape.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport const instanceNormalization: OperatorImplementation<number> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], epsilon: number): Tensor[] => {\n      validateInputs(inputs);\n\n      const meanAndVariance = inferenceHandler.run(createMeanAndVarianceProgramInfoLoader(inputs[0]), inputs);\n      const output = inferenceHandler.run(\n          createComputeOutputProgramInfoLoader(inferenceHandler, inputs[0], epsilon, meanAndVariance.dims),\n          [inputs[0], meanAndVariance, inputs[1], inputs[2]]);\n      return [output];\n    };\n\nexport const parseInstanceNormalizationAttributes: OperatorInitialization<number> = (node: Graph.Node): number =>\n    node.attributes.getFloat('epsilon', 1e-5);\n\nconst meanAndVarianceProgramMetadata = {\n  name: 'InstanceNormalization_MeanAndVariance',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst createMeanAndVarianceProgramInfo = (metadata: ProgramMetadata, input: Tensor): ProgramInfo => {\n  const xDims = input.dims.slice();\n  const channel = xDims[1];\n  const channelSize = xDims[2] * xDims[3];\n  const outputShape = [xDims[0], channel];\n\n  const shaderSource = `\n      vec4 process(int[2] indices) {\n        vec4 v = vec4(0.0);\n        int a[4];\n        a[0] = indices[0];\n        a[1] = indices[1];\n        float temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += x;\n          }\n        }\n        float mean = temp / float(${channelSize});\n        temp = 0.0;\n        for(int a2=0; a2<${xDims[2]}; a2++) {\n          a[2] = a2;\n          for(int a3=0; a3<${xDims[3]}; a3++) {\n            a[3] = a3;\n            float x = _X(a);\n            temp += (x - mean) * (x - mean);\n          }\n        }\n        v.r = mean;\n        v.g = temp / float(${channelSize});\n\n        return v;\n      }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: input.type, textureType: TextureType.packedLastDimension},\n    shaderSource\n  };\n};\n\nconst createMeanAndVarianceProgramInfoLoader = (input: Tensor): ProgramInfoLoader => ({\n  ...meanAndVarianceProgramMetadata,\n  get: () => createMeanAndVarianceProgramInfo(meanAndVarianceProgramMetadata, input)\n});\n\nconst computeOutputProgramMetadata = {\n  name: 'InstanceNormalization_ComputeOutput',\n  inputNames: ['X', 'MeanAndVariance', 'Scale', 'B'],\n  inputTypes: [TextureType.unpacked, TextureType.packedLastDimension, TextureType.unpacked, TextureType.unpacked],\n};\n\nconst createComputeOutputProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, epsilon: number,\n     meanAndVarianceShape: readonly number[]): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(meanAndVarianceShape, TextureType.packedLastDimension);\n      const [meanAndVarianceWidth, meanAndVarianceHeight] = [textureWidth / 4, textureHeight];\n      const shaderSource = `\n      vec4 get_MeanAndVariance(int[2] mv) {\n        int offset = indicesToOffset_MeanAndVariance(mv);\n        vec2 coords = offsetToCoords(offset, ${meanAndVarianceWidth}, ${meanAndVarianceHeight});\n        return ${glsl.texture2D}(MeanAndVariance, coords);\n      }\n\n      float process(int[4] indices) {\n        int mv[2];\n        mv[0] = indices[0];\n        mv[1] = indices[1];\n        vec4 mean_and_variance = get_MeanAndVariance(mv);\n        float mean = mean_and_variance.r;\n        float variance = mean_and_variance.g;\n\n        int sb[1];\n        sb[0] = indices[1];\n        float scale = _Scale(sb);\n        float b = _B(sb);\n\n        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;\n      }`;\n      return {\n        ...metadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        variables: [{name: 'epsilon', type: 'float', data: epsilon}],\n        shaderSource\n      };\n    };\n\nconst createComputeOutputProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, epsilon: number, meanAndVarianceShape: readonly number[]):\n        ProgramInfoLoader => {\n          const metadata = {...computeOutputProgramMetadata, cacheHint: `${epsilon}`};\n          return {\n            ...metadata,\n            get: () => createComputeOutputProgramInfo(inferenceHandler, metadata, input, epsilon, meanAndVarianceShape)\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 3) {\n    throw new Error('InstanceNormalization requires 3 inputs.');\n  }\n\n  const X = inputs[0];\n  const scale = inputs[1];\n  const B = inputs[2];\n\n  // input should at least have three dimensions - N,C,dim1,...,dimn\n  // other inputs can have only one dimensions\n  if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\n    throw new Error('Invalid input shape.');\n  }\n  if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\n    throw new Error('Input shapes are mismatched.');\n  }\n  if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\n      (B.type !== 'float32' && B.type !== 'float64')) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('Only support 4-D input shape.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\n\nexport interface LrnAttributes extends AttributeWithCacheKey {\n  alpha: number;\n  beta: number;\n  bias: number;\n  size: number;\n}\n\nexport const lrn: OperatorImplementation<LrnAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: LrnAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      // if (inferenceHandler.session.pack) {\n      //   return [inferenceHandler.run(createPackedLrnProgramInfoLoader(inferenceHandler, inputs, attributes),\n      //   inputs)];\n      // } else {\n      return [inferenceHandler.run(createLrnProgramInfoLoader(inputs, attributes), inputs)];\n      //}\n    };\n\nexport const parseLrnAttributes: OperatorInitialization<LrnAttributes> = (node: Graph.Node): LrnAttributes => {\n  const alpha = node.attributes.getFloat('alpha', 0.0001);\n  const beta = node.attributes.getFloat('beta', 0.75);\n  const bias = node.attributes.getFloat('bias', 1.0);\n  const size = node.attributes.getInt('size');\n\n  return createAttributeWithCacheKey({alpha, beta, bias, size});\n};\n\nconst lrnProgramMetadata = {\n  name: 'LRN',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nfunction createLrnProgramInfo(inputs: Tensor[], attributes: LrnAttributes): ProgramInfo {\n  const C = inputs[0].dims[1];\n  const rank = inputs[0].dims.length;\n  const from = -Math.floor((attributes.size - 1) / 2);\n  const to = Math.ceil((attributes.size - 1) / 2);\n  const alpha = `float(${attributes.alpha}) / float(${attributes.size})`;\n  const bias = `float(${attributes.bias})`;\n  const beta = `float(${attributes.beta})`;\n\n  const shaderSource = `\n    float process(int indices[${rank}]) {\n        int c = indices[1];\n        float x = _X(indices);\n        float square_sum = 0.0;\n\n        for (int i = ${from}; i <= ${to}; i++) {\n          int idx = c + i;\n          if (c >= 0 && c < ${C}) {\n            indices[1] = idx;\n            float j = _X(indices);\n            square_sum += j * j;\n          }\n        }\n        return x / pow(${bias} + ${alpha} * square_sum, ${beta});\n    }`;\n  return {\n    ...lrnProgramMetadata,\n    cacheHint: attributes.cacheKey,\n    output: {dims: inputs[0].dims, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createLrnProgramInfoLoader(inputs: Tensor[], attributes: LrnAttributes): ProgramInfoLoader {\n  return {...lrnProgramMetadata, cacheHint: attributes.cacheKey, get: () => createLrnProgramInfo(inputs, attributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('LRN requires 1 input.');\n  }\n  if (inputs[0].dims.length !== 4) {\n    throw new Error('currently only support LRN for input with \"NCHW\" format');\n  }\n  if (inputs[0].type !== 'float32') {\n    throw new Error('input should be float type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes} from './fuse-utils';\nimport {getBiasForMatmul} from './matmul';\n\nconst createPackedMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul (packed)',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.packed, TextureType.packed, TextureType.packed] :\n                        [TextureType.packed, TextureType.packed],\n  cacheHint\n});\n\nconst createPackedMatmulProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, metadata: ProgramMetadata, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfo => {\n      const hasBias = inputs.length > 2;\n      const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n      const aShape = inputs[0].dims;\n      const bShape = inputs[1].dims;\n      const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n      const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\n\n      if (!outputShape) {\n        throw new Error('Can\\'t use matmul on the given tensors');\n      }\n      const sharedDim = aShape[aShape.length - 1];\n      const sharedDimIndex = Math.ceil(sharedDim / 2);\n      const aRank = aShape.length;\n      const bRank = bShape.length;\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const coordsDataType = getCoordsDataType(outputShape.length);\n      const outRank = outputShape.length;\n      const allGlChannels = getGlChannels();\n      const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n      const getBiasForMatmulSnippet =\n          hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, true)}` : '';\n\n      const getBcastedSamplerForMatmulSnippet =\n          isBroadcast ? `${getBcastSamplerForMatmul(coordsDataType, allGlChannels, inputs, outputShape)}` : '';\n\n      const getSamplerAInLoopSnippet = isBroadcast ? 'getAAtOutCoordsMatmul(i)' : `getA(${getA(allGlChannels, aRank)})`;\n      const getSamplerBInLoopSnippet = isBroadcast ? 'getBAtOutCoordsMatmul(i)' : `getB(${getB(allGlChannels, bRank)})`;\n      const getOutputCoordsSnippet = isBroadcast ? '' : `${coordsDataType} rc =\n          getOutputCoords(); int lastDim = rc.${allGlChannels[outRank - 1]}; rc.${allGlChannels[outRank - 1]} =\n          rc.${allGlChannels[outRank - 2]}; rc.${allGlChannels[outRank - 2]} = lastDim;\n      `;\n      const shaderSource = `\n            ${getBcastedSamplerForMatmulSnippet}\n            ${getBiasForMatmulSnippet}\n            ${activationFunction}\n            void main() {\n              ${getOutputCoordsSnippet}\n\n              vec4 value = vec4(0);\n              for (int i = 0; i < ${sharedDimIndex}; i++) {\n                vec4 a = ${getSamplerAInLoopSnippet};\n                vec4 b = ${getSamplerBInLoopSnippet};\n\n                value += (a.rrbb * b.rgrg);\n                value += (a.ggaa * b.baba);\n              }\n              ${processBias}\n              ${applyActivation}\n              ${glsl.output} = value;\n            }`;\n      return {\n        ...metadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        shaderSource,\n        hasMain: true\n      };\n    };\n\nexport const createPackedMatmulProgramInfoLoader =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[],\n     activationAttributes: InternalActivationAttributes): ProgramInfoLoader => {\n      const metadata = createPackedMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n      return {\n        ...metadata,\n        get: () => createPackedMatmulProgramInfo(inferenceHandler, metadata, inputs, activationAttributes)\n      };\n    };\n\nfunction getBcastSamplerForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inputs: Tensor[], outShape: readonly number[]): string {\n  let unpackedACoordsSnippet = [];\n  let unpackedBCoordsSnippet = [];\n\n  const inAShape = inputs[0].dims;\n  const inBShape = inputs[1].dims;\n\n  const inARank = inAShape.length;\n  const inBRank = inBShape.length;\n\n  const outRank = outShape.length;\n  const rankADiff = outRank - inARank;\n  const rankBDiff = outRank - inBRank;\n\n  unpackedACoordsSnippet = inAShape.map((s, i) => `coords.${allGlChannels[i + rankADiff]}`);\n  unpackedACoordsSnippet[inARank - 1] = 'i*2';\n  unpackedACoordsSnippet.join(', ');\n  unpackedBCoordsSnippet = inBShape.map((s, i) => `coords.${allGlChannels[i + rankBDiff]}`);\n  unpackedBCoordsSnippet[inBRank - 2] = 'i*2';\n  unpackedBCoordsSnippet.join(', ');\n\n  const broadcastADims = BroadcastUtil.getBroadcastDims(inAShape, outShape);\n  const broadcastBDims = BroadcastUtil.getBroadcastDims(inBShape, outShape);\n\n  const coordsASnippet = broadcastADims.map(d => `coords.${allGlChannels[d + rankADiff]} = 0;`).join('\\n');\n  const coordsBSnippet = broadcastBDims.map(d => `coords.${allGlChannels[d + rankBDiff]} = 0;`).join('\\n');\n  const swapDimSnippet = `int lastDim = coords.${allGlChannels[outRank - 1]};\n  coords.${allGlChannels[outRank - 1]} = coords.${allGlChannels[outRank - 2]};\n  coords.${allGlChannels[outRank - 2]} = lastDim;`;\n\n  const getBcastSamplerMatmulSource = `\nvec4 getAAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsASnippet}\n  vec4 outputValue = getA(${unpackedACoordsSnippet});\n  return outputValue;\n}\n\nvec4 getBAtOutCoordsMatmul(int i) {\n  ${coordsDataType} coords = getOutputCoords();\n  ${swapDimSnippet}\n  ${coordsBSnippet}\n  vec4 outputValue = getB(${unpackedBCoordsSnippet});\n  return outputValue;\n}`;\n\n  return getBcastSamplerMatmulSource;\n}\n\nfunction getA(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += `rc.${allGlChannels[rank - 2]}, ` +\n      'i*2';\n  return res;\n}\n\nfunction getB(allGlChannels: string[], rank: number): string {\n  let res = '';\n  for (let i = 0; i < rank - 2; i++) {\n    res += `rc.${allGlChannels[i]}, `;\n  }\n  res += 'i*2, ' +\n      `rc.${allGlChannels[rank - 1]}`;\n  return res;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\nimport {getCoordsDataType, getGlChannels} from '../utils';\n\nimport {getActivationSnippet, InternalActivationAttributes, parseInternalActivationAttributes} from './fuse-utils';\nimport {createPackedMatmulProgramInfoLoader} from './matmul-pack';\n\nexport const matMul: OperatorImplementation<InternalActivationAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: InternalActivationAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      if (inferenceHandler.session.pack) {\n        return [inferenceHandler.run(\n            createPackedMatmulProgramInfoLoader(inferenceHandler, inputs, attributes), inputs)];\n      } else {\n        return [inferenceHandler.run(createMatmulProgramInfoLoader(inputs, attributes), inputs)];\n      }\n    };\n\nexport const parseMatMulAttributes: OperatorInitialization<InternalActivationAttributes> =\n    (node: Graph.Node): InternalActivationAttributes => parseInternalActivationAttributes(node.attributes);\n\nconst createMatmulProgramMetadata = (hasBias: boolean, cacheHint: string) => ({\n  name: 'MatMul',\n  inputNames: hasBias ? ['A', 'B', 'Bias'] : ['A', 'B'],\n  inputTypes: hasBias ? [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked] :\n                        [TextureType.unpacked, TextureType.unpacked],\n  cacheHint\n});\n\nfunction createMatmulProgramInfo(\n    metadata: ProgramMetadata, inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfo {\n  const aShape = inputs[0].dims;\n  const bShape = inputs[1].dims;\n  const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\n  if (!outputShape) {\n    throw new Error('Can\\'t use matmul on the given tensors');\n  }\n  const coordsDataType = getCoordsDataType(outputShape.length);\n  const allGlChannels = getGlChannels();\n  const {activationFunction, applyActivation} = getActivationSnippet(activationAttributes);\n\n  const hasBias = inputs.length > 2;\n  const processBias = hasBias ? 'value += getBiasForMatmul();' : '';\n  const getBiasForMatmulSnippet =\n      hasBias ? `${getBiasForMatmul(coordsDataType, allGlChannels, inputs[2].dims, outputShape, false)}` : '';\n\n  const rank = outputShape.length;\n  const arank = aShape.length;\n  const brank = bShape.length;\n  const sharedDim = aShape[aShape.length - 1];\n  const shaderSource = `\n    ${activationFunction}\n    ${getBiasForMatmulSnippet}\n    float process(int indices[${rank}]) {\n        int a[${arank}];\n        int b[${brank}];\n        bcastMatmulIndices_A(indices, a);\n        bcastMatmulIndices_B(indices, b);\n\n        float value;\n        for (int k=0; k<${sharedDim}; ++k) {\n            a[${arank - 1}] = k;\n            b[${brank - 2}] = k;\n            value += _A(a) * _B(b);\n        }\n        ${processBias}\n        ${applyActivation}\n        return value;\n    }`;\n  return {\n    ...metadata,\n    output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n    shaderSource,\n  };\n}\n\nexport function createMatmulProgramInfoLoader(\n    inputs: Tensor[], activationAttributes: InternalActivationAttributes): ProgramInfoLoader {\n  const metadata = createMatmulProgramMetadata(inputs.length > 2, activationAttributes.activationCacheKey);\n  return {...metadata, get: () => createMatmulProgramInfo(metadata, inputs, activationAttributes)};\n}\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('MatMul requires 2 inputs.');\n  }\n\n  if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\n    throw new Error('shared dimension does not match.');\n  }\n\n  if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\n      (inputs[1].type !== 'float32' && inputs[1].type !== 'float64')) {\n    throw new Error('inputs should be float type');\n  }\n\n  if (inputs[0].type !== inputs[1].type) {\n    throw new Error('inputs types should match');\n  }\n};\n\nexport function getBiasForMatmul(\n    coordsDataType: string, allGlChannels: readonly string[], inShape: readonly number[], outShape: readonly number[],\n    isPacked: boolean): string {\n  let unpackedCoordsSnippet = '';\n  const inRank = inShape.length;\n  const outRank = outShape.length;\n  const rankDiff = outRank - inRank;\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inShape.map((s, i) => `coords.${allGlChannels[i + rankDiff]}`).join(', ');\n  }\n  const broadcastDims = BroadcastUtil.getBroadcastDims(inShape, outShape);\n  const coordsSnippet = broadcastDims.map(d => `coords.${allGlChannels[d + rankDiff]} = 0;`).join('\\n');\n  const inSize = ShapeUtil.size(inShape);\n  const isInputScalar = inSize === 1;\n  let output = 'vec4(outputValue.xx, outputValue.yy)';\n  if (isInputScalar) {\n    output = 'vec4(outputValue.x)';\n  }\n  const getBiasForMatmulSource = isPacked ? `\nvec4 getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  vec4 outputValue = getBias(${unpackedCoordsSnippet});\n  return ${output};\n}` :\n                                            `\nfloat getBiasForMatmul() {\n  ${coordsDataType} coords = getOutputCoords();\n  ${coordsSnippet}\n  return getBias(coords.x);\n}`;\n\n  return getBiasForMatmulSource;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels} from './packing-utils';\n\nconst packProgramMetadata = {\n  name: 'pack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpackedReversed]\n};\n\nconst createPackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const inputShape = input.dims;\n\n  const inputRank = inputShape.length;\n  // createTextureLayoutFromShape won't change output rank. Need to verify by running tests\n  const outputRank = input.dims.length;\n\n  const coordsDataType = getCoordsDataType(outputRank);\n  const channels = getChannels('rc', outputRank);\n  const setup = getSetup(outputRank, channels, inputShape[inputShape.length - 2], inputShape[inputShape.length - 1]);\n\n  let reversedInputWH;\n  if (inputRank === 0) {\n    reversedInputWH = [1, 1];\n  } else if (inputRank === 1) {\n    reversedInputWH = [inputShape[0], 1];\n  } else {\n    reversedInputWH = [inputShape[outputRank - 1], inputShape[outputRank - 2]];\n  }\n  const outOfBoundsCondition = getOutOfBoundsCondition(outputRank, reversedInputWH, channels);\n  const output = getOutput(inputShape, channels);\n\n  const shaderSource = `\n        void main() {\n          ${coordsDataType} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            ${glsl.output} = vec4(0);\n          } else {\n            ${setup}\n\n            ${glsl.output} = vec4(${output});\n          }\n        }\n      `;\n  return {\n    ...packProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.packed},\n    shaderSource\n  };\n};\n\nexport const createPackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...packProgramMetadata, get: () => createPackProgramInfo(handler, input)});\n\n/**\n * check output coordinate location and return false if it is outside input's width/height boundary\n */\nfunction getOutOfBoundsCondition(rank: number, shape: readonly number[], dims: string[]): string {\n  if (rank === 0) {\n    return 'false';\n  }\n  if (rank === 1) {\n    return `rc > ${shape[0]}`;\n  }\n\n  let cond = '';\n  for (let i = rank - 2; i < rank; i++) {\n    cond += `${dims[i]} >= ${shape[i - rank + 2]}`;\n    if (i < rank - 1) {\n      cond += '||';\n    }\n  }\n\n  return cond;\n}\n\n/**\n * code snippet to sample input texture with output coordiantes\n */\nfunction getOutput(shape: readonly number[], dims: string[]): string {\n  const rank = shape.length;\n\n  if (rank === 0) {\n    return 'getA(), 0, 0, 0';\n  }\n\n  if (rank === 1) {\n    return `getA(rc),\n            rc + 1 >= ${shape[0]} ? 0. : getA(rc + 1),\n            0, 0`;\n  }\n\n  const coord00 = 'r, c';\n  const coord01 = 'r, cp1';\n  const coord10 = 'rp1, c';\n  const coord11 = 'rp1, cp1';\n  let D = '';\n  if (rank > 2) {\n    for (let i = 0; i < rank - 2; ++i) {\n      D = D + `${dims[i]},`;\n    }\n  }\n  return `getA(${D}${coord00}),\n          rEdge ? 0. : getA(${D}${coord10}),\n          cEdge ? 0. : getA(${D}${coord01}),\n          rEdge || cEdge ? 0. : getA(${D}${coord11})`;\n}\n\n/**\n * code snippet to setup 4 coordinates and edge conditions\n */\nfunction getSetup(rank: number, dims: string[], rows: number, cols: number): string {\n  if (rank === 0 || rank === 1) {\n    return '';\n  }\n  // rank >= 2 for width+height pack.\n  else {\n    const setup = `\n    int r = ${dims[rank - 2]};\n    int c = ${dims[rank - 1]};\n    int rp1 = ${dims[rank - 2]} + 1;\n    int cp1 = ${dims[rank - 1]} + 1;\n    bool rEdge = rp1 >= ${cols};\n    bool cEdge = cp1 >= ${rows};\n    `;\n    return setup;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlChannels} from '../utils';\n\nexport function getVecChannels(name: string, rank: number): string[] {\n  return getGlChannels(rank).map(d => `${name}.${d}`);\n}\n\nexport function getChannels(name: string, rank: number): string[] {\n  if (rank === 1) {\n    return [name];\n  }\n  return getVecChannels(name, rank);\n}\n\nexport function unpackFromChannel(): string {\n  return `\n    float getChannel(vec4 frag, int dim) {\n      int modCoord = imod(dim, 2);\n      return modCoord == 0 ? frag.r : frag.g;\n    }\n\n    float getChannel(vec4 frag, vec2 innerDims) {\n      vec2 modCoord = mod(innerDims, 2.);\n      return modCoord.x == 0. ?\n        (modCoord.y == 0. ? frag.r : frag.g) :\n        (modCoord.y == 0. ? frag.b : frag.a);\n    }\n  `;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl, Glsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface PadAttributes extends AttributeWithCacheKey {\n  readonly mode: string;\n  readonly pads: number[];\n  readonly value: number;\n}\n\nconst padProgramMetadata = {\n  name: 'Pad',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const padV2: OperatorImplementation<PadAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: PadAttributes): Tensor[] => {\n      validateInputsV2(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...padProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPadProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parsePadAttributesV2: OperatorInitialization<PadAttributes> = (node: Graph.Node): PadAttributes => {\n  const mode = node.attributes.getString('mode', 'constant');\n  const value = node.attributes.getFloat('value', 0.0);\n  const pads = node.attributes.getInts('pads');\n  return createAttributeWithCacheKey({mode, value, pads});\n};\n\nexport const padV11: OperatorImplementation<string> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): Tensor[] => {\n      validateInputsV11(inputs);\n      const attrubutes = generatePadAttributesFromInputs(inferenceHandler, inputs, mode);\n      return padV2(inferenceHandler, [inputs[0]], attrubutes);\n    };\n\nexport const parsePadAttributesV11: OperatorInitialization<string> = (node: Graph.Node): string =>\n    node.attributes.getString('mode', 'constant');\n\nconst generatePadAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], mode: string): PadAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          (inputs.length >= 3 && !inferenceHandler.session.isInitializer(inputs[2].dataId))) {\n        throw new Error('dynamic pad attributes are not allowed');\n      }\n\n      const pads = Array.from(inputs[1].integerData);\n      const value = (inputs.length >= 3) ? inputs[2].floatData[0] : 0.0;\n\n      return createAttributeWithCacheKey({mode, pads, value});\n    };\n\nconst createPadProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): ProgramInfo => {\n      const outputShape = ShapeUtil.padShape(input.dims.slice(), attributes.pads);\n      const rank = outputShape.length;\n      const padFunction = getPadFunction(inferenceHandler, input, attributes);\n      const shaderSource = `\n      ${padFunction}\n      float process(int[${rank}] indices) {\n          return padA(indices);\n      }`;\n      return {\n        name: 'Pad',\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputsV2 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pad requires 1 input');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst validateInputsV11 = (inputs: Tensor[]): void => {\n  if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\n    throw new Error('Pad requires 2 or 3 inputs');\n  }\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 3 && inputs[2].type === 'string') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst getPadFunction = (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: PadAttributes): string => {\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  const [width, height] = inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n  const strides = ShapeUtil.computeStrides(input.dims);\n\n  switch (attributes.mode) {\n    case 'constant':\n      return getPadConstant(glsl, input.dims, strides, width, height, attributes.pads, attributes.value);\n    case 'reflect':\n      return getPadReflect(glsl, input.dims, strides, width, height, attributes.pads);\n    case 'edge':\n      return getPadEdge(glsl, input.dims, strides, width, height, attributes.pads);\n    default:\n      throw new Error('Invalid mode');\n  }\n};\n\nconst getPadConstant =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[],\n     value: number): string => {\n      const rank = shape.length;\n      let block = '';\n      for (let i = rank - 1; i >= 0; --i) {\n        block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  return constant;\n        if (k >= ${shape[i]}) return constant;\n        offset += k * ${strides[i]};\n        `;\n      }\n      return `\n      float padA(int m[${rank}]) {\n        const float constant = float(${value});\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n    };\n\nconst getPadReflect =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0) { k = -k; }\n        {\n          const int _2n_1 = ${2 * (shape[i] - 1)};\n          k = int( mod( float(k), float(_2n_1) ) ) ;\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\n        }\n        offset += k * ${strides[i]};\n        `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n\nconst getPadEdge =\n    (glsl: Glsl, shape: readonly number[], strides: readonly number[], width: number, height: number, pads: number[]):\n        string => {\n          const rank = shape.length;\n\n          let block = '';\n          for (let i = rank - 1; i >= 0; --i) {\n            block += `\n        k = m[${i}] - ${pads[i]};\n        if (k < 0)  k = 0;\n        if (k >= ${shape[i]}) k = ${shape[i] - 1};\n        offset += k * ${strides[i]};\n      `;\n          }\n          return `\n      float padA(int m[${rank}]) {\n        int offset = 0;\n        int k = 0;\n        ${block}\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\n        float value = getColorAsFloat(${glsl.texture2D}(A, coords));\n        return value;\n      }\n      `;\n        };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface AveragePoolAttributes extends AttributeWithCacheKey {\n  readonly autoPad: string;\n  readonly ceilMode: number;\n  readonly countIncludePad: boolean;\n  readonly kernelShape: readonly number[];\n  readonly strides: readonly number[];\n  readonly pads: readonly number[];\n}\n\nexport const averagePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'AveragePool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n\n      // TODO: support attribute 'ceil_mode'\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for AveragePool');\n      }\n\n      return createAttributeWithCacheKey({autoPad, ceilMode, countIncludePad, kernelShape, strides, pads});\n    };\n\nconst createAveragePoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: AveragePoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const kernelSize = ShapeUtil.size(adjustedAttributes.kernelShape);\n          const op1 = 'value += _X(x);';\n          let op2 = '';\n          if (adjustedAttributes.countIncludePad) {\n            op2 += `value /= float(${kernelSize});`;\n          } else {\n            op2 += `value /= float(${kernelSize} - pad);`;\n          }\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '0.0');\n          const shaderSource = `\n        ${poolingCode}\n      `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nexport const globalAveragePool: OperatorImplementation<AveragePoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: AveragePoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata = {\n        name: 'GlobalAveragePool',\n        inputNames: ['X'],\n        inputTypes: [TextureType.unpacked],\n        cacheHint: `${attributes.countIncludePad}`\n      };\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createAveragePoolProgramInfo(inputs, metadata, true, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseGlobalAveragePoolAttributes: OperatorInitialization<AveragePoolAttributes> =\n    (node: Graph.Node): AveragePoolAttributes => {\n      const countIncludePad = (node.attributes.getInt('count_include_pad', 0) === 0 ? false : true);\n      return createAttributeWithCacheKey(\n          {autoPad: '', ceilMode: 0, countIncludePad, kernelShape: [], strides: [], pads: []});\n    };\n\nexport interface MaxPoolAttributes extends AveragePoolAttributes {\n  readonly storageOrder: number;\n  readonly dilations: number[];\n}\n\nexport const maxPool: OperatorImplementation<MaxPoolAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: MaxPoolAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const metadata =\n          {name: 'MaxPool', inputNames: ['X'], inputTypes: [TextureType.unpacked], cacheHint: attributes.cacheKey};\n      const output = inferenceHandler.run(\n          {...metadata, get: () => createMaxPoolProgramInfo(inputs, metadata, false, attributes)}, inputs);\n      return [output];\n    };\n\nexport const parseMaxPoolAttributes: OperatorInitialization<MaxPoolAttributes> =\n    (node: Graph.Node): MaxPoolAttributes => {\n      const autoPad = node.attributes.getString('auto_pad', 'NOTSET');\n      const ceilMode = node.attributes.getInt('ceil_mode', 0);\n      const kernelShape = node.attributes.getInts('kernel_shape');\n      const strides = node.attributes.getInts('strides', []);\n      const pads = node.attributes.getInts('pads', []);\n      const storageOrder = node.attributes.getInt('storage_order', 0);\n      const dilations = node.attributes.getInts('dilations', []);\n\n      // TODO: support attribute 'ceil_mode' and 'storage_order'\n      if (storageOrder !== 0) {\n        throw new Error('column major storage order is not yet supported for MaxPool');\n      }\n      if (ceilMode !== 0) {\n        throw new Error('using ceil() in shape computation is not yet supported for MaxPool');\n      }\n\n      return createAttributeWithCacheKey(\n          {autoPad, ceilMode, countIncludePad: false, kernelShape, strides, pads, storageOrder, dilations});\n    };\n\nconst createMaxPoolProgramInfo =\n    (inputs: Tensor[], metadata: ProgramMetadata, isGlobalOperator: boolean, attributes: MaxPoolAttributes):\n        ProgramInfo => {\n          const [adjustedAttributes, outputShape] =\n              getAdjustedPoolAttributesAndOutputShape(inputs, attributes, isGlobalOperator);\n          const op1 = `\n      value = max(_X(x), value);\n    `;\n          const op2 = '';\n          const poolingCode = generatePoolingCode(inputs[0].dims, adjustedAttributes, op1, op2, '-1e5');\n          const shaderSource = `\n      ${poolingCode}\n    `;\n          return {\n            ...metadata,\n            output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst getAdjustedPoolAttributesAndOutputShape =\n    (inputs: Tensor[], attributes: AveragePoolAttributes|MaxPoolAttributes, isGlobalOperator: boolean):\n        [AveragePoolAttributes|MaxPoolAttributes, number[]] => {\n          const inputShape = inputs[0].dims.slice();\n          const hasDilations = Object.hasOwnProperty.call(attributes, 'dilations');\n          const kernelShape = attributes.kernelShape.slice();\n          const strides = attributes.strides.slice();\n          const dilations: number[] = hasDilations ? (attributes as MaxPoolAttributes).dilations.slice() : [];\n          const pads = attributes.pads.slice();\n          PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, dilations, pads);\n\n          const outputShape = PoolConvUtil.computePoolOutputShape(\n              isGlobalOperator, inputShape, strides, dilations, kernelShape, pads, attributes.autoPad);\n\n          const newAttributes = Object.assign({}, attributes);\n          if (hasDilations) {\n            Object.assign(newAttributes, {kernelShape, strides, pads, dilations, cacheKey: attributes.cacheKey});\n          } else {\n            Object.assign(newAttributes, {kernelShape, strides, pads, cacheKey: attributes.cacheKey});\n          }\n          return [newAttributes, outputShape];\n        };\n\nconst globalMaxPoolAttributes = {\n  autoPad: '',\n  ceilMode: 0,\n  countIncludePad: false,\n  kernelShape: [],\n  strides: [],\n  pads: [],\n  storageOrder: 0,\n  dilations: [],\n  cacheKey: ''\n};\n\nconst globalMaxPoolMetadata = {\n  name: 'GlobalMaxPool',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const globalMaxPool = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  const output = inferenceHandler.run(\n      {\n        ...globalMaxPoolMetadata,\n        get: () => createMaxPoolProgramInfo(inputs, globalMaxPoolMetadata, true, globalMaxPoolAttributes)\n      },\n      inputs);\n  return [output];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Pool ops requires 1 input.');\n  }\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n};\n\nconst generatePoolingCode =\n    (inputDims: readonly number[], attributes: AveragePoolAttributes, op1: string, op2: string, start: string):\n        string => {\n          const rank = inputDims.length;\n          if (attributes.kernelShape.length <= 2) {\n            const kw = attributes.kernelShape[attributes.kernelShape.length - 1];\n            const sw = attributes.strides[attributes.strides.length - 1];\n            const pwStart = attributes.pads[attributes.pads.length / 2 - 1];\n            const pwEnd = attributes.pads[attributes.pads.length - 1];\n            const dimW = inputDims[rank - 1];\n            let codeW = '';\n            let codeH = '';\n            let codeHEnd = '';\n            if (pwStart + pwEnd !== 0) {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\n              pad++;\n              continue;\n            }\n            ${op1}\n          }`;\n            } else {\n              codeW = `\n          for (int i = 0; i < ${kw}; i++) {\n            x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\n            ${op1}\n          }`;\n            }\n\n            if (attributes.kernelShape.length === 2) {\n              const kh = attributes.kernelShape[attributes.kernelShape.length - 2];\n              const sh = attributes.strides[attributes.strides.length - 2];\n              const phStart = attributes.pads[attributes.pads.length / 2 - 2];\n              const phEnd = attributes.pads[attributes.pads.length - 2];\n              const dimH = inputDims[rank - 2];\n              if (phStart + phEnd !== 0) {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n              if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\n                pad+= ${kw};\n                continue;\n              }\n          `;\n              } else {\n                codeH = `\n            for (int j = 0; j < ${kh}; j++) {\n              x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\n            `;\n              }\n              codeHEnd = `\n          }\n        `;\n            }\n\n            const poolingCode = `\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n\n          float value = ${start};\n          int pad = 0;\n          ${codeH}\n          ${codeW}\n          ${codeHEnd}\n          ${op2}\n          return value;\n        }\n      `;\n            return poolingCode;\n          } else {\n            const kernelSize = ShapeUtil.size(attributes.kernelShape);\n            const kernelStrides = ShapeUtil.computeStrides(attributes.kernelShape);\n            const stridesRank = kernelStrides.length;\n            const padsRank = attributes.pads.length;\n            const offsetToIndicesFunction = offsetToIndices(stridesRank);\n            const copyInputDims = copyArray(inputDims, 'inputDims');\n            const copyPads = copyArray(attributes.pads, 'pads');\n            const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\n            const copyStrides = copyArray(attributes.strides, 'strides');\n            const hasPads = attributes.pads.reduce((sum, cur) => sum + cur);\n            let padCode = '';\n            if (hasPads) {\n              padCode = `\n            if (x[j] >= inputDims[j] || x[j] < 0) {\n              pad++;\n              isPad = true;\n              break;\n            }\n          }\n          if (!isPad) {\n            ${op1}\n          }`;\n            } else {\n              padCode = `\n          }\n          ${op1}\n        `;\n            }\n            const poolingCode = `\n        ${offsetToIndicesFunction}\n        float process(int indices[${rank}]) {\n          int x[${rank}];\n          copyVec(indices, x);\n          int offset[${stridesRank}];\n          int pads[${padsRank}];\n          int inputDims[${rank}];\n          int kernelStrides[${stridesRank}];\n          int strides[${stridesRank}];\n          ${copyPads}\n          ${copyInputDims}\n          ${copyStrides}\n          ${copyKernelStrides}\n\n          float value = ${start};\n          int pad = 0;\n          bool isPad = false;\n          for (int i = 0; i < ${kernelSize}; i++) {\n            offsetToIndices(i, kernelStrides, offset);\n            isPad = false;\n            for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\n              x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\n                + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\n              ${padCode}\n          }\n          ${op2}\n\n          return value;\n        }\n      `;\n            return poolingCode;\n          }\n        };\n\nconst copyArray = (array: readonly number[], arrayName: string): string => {\n  let block = '';\n  for (let i = 0; i < array.length; i++) {\n    block += `\n      ${arrayName}[${i}] = ${array[i]};\n    `;\n  }\n  return block;\n};\n\nconst offsetToIndices = (rank: number): string => `\n  void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\n    if (${rank} == 0) {\n      return;\n    }\n    for (int i = 0; i < ${rank} - 1; ++i) {\n      indices[i] = offset / strides[i];\n      offset -= indices[i] * strides[i];\n    }\n    indices[${rank} - 1] = offset;\n  }`;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport interface ReduceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly keepDims: boolean;\n}\n\n// return [init ops, reduce ops, final ops]\ntype ReduceOp = (inputs: Tensor[], axes: number[]) => string[];\n\nconst reduce =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string,\n     reduceOp: ReduceOp): Tensor[] => {\n      validateInputs(inputs);\n\n      const reduceProgramMetadata = {\n        name,\n        inputNames: ['A'],\n        inputTypes: [TextureType.unpacked],\n      };\n\n      const output = inferenceHandler.run(\n          {\n            ...reduceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () =>\n                createReduceProgramInfo(inferenceHandler, inputs, attributes, name, reduceOp, reduceProgramMetadata)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseReduceAttributes: OperatorInitialization<ReduceAttributes> = (node: Graph.Node): ReduceAttributes => {\n  const axes = node.attributes.getInts('axes', []);\n  const keepDims = node.attributes.getInt('keepdims', 1) === 1;\n  return createAttributeWithCacheKey({axes, keepDims});\n};\n\nconst createReduceProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes, name: string, reduceOp: ReduceOp,\n     reduceProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const outputShape: number[] = [];\n      const iRank = inputs[0].dims.length || 1;\n\n      const idxCopy = [];  // copy output indexes to input indexes\n\n      const axes = ShapeUtil.normalizeAxes(attributes.axes, inputs[0].dims.length);\n      const ops = reduceOp(inputs, axes);\n      let reduceOps = ops[1];\n\n      for (let k = 0; k < inputs[0].dims.length; k++) {\n        // if this axis is reduced\n        if (axes.indexOf(k) >= 0 || axes.length === 0) {\n          if (attributes.keepDims) {\n            outputShape.push(1);\n          }  // else { remove the axis from outputShape; }\n\n          // loop over the d-th axis\n          reduceOps = `\n          for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\n            inputIdx[${k}] = j${k};\n            ${reduceOps}\n          }`;\n        } else {\n          idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\n\n          outputShape.push(inputs[0].dims[k]);\n        }\n      }\n\n      const oRank = outputShape.length || 1;\n\n      const shaderSource = `\n      float process(int outputIdx[${oRank}]) {\n        float value;                 // final result\n        int inputIdx[${iRank}];      // addressing input data\n        ${idxCopy.join('\\n')}\n        ${ops[0]}       // init ops for reduce max/min\n        ${reduceOps}\n        ${ops[2]}       // final computation for reduce mean\n        return value;\n      }`;\n\n      return {\n        ...reduceProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  // TODO: support Reduce* operators with 2 inputs.\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Reduce op requires 1 input.');\n  }\n\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const reduceSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceSum', reduceOp);\n    };\n\nexport const reduceMean: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        let size = 1.0;\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            size *= inputs[0].dims[k];\n          }\n        }\n\n        return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMean', reduceOp);\n    };\n\nexport const reduceMax: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMax', reduceOp);\n    };\n\nexport const reduceMin: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (inputs: Tensor[], axes: number[]): string[] => {\n        const idxZero = [];\n        for (let k = 0; k < inputs[0].dims.length; k++) {\n          if (axes.indexOf(k) >= 0 || axes.length === 0) {\n            idxZero.push(`inputIdx[${k}] = 0;`);  // first element\n          }\n        }\n\n        return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\n      };\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceMin', reduceOp);\n    };\n\nexport const reduceProd: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 1.0;', 'value *= _A(inputIdx);', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceProd', reduceOp);\n    };\n\nexport const reduceLogSum: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSum', reduceOp);\n    };\n\nexport const reduceLogSumSquare: OperatorImplementation<ReduceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: ReduceAttributes): Tensor[] => {\n      const reduceOp: ReduceOp = (): string[] => ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\n      return reduce(inferenceHandler, inputs, attributes, 'ReduceLogSumSquare', reduceOp);\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nimport {unpackFromChannel} from './packing-utils';\n\nconst createPackedReshape3DProgramMetadata = (outputShape3D: readonly number[]) =>\n    ({name: 'Reshape (packed)', inputTypes: [TextureType.packed], inputNames: ['A'], cacheHint: `${outputShape3D}`});\n\nconst createPackedReshape3DProgramInfo =\n    (handler: WebGLInferenceHandler, input3D: Tensor, metadata: ProgramMetadata, outputShape3D: readonly number[]):\n        ProgramInfo => {\n          const inputShape3D = input3D.dims as [number, number, number];\n          const squeezedOutputShape = outputShape3D as [number, number, number];\n\n          let mainLoop = '';\n          for (let i = 0; i < 4; i++) {\n            let outputCoords = '';\n            switch (i) {\n              case 0:\n                outputCoords = 'outputCoords = rc;';\n                break;\n              case 1:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z);';\n                break;\n              case 2:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y, rc.z+1);';\n                break;\n              case 3:\n                outputCoords = 'outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);';\n                break;\n              default:\n                throw new Error();\n            }\n\n            mainLoop += `\n        ${outputCoords}\n        ${i > 0 ? 'if(outputCoords.y < rows && outputCoords.z < cols){' : ''}\n          int flattenedIndex = getFlattenedIndex(outputCoords);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);\n          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${i}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);\n\n        ${i > 0 ? '}' : ''}\n      `;\n          }\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n\n          const shaderSource = `\n      ${getReshapedInputCoords(inputShape3D)}\n      ${getFlattenedIndexFrom3D(squeezedOutputShape)}\n      ${unpackFromChannel()}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.0);\n\n        ivec3 outputCoords;\n        int rows = ${squeezedOutputShape[2]};\n        int cols = ${squeezedOutputShape[1]};\n\n        ${mainLoop}\n        ${glsl.output} = result;\n      }\n    `;\n\n          return {\n            ...metadata,\n            output: {dims: squeezedOutputShape, type: input3D.type, textureType: TextureType.packed},\n            shaderSource,\n            hasMain: true\n          };\n        };\n\nexport const createPackedReshape3DProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input3D: Tensor, outputShape3D: readonly number[]): ProgramInfoLoader => {\n      const metadata = createPackedReshape3DProgramMetadata(outputShape3D);\n      return {...metadata, get: () => createPackedReshape3DProgramInfo(handler, input3D, metadata, outputShape3D)};\n    };\n\nexport function processDims3D(shape: ArrayLike<number>): [number, number, number] {\n  if (shape.length === 0) {\n    return [1, 1, 1];\n  }\n  // TODO: squeeze other shapes to 2D case\n  let batch = 1;\n  for (let i = 0; i < shape.length - 2; ++i) {\n    batch *= shape[i];\n  }\n  return [batch, shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\n\n// For packed reshape, we need to re-arrange texel data for output shape.\n// Our pack is designed to pack a 2x2 tile in last h and w dimension, so\n// for the reshaped new tensor, we just need to re-arrange the last h and\n// w dimension. For any shape that is not in 3D, i.e. [batch, W, H], we\n// first convert it to 3D by collapsing other dimension to batch dim, then\n// process with the last two dimensions.\n// Note: we only need the shape tensor to calculate output shape, so the\n// content in shape tensor is never uploaded to GPU. It is always kept in CPU.\n// TODO: optimize the algorithm -- in some cases, if the last two dims are\n// the same between input shape and output shape, the packed reshape can be\n// treated as no-op.\nexport function isReshapeCheap(dims: readonly number[], reshapedDims: readonly number[]) {\n  let isCheapReshape = false;\n  if (dims.length === 0 || reshapedDims.length === 0) {  // scalar\n    isCheapReshape = true;\n  } else if (dims.length < 2 || reshapedDims.length < 2) {  // 1D\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1];\n  } else {  // 2D +\n    isCheapReshape = dims[dims.length - 1] === reshapedDims[reshapedDims.length - 1] &&\n        dims[dims.length - 2] === reshapedDims[reshapedDims.length - 2];\n  }\n\n  return isCheapReshape;\n}\n\nfunction getReshapedInputCoords(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n  const coords = ['b', 'r', 'c'];\n  const index = 'index';\n  const coordsFromIndexSnippet = strides\n                                     .map((stride, i) => {\n                                       const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n                                       const line2 = i === strides.length - 1 ?\n                                           `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n                                           `index -= ${coords[i]} * ${stride}`;\n                                       return `${line1}; ${line2};`;\n                                     })\n                                     .join('');\n\n  return `\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${coordsFromIndexSnippet}\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getFlattenedIndexFrom3D(shape: [number, number, number]): string {\n  const strides = ShapeUtil.computeStrides(shape);\n\n  return `\n  int getFlattenedIndex(ivec3 coords) {\n    // reverse y, z order\n    return coords.x * ${strides[0]} + coords.z * ${strides[1]} + coords.y;\n  }\n`;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const reshape = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\n  if (handler.session.pack) {\n    return [handler.reshapePacked(inputs[0], reshapedDims)];\n  } else {\n    return [handler.reshapeUnpacked(inputs[0], reshapedDims)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {unpackFromChannel} from './packing-utils';\nimport {parseUpsampleAttributes, scalesValidation, UpsampleAttributes, validateInputs} from './upsample';\n\nconst resizeProgramMetadata = {\n  name: 'Resize',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const resize: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...resizeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createPackedResizeProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseResizeAttributesV10: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 10);\n\nexport const parseResizeAttributesV11: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 11);\n\nconst createPackedResizeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [scales, outputShape] = prepareInputs(inputs, attributes);\n\n      const isSame =\n          scales.every((s: number) => s === 1) && attributes.coordinateTransformMode !== 'tf_crop_and_resize';\n      if (isSame) {\n        return {\n          ...resizeProgramMetadata,\n          output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n          hasMain: true,\n          shaderSource: `void main() {\n                    vec4 v = ${glsl.texture2D}(X, TexCoords);\n                    ${glsl.output} = v;\n                }`\n        };\n      }\n\n      const dim = outputShape.length;\n      if (dim < 2) {\n        throw new Error(`output dimension should be at least 2, but got ${dim}`);\n      }\n\n      const outputHeight = outputShape[dim - 2];\n      const outputWidth = outputShape[dim - 1];\n\n      const inputShape = inputs[0].dims;\n      if (dim !== inputShape.length) {\n        throw new Error(`output dimension should match input ${inputShape.length}, but got ${dim}`);\n      }\n      const inputHeight = inputShape[dim - 2];\n      const inputWidth = inputShape[dim - 1];\n\n      const scalesHeight = scales[dim - 2];\n      const scalesWidth = scales[dim - 1];\n\n      let getSourceFracIndex = '';\n\n      if (attributes.mode !== 'linear') {\n        // TODO: support other modes\n        throw new Error(`resize (packed) does not support mode: '${attributes.mode}'`);\n      }\n      switch (attributes.coordinateTransformMode) {\n        case 'asymmetric':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return vec4(coords) / scaleWHWH;\n                    }\n                `;\n          break;\n        case 'half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;\n                    }\n                `;\n          break;\n        case 'pytorch_half_pixel':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 fcoords = vec4(coords);\n                        return vec4(\n                            ${outputWidth}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,\n                            ${outputWidth}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,\n                            ${outputHeight}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0\n                          );\n                    }\n                `;\n          break;\n        case 'align_corners':\n          getSourceFracIndex = `\n                    vec4 getSourceFracIndex(ivec4 coords) {\n                        vec4 resized = vec4(${outputWidth}.0 - 1.0, ${outputHeight}.0 - 1.0, ${outputWidth}.0 - 1.0,\n                            ${outputHeight}.0 - 1.0);\n                        vec4 original = vec4(${inputWidth}.0 - 1.0, ${inputHeight}.0 - 1.0, ${inputWidth}.0 - 1.0,\n                            ${inputHeight}.0 - 1.0);\n                        vec4 new_scale = original / resized;\n                        return vec4(coords) * new_scale;\n                    }\n                `;\n          break;\n        default:\n          // TODO:supporting other coordinateTransformModes\n          throw new Error(`resize (packed) does not support coordinateTransformMode: \\\n                                '${attributes.coordinateTransformMode}'`);\n      }\n\n      const coordsDataType = getCoordsDataType(dim);\n      const unpackChannel = unpackFromChannel();\n      const shaderSource = `\n            const vec2 inputWH = vec2(${inputHeight}.0, ${inputWidth}.0);\n            const vec4 scaleWHWH = vec4(float(${scalesHeight}), float(${scalesWidth}), float(${scalesHeight}), float(${\n          scalesWidth}));\n            ${unpackChannel}\n            ${getSourceFracIndex}\n            float getAValue(int x10, int r, int c, int d) {\n                return getChannel(getA(x10, r, c, d), vec2(c, d));\n            }\n            void main() {\n                ${coordsDataType} rc = getOutputCoords();\n\n                int batch = rc[0];\n                int depth = rc[1];\n\n                // retrieve the 4 coordinates that is used in the 4 packed output values.\n                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);\n\n                // calculate the source index in fraction\n                vec4 sourceFrac = getSourceFracIndex(coords);\n\n                // get the lower and upper bound of the 4 values that will be packed into one texel.\n                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));\n                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));\n                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));\n                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));\n\n                bool hasNextRow = rc.w < ${outputHeight - 1};\n                bool hasNextCol = rc.z < ${outputWidth - 1};\n\n                // pack x00, x01, x10, x11's top-left corner into one vec4 structure\n                vec4 topLeft = vec4(\n                    getAValue(batch, depth, x00.x, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's top-right corner into one vec4 structure\n                vec4 topRight = vec4(\n                    getAValue(batch, depth, x00.x, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure\n                vec4 bottomLeft = vec4(\n                    getAValue(batch, depth, x00.z, x00.y),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);\n\n                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure\n                vec4 bottomRight = vec4(\n                    getAValue(batch, depth, x00.z, x00.w),\n                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,\n                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,\n                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);\n\n                // calculate the interpolation fraction on u and v direction\n                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);\n                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));\n\n                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);\n                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);\n                vec4 newValue = mix(top, bottom, clampFrac.xxzz);\n\n                ${glsl.output} = vec4(newValue);\n            }\n        `;\n      return {\n        ...resizeProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.packed},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\n\nconst prepareInputs = (inputs: Tensor[], attributes: UpsampleAttributes): [readonly number[], readonly number[]] => {\n  const x = inputs[0];\n  const xDims = x.dims;\n\n  let scales = attributes.scales;\n  let outputSizes: number[]|undefined;\n  if (scales.length === 0) {\n    const scalesTensor = inputs[attributes.scalesInputIdx];\n    if (scalesTensor && scalesTensor.size !== 0) {\n      if (inputs[attributes.sizesInputIdx]) {\n        throw new Error('Only one of scales or sizes must be provided as input.');\n      }\n      scales = parseScalesData(scalesTensor, attributes.mode, attributes.isResize);\n    } else {\n      const sizesTensor = inputs[attributes.sizesInputIdx];\n      if (!sizesTensor || sizesTensor.size === 0) {\n        throw new Error('Either scales or sizes MUST be provided as input.');\n      }\n\n      outputSizes = Array.from(sizesTensor.integerData);\n      scales = parseScalesDataFromOutputSize(outputSizes, xDims, attributes.mode, attributes.isResize);\n    }\n  } else {\n    if (inputs[attributes.sizesInputIdx]) {\n      throw new Error('Only one of scales or sizes must be provided as input.');\n    }\n  }\n\n  const yDims = outputSizes || (xDims.map((dim, i) => Math.floor(dim * scales[i])));\n\n  return [scales, yDims];\n};\n\nconst parseScalesData = (scale: Tensor, mode: string, isResize: boolean): number[] => {\n  const scales = Array.from(scale.floatData);\n  scalesValidation(scales, mode, isResize);\n  return scales;\n};\n\nconst parseScalesDataFromOutputSize =\n    (yDims: readonly number[], xDims: readonly number[], mode: string, isResize: boolean): number[] => {\n      const length = xDims.length;\n      const scales = new Array<number>(length);\n\n      for (let i = 0, end = length; i < end; i++) {\n        if (xDims[i] === 0) {\n          if (yDims[i] !== 0) {\n            throw new Error('Input dim is zero but required output dim is non-zero.');\n          }\n          scales[i] = 1;\n        } else {\n          scales[i] = yDims[i] / xDims[i];\n        }\n      }\n      scalesValidation(scales, mode, isResize);\n      return scales;\n    };\n\n// roi data is not used yet. but leave here for future usage.\n// const getRoi = (inputs: Tensor[], attributes: UpsampleAttributes) : number[] => {\n//     let roi: number[] = [];\n//     if (attributes.needRoiInput) {\n//         if (attributes.roiInputIdx <= 0) {\n//             throw new Error('Invalid roi input index.');\n//         }\n//         const roiTensor = inputs[attributes.roiInputIdx];\n//         roi = roiTensor.size > 0 ? Array.from(roiTensor.floatData) : [];\n//     } else {\n//         roi = new Array(inputs[0].dims.length * 2).fill(0);\n//     }\n//     return roi;\n// };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const shape = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n  return [new Tensor([inputs[0].dims.length], 'int32', undefined, undefined, new Int32Array(inputs[0].dims))];\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Shape requires 1 input.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {NUMBER_TYPES, OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SliceAttributes extends AttributeWithCacheKey {\n  readonly axes: number[];\n  readonly ends: number[];\n  readonly starts: number[];\n}\n\nconst sliceProgramMetadata = {\n  name: 'Slice',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const slice: OperatorImplementation<SliceAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SliceAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...sliceProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseSliceAttributes: OperatorInitialization<SliceAttributes> = (node: Graph.Node): SliceAttributes => {\n  const starts = node.attributes.getInts('starts');\n  const ends = node.attributes.getInts('ends');\n  const axes = node.attributes.getInts('axes', []);\n  return createAttributeWithCacheKey({starts, ends, axes});\n};\n\nconst createSliceProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SliceAttributes): ProgramInfo => {\n      const axes = (attributes.axes.length === 0) ? input.dims.slice(0).map((val, i) => i) : attributes.axes;\n      const normalizedAxes = ShapeUtil.normalizeAxes(axes, input.dims.length);\n      const starts = attributes.starts.map((start, i) => {\n        if (start > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(start, input.dims[normalizedAxes[i]]);\n      });\n      const ends = attributes.ends.map((end, i) => {\n        if (end > input.dims[normalizedAxes[i]] - 1) {\n          return input.dims[normalizedAxes[i]];\n        }\n        return ShapeUtil.normalizeAxis(end, input.dims[normalizedAxes[i]]);\n      });\n\n      const outputShape = input.dims.slice();\n\n      const sliceOps: string[] = [];\n      for (let i = 0; i < normalizedAxes.length; i++) {\n        outputShape[normalizedAxes[i]] = ends[i] - starts[i];\n        if (starts[i] > 0) {\n          sliceOps.push(`outputIdx[${normalizedAxes[i]}] += ${starts[i]};`);\n        }  // else { sliceOps.push(`outputIdx[${normalizedAxes[i]}] += 0;`); }\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        ${sliceOps.join('\\n      ')}\n        return _A(outputIdx);\n      }`;\n      return {\n        ...sliceProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Slice requires 1 input.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n};\n\nexport const sliceV10 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV10(inputs);\n  const attributes = generateSliceAttributesFromInputs(inferenceHandler, inputs);\n  const output = inferenceHandler.run(\n      {\n        ...sliceProgramMetadata,\n        cacheHint: attributes.cacheKey,\n        get: () => createSliceProgramInfo(inferenceHandler, inputs[0], attributes)\n      },\n      [inputs[0]]);\n  return [output];\n};\n\nconst generateSliceAttributesFromInputs =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): SliceAttributes => {\n      if (!inferenceHandler.session.isInitializer(inputs[1].dataId) ||\n          !inferenceHandler.session.isInitializer(inputs[2].dataId) ||\n          (inputs.length >= 4 && !inferenceHandler.session.isInitializer(inputs[3].dataId)) ||\n          (inputs.length >= 5 && !inferenceHandler.session.isInitializer(inputs[4].dataId))) {\n        throw new Error('dynamic slice attributes are not allowed');\n      }\n\n      if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\n        throw new Error('currently non-1 steps is not supported for Slice');\n      }\n\n      const starts = Array.from(inputs[1].integerData);\n      const ends = Array.from(inputs[2].integerData);\n      const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\n      const cacheKey = `${axes};${starts};${ends}`;\n      return {starts, ends, axes, cacheKey};\n    };\n\nconst validateInputsV10 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length < 3 || inputs.length > 5) {\n    throw new Error('Invalid input number.');\n  }\n  if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nimport {transpose, TransposeAttributes} from './transpose';\n\nexport interface SoftmaxAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n}\n\nconst softmaxComputeMaxProgramMetadata = {\n  name: 'SoftmaxComputeMax',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nconst softmaxComputeScaleProgramMetadata = {\n  name: 'SoftmaxComputeScale',\n  inputNames: ['A', 'Max'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked],\n};\n\nconst softmaxProgramMetadata = {\n  name: 'SoftMax',\n  inputNames: ['A', 'Max', 'Norm'],\n  inputTypes: [TextureType.unpacked, TextureType.unpacked, TextureType.unpacked],\n};\n\nexport const softmax: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const logicalRowCount = ShapeUtil.sizeToDimension(inputShape, axis);\n      const featureCount = ShapeUtil.sizeFromDimension(inputShape, axis);\n\n      const output = computeSoftmax(inferenceHandler, inputs, attributes, logicalRowCount, featureCount);\n      return output;\n    };\n\nexport const parseSoftmaxAttributes: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', 1)});\n\nexport const parseSoftmaxAttributesV13: OperatorInitialization<SoftmaxAttributes> =\n    (node: Graph.Node): SoftmaxAttributes => createAttributeWithCacheKey({axis: node.attributes.getInt('axis', -1)});\n\n// The \"semantic\" meaning of axis has changed in opset-13.\n// Please compare: https://github.com/onnx/onnx/blob/main/docs/Operators.md#Softmax\n// with https://github.com/onnx/onnx/blob/main/docs/Changelog.md#Softmax-11 for detailed explanations\n// To account for the opset-13 behavior, our plan will be to transpose the \"axis\" dim to the innermost dim\n// and perform softmax and then reverse the transpose. We can skip the transposing aspect if the axis is already\n// the innermost dim\nexport const softmaxV13: OperatorImplementation<SoftmaxAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const inputShape = inputs[0].dims.slice();\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputShape.length);\n      const rank = inputShape.length;\n\n      const isTransposeRequired = (axis !== rank - 1) ? true : false;\n      const transposedInputShape: number[] = [];\n      let perm: number[] = [];\n      let transposedInputs: Tensor[] = [];\n      let transposeAttribute: TransposeAttributes;\n\n      if (isTransposeRequired) {\n        perm = Array.from({length: rank}).map((_, i) => i);\n\n        // swap the innermost dim with the dim corresponding to axis\n        perm[axis] = rank - 1;\n        perm[rank - 1] = axis;\n\n        perm.map(p => transposedInputShape.push(inputShape[p]));\n\n        transposeAttribute = createAttributeWithCacheKey({perm});\n        transposedInputs = transpose(inferenceHandler, inputs, transposeAttribute);\n      }\n\n      const logicalRowCount = isTransposeRequired ? ShapeUtil.sizeToDimension(transposedInputShape, rank - 1) :\n                                                    ShapeUtil.sizeToDimension(inputShape, rank - 1);\n      const featureCount = isTransposeRequired ? ShapeUtil.sizeFromDimension(transposedInputShape, rank - 1) :\n                                                 ShapeUtil.sizeFromDimension(inputShape, rank - 1);\n\n      const output = computeSoftmax(\n          inferenceHandler, isTransposeRequired ? transposedInputs : inputs, attributes, logicalRowCount, featureCount);\n\n      if (isTransposeRequired) {\n        const reversedOutput = transpose(inferenceHandler, output, transposeAttribute!);\n        return reversedOutput;\n      } else {\n        return output;\n      }\n    };\n\nconst computeSoftmax =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SoftmaxAttributes, logicalRowCount: number,\n     featureCount: number): Tensor[] => {\n      const computeMaxProgramInfo =\n          createComputeMaxProgramInfo(inferenceHandler, inputs[0], logicalRowCount, featureCount, [logicalRowCount]);\n      const max = inferenceHandler.run(\n          {...softmaxComputeMaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeMaxProgramInfo},\n          inputs);\n\n      const computeScaleProgramInfo = createComputScaleProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          [logicalRowCount]);\n      const scale = inferenceHandler.run(\n          {...softmaxComputeScaleProgramMetadata, cacheHint: attributes.cacheKey, get: () => computeScaleProgramInfo},\n          [inputs[0], max]);\n\n      const softMaxProgramInfo = createSoftMaxProgramInfo(\n          inferenceHandler, inputs[0], logicalRowCount, featureCount, computeMaxProgramInfo.output.dims,\n          computeScaleProgramInfo.output.dims);\n      const output = inferenceHandler.run(\n          {...softmaxProgramMetadata, cacheHint: attributes.cacheKey, get: () => softMaxProgramInfo},\n          [inputs[0], max, scale]);\n      return [output];\n    };\n\n/**\n * Create a texture that contains the maximum value of each of the 'N' rows\n */\nconst createComputeMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth},\n        ${textureHeight} )));\n        for(int i=1; i<${featureCount}; ++i)\n        {\n          float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight})));\n          if(current > max)\n          max = current;\n        }\n\n        return max;\n      }`;\n      return {\n        ...softmaxComputeMaxProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\n/**\n * Create a texture that contains the normalization factor for each of the 'N' rows\n */\nconst createComputScaleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], outputShape: number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = outputShape.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (outputShape.length !== 1) {\n        throw new Error('Dimensionality of the output should be 1');\n      }\n\n      if (outputShape[0] !== logicalRowCount) {\n        throw new Error('Shape of the output should be equal to logical row count');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n        int logical_row_start_offset = indices[0] * ${featureCount};\n\n        float norm_factor = 0.0;\n        float max = _Max(indices);\n        for(int i=0; i<${featureCount}; ++i)\n        {\n          norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i,\n            ${textureWidth}, ${textureHeight}))) - max);\n        }\n\n        return norm_factor;\n      }`;\n      return {\n        ...softmaxComputeScaleProgramMetadata,\n        output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst createSoftMaxProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, logicalRowCount: number, featureCount: number,\n     maxElementPerLogicalRow: readonly number[], normalizationPerLogicalRow: readonly number[]): ProgramInfo => {\n      const [textureWidth, textureHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(input.dims, TextureType.unpacked);\n      const rank = input.dims.length;\n\n      if (logicalRowCount < 1 || featureCount < 1) {\n        throw new Error('Logical row count N and feature count D must be greater than or equal to 1');\n      }\n\n      if (maxElementPerLogicalRow.length !== 1 || normalizationPerLogicalRow.length !== 1) {\n        throw new Error('Dimensionality of the intermediate results should be 1');\n      }\n\n      if (maxElementPerLogicalRow[0] !== logicalRowCount || normalizationPerLogicalRow[0] !== logicalRowCount) {\n        throw new Error('Shape of the intermediate results should be equal to logical row count');\n      }\n\n      const shaderSource = `\n      float process(int[${rank}] indices) {\n\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\n\n      //determine the logical row for this index\n      int logical_row_index[1];\n      logical_row_index[0] = offset / ${featureCount};\n\n      float norm_factor = _Norm(logical_row_index);\n\n      // avoid possible division by 0\n      // if norm_facor is 0, all elements are zero\n      // if so, return 0\n      if(norm_factor == 0.0)\n        return 0.0;\n\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\n    }`;\n      return {\n        ...softmaxProgramMetadata,\n        output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Softmax requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil, SplitUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface SplitAttributes extends AttributeWithCacheKey {\n  readonly axis: number;\n  readonly split: number[];\n  readonly numOutputs: number;\n}\n\nconst splitProgramMetadata = {\n  name: 'Split',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const split: OperatorImplementation<SplitAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: SplitAttributes): Tensor[] => {\n      validateInputs(inputs);\n\n      const axis = ShapeUtil.normalizeAxis(attributes.axis, inputs[0].dims.length);\n      const count = getProgramCount(inferenceHandler, inputs, axis, attributes);\n      const output: Tensor[] = [];\n      for (let i = 0; i < count; ++i) {\n        output.push(inferenceHandler.run(\n            {\n              ...splitProgramMetadata,\n              cacheHint: `${attributes.cacheKey};${i}`,\n              get: () => createSplitProgramInfo(inferenceHandler, inputs[0], attributes, axis, i)\n            },\n            inputs));\n      }\n\n      return output;\n    };\n\nexport const parseSplitAttributes: OperatorInitialization<SplitAttributes> = (node: Graph.Node): SplitAttributes => {\n  const axis = node.attributes.getInt('axis', 0);\n  const split = node.attributes.getInts('split', []);\n  const numOutputs = node.outputs.length;\n  return createAttributeWithCacheKey({axis, split, numOutputs});\n};\n\nconst getProgramCount =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axis: number, attributes: SplitAttributes): number => {\n      const [, offsets] = SplitUtil.splitShape(inputs[0].dims, axis, attributes.split, attributes.numOutputs);\n      return offsets.length;\n    };\n\nconst createSplitProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, attributes: SplitAttributes, axis: number, index: number):\n        ProgramInfo => {\n          const [shapes, offsets] = SplitUtil.splitShape(input.dims, axis, attributes.split, attributes.numOutputs);\n          const offset = offsets[index];\n          const outputShape = shapes[index];\n          const rank = outputShape.length;\n          const shaderSource = `\n      float process(int indices[${rank}]) {\n        indices[${axis}] += ${offset};\n        return _A(indices);\n      }\n    `;\n          return {\n            ...splitProgramMetadata,\n            cacheHint: `${attributes.cacheKey}:${index}`,\n            output: {dims: outputShape, type: input.type, textureType: TextureType.unpacked},\n            shaderSource\n          };\n        };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Split requires one input.');\n  }\n\n  if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\n      inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\n      inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const squeeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.squeezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const squeezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return squeeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseSqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Squeeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Squeeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const sum = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const sumProgramMetadata = {\n    name: 'Sum',\n    inputNames: inputs.map((v, i) => `X${i}`),\n    inputTypes: new Array(inputs.length).fill(TextureType.unpacked)\n  };\n\n  const output = inferenceHandler.run(\n      {...sumProgramMetadata, get: () => createSumProgramInfo(inferenceHandler, inputs, sumProgramMetadata)}, inputs);\n  return [output];\n};\n\nconst createSumProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], sumProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const outputShape = inputs[0].dims.slice();\n      const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\n      const shaderSource = `\n      void main() {\n        vec4 result = ${sumLine};\n        ${glsl.output} = result;\n      }\n    `;\n      return {\n        ...sumProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        hasMain: true,\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length === 0) {\n    throw new Error('Sum requires inputs.');\n  }\n\n  const length = inputs[0].dims.length;\n  for (let i = 1; i < inputs.length; i++) {\n    if (length !== inputs[i].dims.length) {\n      throw new Error('Input shapes are mismatched.');\n    }\n\n    for (let j = 0; j < length; j++) {\n      if (inputs[0].dims[j] !== inputs[i].dims[j]) {\n        throw new Error('Input shapes are not matched.');\n      }\n    }\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('Invalid input type.');\n  }\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[0].type !== inputs[i].type) {\n      throw new Error('Input types are not matched.');\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {NUMBER_TYPES} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramMetadata, TextureType} from '../types';\n\nexport const tile = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputs(inputs);\n\n  const tileProgramMetadata = {\n    name: 'Tile',\n    inputNames: ['A'],\n    inputTypes: [TextureType.unpacked],\n  };\n\n  const output = inferenceHandler.run(\n      {...tileProgramMetadata, get: () => createTileProgramInfo(inferenceHandler, inputs, tileProgramMetadata)},\n      inputs);\n  return [output];\n};\n\nconst createTileProgramInfo =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], tileProgramMetadata: ProgramMetadata): ProgramInfo => {\n      const inputShape = inputs[0].dims.slice();\n      const outputShape = new Array(inputShape.length);\n\n      const tileOps: string[] = [];\n      for (let i = 0; i < inputShape.length; i++) {\n        outputShape[i] = inputShape[i] * inputs[1].numberData[i];\n        tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\n      }\n\n      const rank = outputShape.length;\n      const shaderSource = `\n      float process(int outputIdx[${rank}]) {\n        int inputIdx[${rank}];\n        ${tileOps.join('\\n')}\n        return _A(inputIdx);\n      }\n    `;\n      return {\n        ...tileProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Tile requires 2 input.');\n  }\n  if (inputs[1].dims.length !== 1) {\n    throw new Error('The second input shape must 1 dimension.');\n  }\n  if (inputs[1].dims[0] !== inputs[0].dims.length) {\n    throw new Error('Invalid input shape.');\n  }\n  if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\n    throw new Error('Invalid input type.');\n  }\n  if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\n    throw new Error('Invalid repeat type.');\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface TransposeAttributes extends AttributeWithCacheKey {\n  readonly perm: number[];\n}\n\nconst transposeProgramMetadata = {\n  name: 'Transpose',\n  inputNames: ['A'],\n  inputTypes: [TextureType.unpacked]\n};\n\nexport const transpose: OperatorImplementation<TransposeAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: TransposeAttributes): Tensor[] => {\n      validateInputs(inputs);\n      const output = inferenceHandler.run(\n          {\n            ...transposeProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createTransposeProgramInfo(inferenceHandler, inputs[0], attributes.perm)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseTransposeAttributes: OperatorInitialization<TransposeAttributes> =\n    (node: Graph.Node): TransposeAttributes => createAttributeWithCacheKey({perm: node.attributes.getInts('perm', [])});\n\nconst createTransposeProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, input: Tensor, perm: number[]): ProgramInfo => {\n      const inputShape = input.dims;\n      perm = getAdjustedPerm(inputShape, perm);\n      const unpackedOutputShape = getOutputShape(inputShape, perm);\n      const rank = inputShape.length;\n      // A dims=[${inputs[0].dims.toString()}]\n      // out Dims=[${unpackedOutputShape.toString()}]\n      // based on perm=[${perm.toString()}]\n      const shaderSource = `\n      ${getPermFunctionBody('perm', perm, rank)}\n      float process(int indices[${rank}]) {\n        int a[${rank}];\n        perm(a, indices);\n        return _A(a);\n      }`;\n      return {\n        ...transposeProgramMetadata,\n        output: {dims: unpackedOutputShape, type: input.type, textureType: TextureType.unpacked},\n        shaderSource\n      };\n    };\n\nconst getAdjustedPerm = (inputShape: readonly number[], perm: number[]): number[] => {\n  if (perm && perm.length !== inputShape.length) {\n    perm = [...(inputShape.keys())].reverse();\n  }\n  return perm;\n};\n\nconst getOutputShape = (inputShape: readonly number[], perm: number[]): readonly number[] => {\n  perm = getAdjustedPerm(inputShape, perm);\n  return ShapeUtil.sortBasedOnPerm(inputShape, perm);\n};\n\nconst getPermFunctionBody = (name: string, perm: number[], rank: number): string => {\n  const reverseFunc = [];\n  reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\n  for (let i = 0; i < rank; ++i) {\n    reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\n  }\n  reverseFunc.push('\\t}');\n  return reverseFunc.join('\\n');\n};\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Transpose requires 1 input.');\n  }\n\n  if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\n    throw new Error('input should be float tensor');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {TextureData, TextureType} from '../types';\n\nexport const encodeAsUint8 = (inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData => {\n  const outputShape = input.shape;\n  const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n  /**\n   * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\n   */\n  const shaderSource = `\n    const float FLOAT_MAX = 1.70141184e38;\n    const float FLOAT_MIN = 1.17549435e-38;\n\n    bool isNaN(float val) {\n      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\n    }\n\n    highp vec4 encodeAsUint8(highp float v) {\n      if (isNaN(v)) {\n        return vec4(255, 255, 255, 255);\n      }\n\n      highp float av = abs(v);\n\n      if(av < FLOAT_MIN) {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n      } else if(v > FLOAT_MAX) {\n        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n      } else if(v < -FLOAT_MAX) {\n        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n      }\n\n      highp vec4 c = vec4(0,0,0,0);\n\n      highp float e = floor(log2(av));\n      highp float m = exp2(fract(log2(av))) - 1.0;\n\n      c[2] = floor(128.0 * m);\n      m -= c[2] / 128.0;\n      c[1] = floor(32768.0 * m);\n      m -= c[1] / 32768.0;\n      c[0] = floor(8388608.0 * m);\n\n      highp float ebias = e + 127.0;\n      c[3] = floor(ebias / 2.0);\n      ebias -= c[3] * 2.0;\n      c[2] += floor(ebias) * 128.0;\n\n      c[3] += 128.0 * step(0.0, -v);\n\n      return c / 255.0;\n    }\n\n    void main() {\n      float value = ${glsl.texture2D}(X,TexCoords).r;\n      ${glsl.output} = encodeAsUint8(value);\n    }`;\n  const programInfo = {\n    name: 'Uint8Encode',\n    inputTypes: [TextureType.unpacked],\n    inputNames: ['X'],\n    output: {dims: outputShape, type: input.tensor.type, textureType: TextureType.downloadUint8AsFloat},\n    shaderSource,\n    hasMain: true\n  };\n  return inferenceHandler.executeProgram(programInfo, [input.tensor]);\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {Tensor} from '../../../tensor';\nimport {MAX_CLIP, MIN_CLIP} from '../../../util';\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, ProgramMetadata, TextureType} from '../types';\n\nexport function glslAbs(): GlslValueFunction {\n  return glslBuiltinUnary('abs');\n}\nexport function glslAcos(): GlslValueFunction {\n  return glslBuiltinUnary('acos');\n}\nexport function glslAsin(): GlslValueFunction {\n  return glslBuiltinUnary('asin');\n}\nexport function glslAtan(): GlslValueFunction {\n  return glslBuiltinUnary('atan');\n}\nexport function glslCeil(): GlslValueFunction {\n  return glslBuiltinUnary('ceil');\n}\nexport function glslCos(): GlslValueFunction {\n  return glslBuiltinUnary('cos');\n}\nexport function glslElu(alpha: number): GlslValueFunction {\n  const name = 'elu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslExp(): GlslValueFunction {\n  return glslBuiltinUnary('exp');\n}\nexport function glslFloor(): GlslValueFunction {\n  return glslBuiltinUnary('floor');\n}\nexport function glslClip(min: number, max: number): GlslValueFunction {\n  const name = 'clip';\n  const body = `\n  const float min = float(${min});\n  const float max = float(${max});\n\n  float ${name}_(float a) {\n    return clamp(a, min, max);\n  }\n  vec4 ${name}_(vec4 v) {\n    return clamp(v, min, max);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslIdentity(): GlslValueFunction {\n  const name = 'indentity';\n  const body = `\n  float ${name}_(float a) {\n    return a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLeakyRelu(alpha: number): GlslValueFunction {\n  const name = 'leakyRelu';\n  const body = `\n  const float alpha = float(${alpha});\n\n  float ${name}_(float a) {\n    return a < 0.0 ? a * alpha : a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(${name}_(v.x), ${name}_(v.y), ${name}_(v.z), ${name}_(v.w));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslLog(): GlslValueFunction {\n  return glslBuiltinUnary('log');\n}\nexport function glslNeg(): GlslValueFunction {\n  const name = 'neg';\n  const body = `\n  float ${name}_(float a) {\n    return -a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return -v;\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslNot(): GlslValueFunction {\n  const name = 'not';\n  const body = `\n  float ${name}_(float a) {\n    return float( ! bool(a) );\n  }\n  bool ${name}_(bool a) {\n    return !a;\n  }\n  vec4 ${name}_(vec4 v) {\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\n  }\n  bvec4 ${name}_(bvec4 v) {\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSin(): GlslValueFunction {\n  return glslBuiltinUnary('sin');\n}\nexport function glslRelu(): GlslValueFunction {\n  const name = 'relu';\n  const body = `\n  float ${name}_(float a) {\n    return max( a, 0.0 );\n  }\n  vec4 ${name}_(vec4 v) {\n    return max( v, 0.0 );\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSigmoid(): GlslValueFunction {\n  const name = 'sigmoid';\n  const body = `\n  float ${name}_(float a) {\n    return 1.0 / (1.0 + exp(-a));\n  }\n  vec4 ${name}_(vec4 v) {\n    return 1.0 / (1.0 + exp(-v));\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nexport function glslSqrt(): GlslValueFunction {\n  return glslBuiltinUnary('sqrt');\n}\nexport function glslTan(): GlslValueFunction {\n  return glslBuiltinUnary('tan');\n}\nexport function glslTanh(): GlslValueFunction {\n  const name = 'tanh';\n  const body = `\n  float ${name}_(float a) {\n    a = clamp(a, -10., 10.);\n    a = exp(2.*a);\n    return (a - 1.) / (a + 1.);\n  }\n  vec4 ${name}_(vec4 v) {\n    v = clamp(v, -10., 10.);\n    v = exp(2.*v);\n    return (v - 1.) / (v + 1.);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\nfunction glslBuiltinUnary(name: string): GlslValueFunction {\n  const body = `\n  float ${name}_(float a) {\n    return ${name}(a);\n  }\n  vec4 ${name}_(vec4 v) {\n    return ${name}(v);\n  }\n  `;\n  return {body, name, type: FunctionType.ValueBased};\n}\n\n/////\n/////\n/////\n\nconst createElementwiseProgramInfo =\n    (handler: WebGLInferenceHandler, metadata: ProgramMetadata, input: Tensor, glslFunc: GlslValueFunction):\n        ProgramInfo => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const glsl = getGlsl(handler.session.backend.glContext.version);\n          return {\n            ...metadata,\n            output: {dims: input.dims, type: input.type, textureType},\n            shaderSource: `\n     ${glslFunc.body}\n     void main() {\n       vec4 v = ${glsl.texture2D}(A, TexCoords);\n       v = ${glslFunc.name}_(v);\n       ${glsl.output} = v;\n     }\n     `,\n            hasMain: true\n          };\n        };\n\nconst createElementwiseProgramInfoLoader =\n    (handler: WebGLInferenceHandler, input: Tensor, glslFunc: GlslValueFunction, cacheKey?: string):\n        ProgramInfoLoader => {\n          const textureType = handler.session.pack ? TextureType.packed : TextureType.unpacked;\n          const metadata = {name: glslFunc.name, inputTypes: [textureType], inputNames: ['A'], cacheHint: cacheKey};\n          return {...metadata, get: () => createElementwiseProgramInfo(handler, metadata, input, glslFunc)};\n        };\n\nexport const abs = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAbs()), inputs)];\n\nexport const acos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAcos()), inputs)];\n\nexport const asin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAsin()), inputs)];\n\nexport const atan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslAtan()), inputs)];\n\nexport interface ClipAttributes extends AttributeWithCacheKey {\n  readonly min: number;\n  readonly max: number;\n}\n\nexport const clip =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: ClipAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(\n            handler, inputs[0], glslClip(attributes.min, attributes.max), attributes.cacheKey),\n        inputs)];\n\nexport const parseClipAttributes = (node: Graph.Node): ClipAttributes => createAttributeWithCacheKey(\n    {min: node.attributes.getFloat('min', MIN_CLIP), max: node.attributes.getFloat('max', MAX_CLIP)});\n\nexport const clipV11 = (handler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  const attributes = generateClipAttributesFromInputs(handler, inputs);\n  return clip(handler, [inputs[0]], attributes);\n};\n\nconst generateClipAttributesFromInputs = (handler: WebGLInferenceHandler, inputs: Tensor[]): ClipAttributes => {\n  if (inputs.length >= 3 &&\n      (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId))) {\n    throw new Error('dynamic clip attributes are not allowed');\n  }\n\n  const min = (inputs.length >= 3) ? inputs[1].numberData[0] : MIN_CLIP;\n  const max = (inputs.length >= 3) ? inputs[2].numberData[0] : MAX_CLIP;\n  return createAttributeWithCacheKey({min, max});\n};\n\nexport const ceil = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCeil()), inputs)];\n\nexport const cos = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslCos()), inputs)];\n\nexport interface EluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const elu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: EluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslElu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseEluAttributes = (node: Graph.Node): EluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 1.0)});\n\nexport const exp = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslExp()), inputs)];\n\nexport const floor = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslFloor()), inputs)];\n\nexport const identity = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslIdentity()), inputs)];\n\nexport interface LeakyReluAttributes extends AttributeWithCacheKey {\n  readonly alpha: number;\n}\n\nexport const leakyRelu =\n    (handler: WebGLInferenceHandler, inputs: Tensor[], attributes: LeakyReluAttributes): Tensor[] => [handler.run(\n        createElementwiseProgramInfoLoader(handler, inputs[0], glslLeakyRelu(attributes.alpha), attributes.cacheKey),\n        inputs)];\n\nexport const parseLeakyReluAttributes = (node: Graph.Node): LeakyReluAttributes =>\n    createAttributeWithCacheKey({alpha: node.attributes.getFloat('alpha', 0.01)});\n\nexport const log = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslLog()), inputs)];\n\nexport const neg = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNeg()), inputs)];\n\nexport const not = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslNot()), inputs)];\n\nexport const relu = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslRelu()), inputs)];\n\nexport const sigmoid = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSigmoid()), inputs)];\n\nexport const sin = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSin()), inputs)];\n\nexport const sqrt = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslSqrt()), inputs)];\n\nexport const tan = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTan()), inputs)];\n\nexport const tanh = (handler: WebGLInferenceHandler, inputs: Tensor[]):\n    Tensor[] => [handler.run(createElementwiseProgramInfoLoader(handler, inputs[0], glslTanh()), inputs)];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, ProgramInfoLoader, TextureType} from '../types';\nimport {getCoordsDataType} from '../utils';\n\nimport {getChannels, unpackFromChannel} from './packing-utils';\n\nconst unpackProgramMetadata = {\n  name: 'unpack',\n  inputNames: ['A'],\n  inputTypes: [TextureType.packed]\n};\n\nexport const createUnpackProgramInfo = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfo => {\n  const rank = input.dims.length;\n\n  const channels = getChannels('rc', rank);\n  const innerDims = channels.slice(-2);\n  const coordsDataType = getCoordsDataType(rank);\n  const unpackChannel = unpackFromChannel();\n  const isScalar = (input.dims.length === 0);\n  const sourceCoords = isScalar ? '' : getSourceCoords(rank, channels);\n  const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n  const glsl = getGlsl(handler.session.backend.glContext.version);\n  const shaderSource = `\n    ${unpackChannel}\n    void main() {\n      ${coordsDataType} rc = getOutputCoords();\n\n       // Sample the texture with the coords to get the rgba channel value.\n       vec4 packedInput = getA(${sourceCoords});\n\n       ${glsl.output} = vec4(getChannel(packedInput, ${coords}), 0, 0, 0);\n     }\n   `;\n\n  return {\n    ...unpackProgramMetadata,\n    hasMain: true,\n    output: {dims: input.dims, type: input.type, textureType: TextureType.unpacked},\n    shaderSource\n  };\n};\n\nexport const createUnpackProgramInfoLoader = (handler: WebGLInferenceHandler, input: Tensor): ProgramInfoLoader =>\n    ({...unpackProgramMetadata, get: () => createUnpackProgramInfo(handler, input)});\n\nfunction getSourceCoords(rank: number, dims: string[]): string {\n  if (rank === 1) {\n    return 'rc';\n  }\n\n  let coords = '';\n  for (let i = 0; i < rank; i++) {\n    coords += dims[i];\n    if (i < rank - 1) {\n      coords += ',';\n    }\n  }\n  return coords;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {ShapeUtil} from '../../../util';\nimport {WebGLInferenceHandler} from '../inference-handler';\n\nexport const unsqueeze: OperatorImplementation<number[]> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], axes: number[]): Tensor[] => {\n      validateInputs(inputs);\n      const outputShape = ShapeUtil.unsqueezeShape(inputs[0].dims, axes);\n      const output = inferenceHandler.reshapeUnpacked(inputs[0], outputShape);\n      return [output];\n    };\n\nexport const unsqueezeV13 = (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] => {\n  validateInputsV13(inputs);\n  return unsqueeze(inferenceHandler, [inputs[0]], Array.from(inputs[1].integerData));\n};\n\nexport const parseUnsqueezeAttributes: OperatorInitialization<number[]> = (node: Graph.Node): number[] =>\n    node.attributes.getInts('axes');\n\nconst validateInputs = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 1) {\n    throw new Error('Unsqueeze requires 1 input.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('invalid input tensor types.');\n  }\n};\n\nconst validateInputsV13 = (inputs: Tensor[]): void => {\n  if (!inputs || inputs.length !== 2) {\n    throw new Error('Unsqueeze requires 2 inputs.');\n  }\n\n  if (inputs[1].type !== 'int32') {\n    throw new Error('Invalid input type.');\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {AttributeWithCacheKey, createAttributeWithCacheKey} from '../../../attribute-with-cache-key';\nimport {Graph} from '../../../graph';\nimport {OperatorImplementation, OperatorInitialization} from '../../../operators';\nimport {Tensor} from '../../../tensor';\nimport {getGlsl} from '../glsl-source';\nimport {WebGLInferenceHandler} from '../inference-handler';\nimport {ProgramInfo, TextureType} from '../types';\n\nexport interface UpsampleAttributes extends AttributeWithCacheKey {\n  readonly opset: number;\n  readonly isResize: boolean;\n  readonly mode: string;\n  readonly scales: number[];\n  readonly extrapolationValue: number;\n  readonly coordinateTransformMode: string;\n  readonly useExtrapolation: boolean;\n  readonly needRoiInput: boolean;\n  readonly nearestMode: string;\n  readonly cubicCoefficientA: number;\n  readonly excludeOutside: boolean;\n  readonly useNearest2xOptimization: boolean;\n  readonly roiInputIdx: number;\n  readonly scalesInputIdx: number;\n  readonly sizesInputIdx: number;\n}\n\nconst upsampleProgramMetadata = {\n  name: 'Upsample',\n  inputNames: ['X'],\n  inputTypes: [TextureType.unpacked],\n};\n\nexport const upsample: OperatorImplementation<UpsampleAttributes> =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): Tensor[] => {\n      validateInputs(inputs, attributes);\n      const output = inferenceHandler.run(\n          {\n            ...upsampleProgramMetadata,\n            cacheHint: attributes.cacheKey,\n            get: () => createUpsampleProgramInfo(inferenceHandler, inputs, attributes)\n          },\n          inputs);\n      return [output];\n    };\n\nexport const parseUpsampleAttributesV7: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 7);\n\nexport const parseUpsampleAttributesV9: OperatorInitialization<UpsampleAttributes> =\n    (node: Graph.Node): UpsampleAttributes => parseUpsampleAttributes(node, 9);\n\nexport const parseUpsampleAttributes = (node: Graph.Node, opset: number): UpsampleAttributes => {\n  const isResize = (opset >= 10);\n\n  // processing node attributes\n  const mode = node.attributes.getString('mode', 'nearest');\n  if (mode !== 'nearest' && mode !== 'linear' && (opset < 11 || mode !== 'cubic')) {\n    throw new Error(`unrecognized mode: ${mode}`);\n  }\n\n  let scales: number[] = [];\n  if (opset < 9) {\n    scales = node.attributes.getFloats('scales');\n    scalesValidation(scales, mode, isResize);\n  }\n\n  const extrapolationValue = node.attributes.getFloat('extrapolation_value', 0.0);\n\n  const coordinateTransformMode =\n      opset > 10 ? node.attributes.getString('coordinate_transformation_mode', 'half_pixel') : 'asymmetric';\n  if ([\n        'asymmetric', 'pytorch_half_pixel', 'tf_half_pixel_for_nn', 'align_corners', 'tf_crop_and_resize', 'half_pixel'\n      ].indexOf(coordinateTransformMode) === -1) {\n    throw new Error(`coordinate_transform_mode '${coordinateTransformMode}' is not supported`);\n  }\n  const needRoiInput = (coordinateTransformMode === 'tf_crop_and_resize');\n  const useExtrapolation = needRoiInput;\n\n  const nearestMode =\n      (mode === 'nearest' && opset >= 11) ? node.attributes.getString('nearest_mode', 'round_prefer_floor') : '';\n  if (['round_prefer_floor', 'round_prefer_ceil', 'floor', 'ceil', ''].indexOf(nearestMode) === -1) {\n    throw new Error(`nearest_mode '${nearestMode}' is not supported`);\n  }\n\n  const cubicCoefficientA = node.attributes.getFloat('cubic_coeff_a', -0.75);\n  const excludeOutside = node.attributes.getInt('exclude_outside', 0) !== 0;\n  if (excludeOutside && mode !== 'cubic') {\n    throw new Error('exclude_outside can be set to 1 only when mode is CUBIC.');\n  }\n\n  const useNearest2xOptimization =\n      (opset < 11) ? true : (mode === 'nearest' && coordinateTransformMode === 'asymmetric' && nearestMode === 'floor');\n\n  let roiInputIdx = 0;\n  let scalesInputIdx = 0;\n  let sizesInputIdx = 0;\n\n  if (opset > 10) {\n    // handle when roiInput is not given\n    if (node.inputs.length > 2) {\n      roiInputIdx = 1;\n      scalesInputIdx = 2;\n      sizesInputIdx = 3;\n    } else {\n      scalesInputIdx = 1;\n      sizesInputIdx = 2;\n    }\n  } else if (opset === 9) {\n    scalesInputIdx = 1;\n  }\n\n  return createAttributeWithCacheKey({\n    opset,\n    isResize,\n    mode,\n    scales,\n    extrapolationValue,\n    coordinateTransformMode,\n    useExtrapolation,\n    needRoiInput,\n    nearestMode,\n    cubicCoefficientA,\n    excludeOutside,\n    useNearest2xOptimization,\n    roiInputIdx,\n    scalesInputIdx,\n    sizesInputIdx\n  });\n};\n\nconst createUpsampleProgramInfo =\n    (inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], attributes: UpsampleAttributes): ProgramInfo => {\n      const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\n      const [inputWidth, inputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(inputs[0].dims, TextureType.unpacked);\n\n      const outputShape = inputs[0].dims.map((dim, i) => Math.floor(dim * attributes.scales[i]));\n      const [outputWidth, outputHeight] =\n          inferenceHandler.calculateTextureWidthAndHeight(outputShape, TextureType.unpacked);\n      const dim = outputShape.length;\n\n      const outputPitches = new Array<number>(dim);\n      const inputPitches = new Array<number>(dim);\n      let precalculatedPitches = `\n      int output_pitches[${dim}];\n      int input_pitches[${dim}];\n      `;\n      for (let d = dim - 1; d >= 0; d--) {\n        outputPitches[d] = (d === dim - 1) ? 1 : outputPitches[d + 1] * outputShape[d + 1];\n        inputPitches[d] = (d === dim - 1) ? 1 : inputPitches[d + 1] * inputs[0].dims[d + 1];\n\n        precalculatedPitches += `\n        output_pitches[${d}] = ${outputPitches[d]};\n        input_pitches[${d}] = ${inputPitches[d]};\n        `;\n      }\n      const getInputFloatFunction = `\n      float getInputFloat(int index) {\n        vec2 coords = offsetToCoords(index, ${inputWidth}, ${inputHeight});\n        float value = getColorAsFloat(${glsl.texture2D}(X, coords));\n        return value;\n      }\n      `;\n\n      const shaderSource = attributes.mode === 'nearest' ?\n          // nearest\n          `\n    ${getInputFloatFunction}\n    float process(int indices[${dim}]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int d, m;\n      for (int dim = 0; dim < ${dim}; ++dim) {\n        d = output_index / output_pitches[dim];\n        m = output_index - d * output_pitches[dim];\n        output_index = m;\n\n        if (scales[dim] != 1 && d > 0) {\n          int d2 = d / scales[dim];\n          m = d - d2 * scales[dim];\n          d = d2;\n        }\n        input_index += input_pitches[dim] * d;\n      }\n\n      return getInputFloat(input_index);\n    }` :\n          dim === 4 ?\n          // bilinear 4D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[4]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m / output_pitches[1];\n      m = m - index_of_dim1 * output_pitches[1];\n      index_of_dim2 = m / output_pitches[2];\n      m = m - index_of_dim2 * output_pitches[2];\n      index_of_dim3 = m;\n\n      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;\n      index_of_input_dim2 = index_of_dim2 / scales[2];\n      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];\n      index_of_input_dim3 = index_of_dim3 / scales[3];\n      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];\n\n      input_index = index_of_dim0 * input_pitches[0] +\n            index_of_dim1 * input_pitches[1] +\n            index_of_input_dim2 * input_pitches[2] +\n            index_of_input_dim3;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim2 = false;\n      if (index_of_input_dim2 == (${inputs[0].dims[2]} - 1)) {\n        // It's the end in dimension 2\n        x01 = x00;\n        end_of_dim2 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[2]);\n      }\n\n      if (index_of_input_dim3 == (input_pitches[2] - 1)) {\n        // It's the end in dimension 3\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);\n    }` :\n              // bilinear 2D\n              `\n    ${getInputFloatFunction}\n    float process(int indices[2]) {\n      int input_index = 0;\n      int output_index = coordsToOffset(TexCoords, ${outputWidth}, ${outputHeight});\n\n      ${precalculatedPitches}\n\n      int m;\n      int index_of_dim0, index_of_dim1;\n      index_of_dim0 = output_index / output_pitches[0];\n      m = output_index - index_of_dim0 * output_pitches[0];\n      index_of_dim1 = m;\n\n      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;\n      index_of_input_dim0 = index_of_dim0 / scales[0];\n      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];\n      index_of_input_dim1 = index_of_dim1 / scales[1];\n      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];\n\n      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;\n\n      float x00 = getInputFloat(input_index);\n      float x10, x01, x11;\n\n      bool end_of_dim0 = false;\n      if (index_of_input_dim0 == (${inputs[0].dims[0]} - 1)) {\n        // It's the end in dimension 0\n        x01 = x00;\n        end_of_dim0 = true;\n      } else {\n        x01 = getInputFloat(input_index + input_pitches[0]);\n      }\n\n      if (index_of_input_dim1 == (input_pitches[0] - 1)) {\n        // It's the end in dimension 1\n        x10 = x00;\n        x11 = x01;\n      }\n      else {\n        x10 = getInputFloat(input_index + 1);\n        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);\n      }\n\n      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);\n      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);\n      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);\n    }`;\n      return {\n        ...upsampleProgramMetadata,\n        output: {dims: outputShape, type: inputs[0].type, textureType: TextureType.unpacked},\n        shaderSource,\n        variables: [{\n          name: 'scales',\n          type: 'int',\n          arrayLength: attributes.scales.length,\n          data: attributes.scales.map(x => Math.ceil(x))\n        }]\n      };\n    };\n\nexport const validateInputs = (inputs: Tensor[], attribute: UpsampleAttributes): void => {\n  if (!inputs || (attribute.opset < 9 && inputs.length !== 1) ||\n      (attribute.opset >= 9 && attribute.opset < 11 && inputs.length !== 2) ||\n      (attribute.opset >= 11 && inputs.length < 2)) {\n    throw new Error('invalid inputs.');\n  }\n\n  if (attribute.scales.length > 0 && inputs[0].dims.length !== attribute.scales.length) {\n    throw new Error('Invalid input shape.');\n  }\n\n  if (inputs[0].type === 'string') {\n    throw new Error('Invalid input tensor types.');\n  }\n};\n\nexport const scalesValidation = (scales: number[], mode: string, isResize: boolean): void => {\n  if (!isResize) {\n    for (const scale of scales) {\n      if (scale < 1) {\n        throw new Error('Scale value should be greater than or equal to 1.');\n      }\n    }\n  } else {\n    for (const scale of scales) {\n      if (scale <= 0) {\n        throw new Error('Scale value should be greater than 0.');\n      }\n    }\n  }\n  if (mode === 'linear' || mode === 'cubic') {\n    if (scales.length !== 2 && (scales.length !== 4 || scales[0] !== 1 || scales[1] !== 1)) {\n      throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic') \\\n        or 4-D inputs with the corresponding outermost 2 scale values being 1 \\\n        in the ${isResize ? 'Resize' : 'Upsample'} opeartor.`);\n    }\n  }\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport {Logger, Profiler} from '../../instrument';\n\nimport {GlslPreprocessor} from './glsl-preprocessor';\nimport {getVertexShaderSource} from './glsl-source';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {Artifact, ProgramInfo, ProgramVariable, TextureData, TextureLayout, VariableInfo} from './types';\nimport {WebGLContext} from './webgl-context';\n\n/**\n * ProgramManager is the main class behind running computations\n * It builds ProgramInfo's into Artifacts\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\n * Uses the artifact to run the computation by calling Draw on\n * the WebGL drawing buffer\n * ProgramManager automatically maps (binds) input variables to their\n * corresponding Location's in the binary program\n */\nexport class ProgramManager {\n  repo: Map<unknown, Artifact>;  // this should be per-session object\n  vertexShader: WebGLShader;\n  attributesBound: boolean;\n\n  constructor(\n      public profiler: Readonly<Profiler>, public glContext: WebGLContext,\n      public textureLayoutStrategy: TextureLayoutStrategy) {\n    this.repo = new Map();\n    this.attributesBound = false;\n  }\n  getArtifact(key: unknown): Artifact|undefined {\n    return this.repo.get(key);\n  }\n  setArtifact(key: unknown, artifact: Artifact): void {\n    this.repo.set(key, artifact);\n  }\n  run(buildArtifact: Artifact, inputs: TextureData[], output: TextureData): void {\n    this.profiler.event('op', `ProgramManager.run ${buildArtifact.programInfo.name ?? 'unknown kernel'}`, () => {\n      const gl = this.glContext.gl;\n      const program = buildArtifact.program;\n      gl.useProgram(program);\n      try {\n        this.bindOutput(output);\n        if (!this.attributesBound) {\n          this.bindAttributes(buildArtifact.attribLocations);\n        }\n        this.bindUniforms(buildArtifact.uniformLocations, buildArtifact.programInfo.variables ?? [], inputs);\n      } catch (err) {\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\n        throw err;\n      }\n      this.profiler.event('backend', 'GlContext.draw()', () => {\n        this.glContext.draw();\n      });\n    }, this.glContext);\n  }\n  dispose(): void {\n    if (this.vertexShader) {\n      this.glContext.deleteShader(this.vertexShader);\n    }\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\n  }\n  build(programInfo: ProgramInfo, inputTextureLayouts: TextureLayout[], outputTextureLayout: TextureLayout): Artifact {\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo, inputTextureLayouts, outputTextureLayout);\n      const fragScript = preprocessor.preprocess();\n      const program = this.compile(fragScript);\n      const artifact = {\n        programInfo,\n        program,\n        uniformLocations: this.getUniformLocations(\n            program, preprocessor.context.programInfo.inputNames, preprocessor.context.programInfo.variables),\n        attribLocations: this.getAttribLocations(program)\n      };\n      return artifact;\n    });\n  }\n  protected compile(fragShaderScript: string): WebGLProgram {\n    if (!this.vertexShader) {\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\n    }\n    if (env.debug) {\n      Logger.verbose('ProrgramManager', `FragShader:\n${fragShaderScript}\n`);\n    }\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\n    this.glContext.deleteShader(fragShader);\n    return program;\n  }\n  bindOutput(td: TextureData): void {\n    const width = td.width;\n    const height = td.height;\n    Logger.verbose(\n        'ProrgramManager',\n        `Binding output texture to Framebuffer: w/h=${width}/${height}, shape=${td.shape}, type=${td.tensor.type}`);\n    this.glContext.attachFramebuffer(td.texture, width, height);\n  }\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\n    const positionHandle = attribLocations.position;\n    const textureCoordHandle = attribLocations.textureCoord;\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\n    this.attributesBound = true;\n  }\n  bindUniforms(uniformLocations: Artifact.UniformLocations, variables: ProgramVariable[], textures: TextureData[]):\n      void {\n    const gl = this.glContext.gl;\n    let texturePosition = 0;\n    for (const {name, type, location, arrayLength} of uniformLocations) {\n      const value = variables.find(v => v.name === name)?.data;\n      if (type !== 'sampler2D' && !value) {\n        throw new Error(`variable '${name}' does not have data defined in program info`);\n      }\n      switch (type) {\n        case 'sampler2D':\n          this.bindTexture(textures[texturePosition], location, texturePosition);\n          texturePosition++;\n          break;\n        case 'float':\n          if (arrayLength) {\n            gl.uniform1fv(location, value as number[]);\n          } else {\n            gl.uniform1f(location, value as number);\n          }\n          break;\n        case 'int':\n          if (arrayLength) {\n            gl.uniform1iv(location, value as number[]);\n          } else {\n            gl.uniform1i(location, value as number);\n          }\n          break;\n        default:\n          throw new Error(`Uniform not implemented: ${type}`);\n      }\n    }\n  }\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\n  }\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\n    return {\n      position: this.getAttribLocation(program, 'position'),\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\n    };\n  }\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\n      Artifact.UniformLocations {\n    const uniformLocations: Artifact.UniformLocations = [];\n    if (samplers) {\n      for (const sampler of samplers) {\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\n      }\n    }\n    if (variables) {\n      for (const variable of variables) {\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\n      }\n    }\n    return uniformLocations;\n  }\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\n    const gl = this.glContext.gl;\n    const reference = gl.getUniformLocation(program, name);\n    if (reference === null) {\n      throw new Error(`Uniform ${name} not found.`);\n    }\n    return reference;\n  }\n  getAttribLocation(program: WebGLProgram, name: string): number {\n    const gl = this.glContext.gl;\n    const attributeLocation: number = gl.getAttribLocation(program, name);\n    return attributeLocation;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from '../../backend';\nimport {Graph} from '../../graph';\nimport {Logger} from '../../instrument';\nimport {Operator} from '../../operators';\nimport {OpSet, resolveOperator} from '../../opset';\nimport {Session} from '../../session';\nimport {Tensor} from '../../tensor';\nimport {WebGLBackend} from '../backend-webgl';\n\nimport {WebGLInferenceHandler} from './inference-handler';\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\nimport {ProgramManager} from './program-manager';\nimport {PreferLogicalStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureManager} from './texture-manager';\nimport {TextureData} from './types';\n\nexport class WebGLSessionHandler implements SessionHandler {\n  programManager: ProgramManager;\n  textureManager: TextureManager;\n  layoutStrategy: TextureLayoutStrategy;\n  packedTextureDataCache: Map<Tensor.Id, TextureData>;\n  unpackedTextureDataCache: Map<Tensor.Id, TextureData>;\n  pack2unpackMap: Map<Tensor.Id, Tensor.Id>;\n  unpack2packMap: Map<Tensor.Id, Tensor.Id>;\n  initializers: Set<Tensor.Id>;\n  pack?: boolean;\n\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\n    this.layoutStrategy = new PreferLogicalStrategy(backend.glContext.maxTextureSize);\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext, this.layoutStrategy);\n    this.textureManager = new TextureManager(\n        backend.glContext, this.layoutStrategy, this.context.profiler,\n        {reuseTextures: backend.textureCacheMode === 'full'});\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache = new Map();\n    this.pack = backend.pack;\n    this.pack2unpackMap = new Map();\n    this.unpack2packMap = new Map();\n  }\n\n  createInferenceHandler() {\n    return new WebGLInferenceHandler(this);\n  }\n  onGraphInitialized(graph: Graph): void {\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\n    this.initializers = new Set(initializers);\n  }\n  isInitializer(tensorId: Tensor.Id): boolean {\n    return this.initializers ? this.initializers.has(tensorId) : false;\n  }\n  addInitializer(tensorId: Tensor.Id): void {\n    this.initializers.add(tensorId);\n  }\n  getTextureData(tensorId: Tensor.Id, isPacked: boolean): TextureData|undefined {\n    if (isPacked) {\n      return this.packedTextureDataCache.get(tensorId);\n    } else {\n      return this.unpackedTextureDataCache.get(tensorId);\n    }\n  }\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData, isPacked = false): void {\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\n    if (isPacked) {\n      this.packedTextureDataCache.set(tensorId, textureData);\n    } else {\n      this.unpackedTextureDataCache.set(tensorId, textureData);\n    }\n  }\n  dispose(): void {\n    this.programManager.dispose();\n    this.textureManager.clearActiveTextures();\n    this.packedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.packedTextureDataCache = new Map();\n    this.unpackedTextureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\n    this.unpackedTextureDataCache = new Map();\n  }\n  resolve(node: Graph.Node, opsets: readonly OpSet[], graph: Graph): Operator {\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\n    return {impl: op.opImpl, context: op.opInit ? op.opInit(node, graph) : node};\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nexport declare namespace Encoder {\n  export interface DataTypeMap {\n    float: Float32Array;\n    byte: Uint8Array;\n    int: Uint32Array;\n  }\n  export type DataType = keyof DataTypeMap;\n  type DataArrayType = DataTypeMap[DataType];\n\n  /* eslint-disable @typescript-eslint/naming-convention */\n  export const enum Usage {\n    Default = 0,\n    UploadOnly,\n    Download4BytesAsFloat32,\n  }\n}\n\n/**\n * Abstraction for mapping data types to texture texlets\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\n * Decoding means how a texlet's channels are mapped to a resulting Float32\n */\nexport interface DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\n  allocate(size: number): Encoder.DataArrayType;\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\n}\n/**\n * WebGL2 data encoder\n * Uses R32F as the format for texlet\n */\nexport class RedFloat32DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.R32F;\n      this.format = gl.RED;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA32F;\n      this.format = gl.RGBA;\n      this.textureType = gl.FLOAT;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\n    let result: Float32Array;\n    let source: Float32Array;\n    if (src.constructor !== Float32Array) {\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\n      source = new Float32Array(src);\n    }\n    if (textureSize * this.channelSize > src.length) {\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\n      source = src as Float32Array;\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\n      source.forEach((v, i) => result[i] = v);\n    } else {\n      source = src as Float32Array;\n      result = source;\n    }\n    return result;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n/**\n * Data encoder for WebGL 1 with support for floating point texture\n */\nexport class RGBAFloatDataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize: number;\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\n    if (channels !== 1 && channels !== 4) {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n    this.internalFormat = gl.RGBA;\n    this.format = gl.RGBA;\n    this.channelSize = channels;\n    this.textureType = textureType || gl.FLOAT;\n  }\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\n    let dest = src;\n    if (this.channelSize === 1) {\n      Logger.verbose('Encoder', 'Exploding into a larger array');\n      dest = this.allocate(textureSize) as Float32Array;\n      src.forEach((v, i) => dest[i * 4] = v);\n    }\n    return dest;\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Float32Array(size * 4);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\n    if (this.channelSize === 1) {\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\n      return filteredData;\n    }\n    return buffer.subarray(0, dataSize) as Float32Array;\n  }\n}\n\nexport class Uint8DataEncoder implements DataEncoder {\n  internalFormat: number;\n  format: number;\n  textureType: number;\n  channelSize = 4;\n  constructor(gl: WebGLRenderingContext, channels = 1) {\n    if (channels === 1) {\n      this.internalFormat = gl.ALPHA;\n      this.format = gl.ALPHA;  // not tested\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else if (channels === 4) {\n      this.internalFormat = gl.RGBA;\n      this.format = gl.RGBA;\n      this.textureType = gl.UNSIGNED_BYTE;\n      this.channelSize = channels;\n    } else {\n      throw new Error(`Invalid number of channels: ${channels}`);\n    }\n  }\n  encode(src: Uint8Array, _textureSize: number): Encoder.DataArrayType {\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\n  }\n  allocate(size: number): Encoder.DataArrayType {\n    return new Uint8Array(size * this.channelSize);\n  }\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\n    if (buffer instanceof Uint8Array) {\n      return buffer.subarray(0, dataSize);\n    }\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\nimport {assert} from '../../util';\n\n/** Layout preferences */\nexport interface WidthHeightPrefs {\n  breakAxis?: number;\n  isPacked?: boolean;\n  reverseWH?: boolean;\n}\n/**\n * TextureLayoutStrategy is an abstraction for different plans\n * for mapping n-dimensional arrays to 2D textures (and back)\n */\nexport interface TextureLayoutStrategy {\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number];\n}\n\n/**\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\n */\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    // scalar tensor\n    if (shape.length === 0) {\n      return [1, 1];\n    }\n    const maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    const totalSize = shape.reduce((a, b) => a * b);\n\n    let width = Math.floor(Math.sqrt(totalSize));\n\n    for (; width < maxTextureSize && width < totalSize; width++) {\n      if (totalSize % width === 0) {\n        break;\n      }\n    }\n\n    if (width >= maxTextureSize || totalSize % width !== 0) {\n      throw new Error(`The given dimensions are outside this GPU's boundaries: ${shape}`);\n    }\n    return [width, totalSize / width];\n  }\n}\n\nexport class PreferLogicalStrategy implements TextureLayoutStrategy {\n  constructor(public maxTextureSize: number) {}\n  computeTextureWH(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const wh = this.computeTexture(shape, prefs);\n    if (prefs && prefs.isPacked) {\n      wh[0] /= 2;\n      wh[1] /= 2;\n    }\n    if (prefs && prefs.reverseWH) {\n      return [wh[1], wh[0]];\n    }\n    return wh;\n  }\n\n  computeTexture(shape: readonly number[], prefs?: WidthHeightPrefs): [number, number] {\n    const isPacked = prefs && prefs.isPacked;\n    // scalar tensor\n    if (shape.length === 0) {\n      return isPacked ? [2, 2] : [1, 1];\n    }\n    let maxTextureSize = this.maxTextureSize;\n    if (prefs && prefs.breakAxis !== undefined) {\n      // check to see if dims fit\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\n        // ignore preferences\n        // continue with default layout\n        Logger.verbose(\n            'TextureLayout',\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\n      } else {\n        return [wsize, hsize];\n      }\n    }\n    let logShape = shape.slice(0);\n    if (isPacked) {\n      maxTextureSize = maxTextureSize * 2;\n\n      // This logic ensures we accurately count the number of packed texels needed\n      // to accommodate the tensor. We can only pack values in the same texel if\n      // they are from adjacent pairs of rows/cols within the same batch. So if a\n      // tensor has 3 rows, we pretend it has 4 rows in order to account for the\n      // fact that the texels containing the third row are half empty.\n      logShape = logShape.map(\n          (d, i) => i >= logShape.length - 2 ? (logShape[i] % 2 === 0 ? logShape[i] : logShape[i] + 1) : logShape[i]);\n\n      // Packed texture height is at least 2 (the channel height of a single\n      // texel).\n      if (logShape.length === 1) {\n        logShape = [2, logShape[0]];\n      }\n    }\n\n    // If logical shape is 2, we don't squeeze, since we want to match physical.\n    if (logShape.length !== 2) {\n      const squeezeResult = squeezeShape(logShape);\n      logShape = squeezeResult.newShape;\n    }\n\n    const size = sizeFromShape(logShape);\n    if (logShape.length <= 1 && size <= maxTextureSize) {\n      return [1, size];\n    } else if (logShape.length === 2 && logShape[0] <= maxTextureSize && logShape[1] <= maxTextureSize) {\n      return logShape as [number, number];\n    } else if (logShape.length === 3 && logShape[0] * logShape[1] <= maxTextureSize && logShape[2] <= maxTextureSize) {\n      return [logShape[0] * logShape[1], logShape[2]];\n    } else if (logShape.length === 3 && logShape[0] <= maxTextureSize && logShape[1] * logShape[2] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2]];\n    } else if (\n        logShape.length === 4 && logShape[0] * logShape[1] * logShape[2] <= maxTextureSize &&\n        logShape[3] <= maxTextureSize) {\n      return [logShape[0] * logShape[1] * logShape[2], logShape[3]];\n    } else if (\n        logShape.length === 4 && logShape[0] <= maxTextureSize &&\n        logShape[1] * logShape[2] * logShape[3] <= maxTextureSize) {\n      return [logShape[0], logShape[1] * logShape[2] * logShape[3]];\n    } else {\n      if (isPacked) {\n        // For packed textures size equals the number of channels required to\n        // accommodate the texture data. However in order to squarify such that\n        // inner dimensions stay even, we rewrite size to equal the number of\n        // texels. Then in the return statement we rehydrate the squarified\n        // dimensions to channel units.\n        return sizeToSquarishShape(size / 4).map(d => d * 2) as [number, number];\n      }\n      return sizeToSquarishShape(size);\n    }\n  }\n}\n\nexport function squeezeShape(shape: number[], axis?: number[]): {newShape: number[]; keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function parseAxisParam(axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : ([] as number[]).concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(isInt),\n      () => 'All values in axis param must be integers but ' +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\nexport function getRowsCols(shape: number[]): [number, number] {\n  if (shape.length === 0) {\n    throw Error('Cannot get rows and columns of an empty shape array.');\n  }\n\n  return [shape.length > 1 ? shape[shape.length - 2] : 1, shape[shape.length - 1]];\n}\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\nexport function getBatchDim(shape: number[], dimsToSkip = 2): number {\n  return sizeFromShape(shape.slice(0, shape.length - dimsToSkip));\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {ShapeUtil} from '../../util';\n\nimport {TextureLayoutStrategy, WidthHeightPrefs} from './texture-layout-strategy';\nimport {TextureLayout, TextureType} from './types';\n\nexport const createTextureLayoutFromTextureType =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[],\n     textureType: TextureType): TextureLayout => {\n      const channel = (textureType === TextureType.unpacked || textureType === TextureType.unpackedReversed) ? 1 : 4;\n      const isPacked = textureType === TextureType.packed;\n      const reverseWH = (textureType === TextureType.unpackedReversed || textureType === TextureType.packed);\n      const breakAxis = textureType === TextureType.packedLastDimension ? shape.length - 1 : undefined;\n      const unpackedShape = textureType === TextureType.packedLastDimension ?\n          shape.map((d, i) => i === shape.length - 1 ? d * 4 : d) :\n          undefined;\n      return createTextureLayoutFromShape(\n          textureLayoutStrategy, shape, channel, unpackedShape, {isPacked, reverseWH, breakAxis});\n    };\n\nexport const calculateTextureWidthAndHeight =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], textureType: TextureType):\n        [number, number] => {\n          const layout = createTextureLayoutFromTextureType(textureLayoutStrategy, shape, textureType);\n          return [layout.width, layout.height];\n        };\n\n/**\n * Create a TextureLayout object from shape.\n */\nexport const createTextureLayoutFromShape =\n    (textureLayoutStrategy: TextureLayoutStrategy, shape: readonly number[], channels: 1|4 = 1,\n     unpackedShape?: readonly number[], prefs?: WidthHeightPrefs): TextureLayout => {\n      const isPacked = !!(prefs && prefs.isPacked);\n      const [width, height] = textureLayoutStrategy.computeTextureWH(isPacked ? unpackedShape || shape : shape, prefs);\n      const rank = shape.length;\n      let inferredDims = shape.slice(0);\n      if (rank === 0) {\n        inferredDims = [1];\n      }\n      if (channels === 1) {\n        // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\n        unpackedShape = shape;\n      } else if (isPacked) {\n        if (channels !== 4) {\n          throw new Error('a packed texture must be 4-channel');\n        }\n        unpackedShape = shape;\n        if (rank > 0) {\n          inferredDims[rank - 1] = Math.ceil(inferredDims[rank - 1] / 2);\n        }\n        if (rank > 1) {\n          inferredDims[rank - 2] = Math.ceil(inferredDims[rank - 2] / 2);\n        }\n      } else if (!unpackedShape) {\n        throw new Error('Unpacked shape is needed when using channels > 1');\n      }\n      return {\n        width,\n        height,\n        channels,\n        isPacked,\n        shape: inferredDims,\n        strides: ShapeUtil.computeStrides(inferredDims),\n        unpackedShape,\n        reversedWH: (prefs && prefs.reverseWH)\n      };\n    };\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger, Profiler} from '../../instrument';\nimport {Tensor} from '../../tensor';\n\nimport {Encoder} from './texture-data-encoder';\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\nimport {TextureData, TextureLayout} from './types';\nimport {WebGLContext} from './webgl-context';\n\nexport interface TextureManagerConfig {\n  reuseTextures?: boolean;\n}\n\n/**\n * TextureManager is the mainly responsible for caching Textures\n * Textures are cached in 2 levels:\n *   1. the texures which are associated with a dataId (from Tensor)\n *    Caching these is crucial to performance. These are In-use Textures\n *   2. textures which are not in use by any current ProgramInfo/Tensor\n *     These are called Free Textures\n * TextureManager is also used to help creating textures. For this it\n * uses WebGLContext and TextureLayoutStrategy\n */\nexport class TextureManager {\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\n  private readonly textureLookup: Map<WebGLTexture, string>;\n  private readonly pendingRead: Map<Tensor.Id, Array<(arr: Tensor.NumberType) => void>> = new Map();\n\n  constructor(\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\n      private config: TextureManagerConfig) {\n    if (config.reuseTextures) {\n      this.inUseTextures = new Map();\n      this.idleTextures = new Map();\n      this.textureLookup = new Map();\n    }\n  }\n  createTextureFromLayout(\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\n    const textureDataType = this.toEncoderType(dataType);\n\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\n    if (layout.isPacked && usage === Encoder.Usage.UploadOnly) {\n      throw new Error('not implemented');\n    }\n    const width = layout.width;\n    const height = layout.height;\n\n    let key: string|undefined;\n    let inUseTextures: WebGLTexture[]|undefined;\n    if (this.config.reuseTextures) {\n      key = `${width}x${height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\n      inUseTextures = this.inUseTextures.get(key);\n      if (!inUseTextures) {\n        inUseTextures = [];\n        this.inUseTextures.set(key, inUseTextures);\n      }\n\n      const idleTextures = this.idleTextures.get(key);\n      if (idleTextures && idleTextures.length > 0) {\n        const texture = idleTextures.pop()!;\n        inUseTextures.push(texture);\n        if (usage === Encoder.Usage.UploadOnly) {\n          this.glContext.updateTexture(texture, width, height, encoder, this.toTextureData(dataType, data)!);\n        }\n        return texture;\n      }\n    }\n\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\n    const texture = this.glContext.allocateTexture(width, height, encoder, this.toTextureData(dataType, data));\n\n    if (this.config.reuseTextures) {\n      inUseTextures!.push(texture);\n      this.textureLookup.set(texture, key!);\n    }\n    return texture;\n  }\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\n    if (!channels) {\n      channels = 1;\n    }\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      return this.toTensorData(dataType, data);\n    });\n  }\n  async readTextureAsync(td: TextureData, dataType: Tensor.DataType, channels?: number): Promise<Tensor.NumberType> {\n    const dataId = td.tensor.dataId;\n    if (!channels) {\n      channels = 1;\n    }\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<Tensor.NumberType>(resolve => subscribers?.push(resolve));\n    }\n    return this.profiler.event('backend', 'TextureManager.readTextureAsync', async () => {\n      this.pendingRead.set(dataId, []);\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\n      // add a fence waiting for the data to be ready\n      await this.glContext.createAndWaitForFence();\n      const data = this.glContext.readTexture(\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\n      const tensorData = this.toTensorData(dataType, data);\n      const subscribers = this.pendingRead.get(dataId);\n      this.pendingRead.delete(dataId);\n      subscribers?.forEach(resolve => resolve(tensorData));\n      return tensorData;\n    });\n  }\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\n      const dataSize = td.shape.reduce((a, b) => a * b);\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\n    });\n  }\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\n    let key: string|undefined;\n    if (this.config.reuseTextures) {\n      key = this.textureLookup.get(textureData.texture);\n      if (key) {\n        if (deleteTexture) {\n          this.textureLookup.delete(key);\n        }\n        const inUseTextures = this.inUseTextures.get(key);\n        if (inUseTextures) {\n          const index = inUseTextures.indexOf(textureData.texture);\n          if (index !== -1) {\n            inUseTextures.splice(index, 1);\n            let idleTextures = this.idleTextures.get(key);\n            if (!idleTextures) {\n              idleTextures = [];\n              this.idleTextures.set(key, idleTextures);\n            }\n            idleTextures.push(textureData.texture);\n          }\n        }\n      }\n    }\n\n    if (!key || deleteTexture) {\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\n      this.glContext.deleteTexture(textureData.texture);\n    }\n  }\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\n    switch (dataType) {\n      case 'int16':\n        return data instanceof Int16Array ? data : Int16Array.from(data);\n      case 'int32':\n        return data instanceof Int32Array ? data : Int32Array.from(data);\n      case 'int8':\n        return data instanceof Int8Array ? data : Int8Array.from(data);\n      case 'uint16':\n        return data instanceof Uint16Array ? data : Uint16Array.from(data);\n      case 'uint32':\n        return data instanceof Uint32Array ? data : Uint32Array.from(data);\n      case 'uint8':\n      case 'bool':\n        return data instanceof Uint8Array ? data : Uint8Array.from(data);\n      case 'float32':\n        return data instanceof Float32Array ? data : Float32Array.from(data);\n      case 'float64':\n        return data instanceof Float64Array ? data : Float64Array.from(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n  }\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\n    if (!data) {\n      return undefined;\n    }\n    return (data instanceof Float32Array) ? data : new Float32Array(data);\n    /*\n    switch (dataType) {\n      case 'int16':\n      case 'int32':\n      case 'uint16':\n      case 'uint32':\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\n      case 'int8':\n      case 'uint8':\n      case 'bool':\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\n      case 'float32':\n      case 'float64':\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\n      default:\n        throw new Error(`TensorData type ${dataType} is not supported`);\n    }\n    */\n  }\n  toEncoderType(_dataType: Tensor.DataType): Encoder.DataType {\n    return 'float';\n    // switch (dataType) {\n    //   case 'int16':\n    //   case 'int32':\n    //   case 'uint16':\n    //   case 'uint32':\n    //     return 'int';\n    //   case 'uint8':\n    //   case 'bool':\n    //     return 'byte';\n    //   case 'float32':\n    //   case 'float64':\n    //     return 'float';\n    //   default:\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\n    // }\n  }\n  clearActiveTextures(): void {\n    this.glContext.clearActiveTextures();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from '../../tensor';\n\n/**\n * Layout info is used for mapping n-dimensional array to 2D textures\n * The layout is created by the TextureLayoutStrategy based on\n * the Tensor's dimensions and strides\n */\nexport interface TextureLayout {\n  width: number;\n  height: number;\n  /**\n   * specify the number of value that encoded in a single pixel\n   */\n  channels: 1|2|3|4;\n  /**\n   * whether in packed mode or not\n   */\n  isPacked?: boolean;\n  /**\n   * the normalized shape\n   */\n  shape: readonly number[];\n  /**\n   * the stride of each dimensions, calculated according to shape\n   */\n  strides: readonly number[];\n  /**\n   * the original shape(dims) of the corresponding tensor\n   */\n  unpackedShape: readonly number[];\n\n  reversedWH?: boolean;\n}\nexport interface TextureData extends TextureLayout {\n  tensor: Tensor;\n  texture: WebGLTexture;\n}\n\nexport enum TextureType {\n  unpacked,              // <-- normal unpacked texture\n  unpackedReversed,      // <-- unpacked texture used in old ONNX.js implementation (deprecated)\n  packed,                // <-- normal packed texture\n  downloadUint8AsFloat,  // <-- ONLY used in texture downloading for iOS devices\n  packedLastDimension    // <-- ONLY used in old ONNX.js Conv implementation for input W (deprecated)\n}\n\nexport interface TensorInfo {\n  id?: Tensor.Id;\n  dims: readonly number[];\n  type: Tensor.DataType;\n  textureType: TextureType;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * A set of metadata of a shader program.\n */\nexport interface ProgramMetadata {\n  /**\n   * the name of the program. used for debugging and profiling\n   */\n  name: string;\n  /**\n   * texture types for each input\n   */\n  inputTypes: TextureType[];\n  /**\n   * names of each input\n   */\n  inputNames: string[];\n  /**\n   * an optional string as a cache hint in the artifact cache\n   */\n  cacheHint?: string;\n}\n\n/**\n * A ProgramInfoLoader allows\n */\nexport interface ProgramInfoLoader extends ProgramMetadata {\n  /**\n   * a function to get the program info\n   */\n  get(): ProgramInfo;\n}\n\n/**\n * A set of data that represent a shader program\n */\nexport interface ProgramInfo extends ProgramMetadata {\n  /**\n   * information of uniform variables\n   */\n  variables?: ProgramVariable[];\n  /**\n   * tensor info for output\n   */\n  output: TensorInfo;\n  /**\n   * the shader's processing source code\n   */\n  shaderSource: string;\n  /**\n   * whether the shader source contains a customized main function implementation\n   */\n  hasMain?: boolean;\n}\n\nexport interface VariableInfo {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface ProgramVariable {\n  type: 'float'|'int';\n  name: string;\n  arrayLength?: number;\n  data: number|number[];\n}\n\n/**\n * Information of uniforms that shader uses\n */\nexport interface UniformInfo {\n  type: 'sampler2D'|VariableInfo['type'];\n  name: string;\n  arrayLength?: number;\n}\n\nexport interface UniformLocation extends UniformInfo {\n  location: WebGLUniformLocation;\n}\n\n/**\n * Artifact is the result of compilation\n * It does not contain input of output data\n * However anything that could be run as a \"program\"\n */\nexport interface Artifact {\n  programInfo: ProgramInfo;\n  program: WebGLProgram;\n  uniformLocations: UniformLocation[];\n  attribLocations: {position: number; textureCoord: number};\n}\nexport declare namespace Artifact {\n  type UniformLocations = Artifact['uniformLocations'];\n  type AttribLocations = Artifact['attribLocations'];\n}\n\nexport interface UniformData {\n  [name: string]: number|number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {assert} from '../../util';\n/**\n * Given a non RGBA shape calculate the R version\n * It is assumed that the dimensions are multiples of given channels\n * NOTE: it is always the last dim that gets packed.\n * @param unpackedShape original shape to create a packed version from\n */\nexport function getPackedShape(unpackedShape: readonly number[]): readonly number[] {\n  const len = unpackedShape.length;\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\n}\n\nexport async function repeatedTry(\n    checkFn: () => boolean, delayFn = (_counter: number) => 0, maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Generates the function name from an input sampler name.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerName(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1);\n}\n\n/**\n * Generates the function name from an input sampler name at output coordinates.\n * @param samplerName Name of the sampler.\n */\nexport function generateShaderFuncNameFromInputSamplerNameAtOutCoords(samplerName: string): string {\n  assert(typeof samplerName !== 'undefined' && samplerName.length !== 0, () => 'empty string found for sampler name');\n  return 'get' + samplerName.charAt(0).toUpperCase() + samplerName.slice(1) + 'AtOutCoords';\n}\n\n/** Returns a new input shape (a copy) that has a squeezed logical shape. */\nexport function squeezeInputShape(inputShape: readonly number[], squeezedShape: number[]): number[] {\n  // Deep copy.\n  let newInputShape: number[] = JSON.parse(JSON.stringify(inputShape));\n  newInputShape = squeezedShape;\n  return newInputShape;\n}\n\n/** Returns a list of squeezed parameters for shader functions */\nexport function getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n\n/** Returns the data type for different ranks. */\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getGlChannels(rank = 6): string[] {\n  return ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Logger} from '../../instrument';\n\nimport {WebGLContext} from './webgl-context';\n\nconst cache: {[contextId: string]: WebGLContext} = {};\n\n/**\n * This factory function creates proper WebGLRenderingContext based on\n * the current browsers capabilities\n * The order is from higher/most recent versions to most basic\n */\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\n  let context: WebGLContext|undefined;\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\n    context = cache.webgl2;\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\n    context = cache.webgl;\n  }\n\n  if (!context) {\n    try {\n      // try to create webgl context from an offscreen canvas\n      const offscreenCanvas = createOffscreenCanvas();\n      context = createNewWebGLContext(offscreenCanvas, contextId);\n    } catch (e) {\n      // if failed, fallback to try to use a normal canvas element\n      const canvas = createCanvas();\n      context = createNewWebGLContext(canvas, contextId);\n    }\n  }\n\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\n  const gl = context.gl;\n\n  cache[contextId] = context;\n\n  if (gl.isContextLost()) {\n    delete cache[contextId];\n    return createWebGLContext(contextId);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return context;\n}\n\nexport function createNewWebGLContext(canvas: HTMLCanvasElement, contextId?: 'webgl'|'webgl2'): WebGLContext {\n  const contextAttributes: WebGLContextAttributes = {\n    alpha: false,\n    depth: false,\n    antialias: false,\n    stencil: false,\n    preserveDrawingBuffer: false,\n    premultipliedAlpha: false,\n    failIfMajorPerformanceCaveat: false\n  };\n  let gl: WebGLRenderingContext|null;\n  const ca = contextAttributes;\n  if (!contextId || contextId === 'webgl2') {\n    gl = canvas.getContext('webgl2', ca);\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 2);\n      } catch (err) {\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\n      }\n    }\n  }\n  if (!contextId || contextId === 'webgl') {\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca) as WebGLRenderingContext;\n    if (gl) {\n      try {\n        return new WebGLContext(gl, 1);\n      } catch (err) {\n        Logger.warning(\n            'GlContextFactory',\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\n      }\n    }\n  }\n\n  throw new Error('WebGL is not supported');\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\ndeclare let OffscreenCanvas: {new (width: number, height: number): HTMLCanvasElement};\n\nfunction createCanvas(): HTMLCanvasElement {\n  if (typeof document === 'undefined') {\n    throw new TypeError('failed to create canvas: document is not supported');\n  }\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  return canvas;\n}\n\nfunction createOffscreenCanvas(): HTMLCanvasElement {\n  if (typeof OffscreenCanvas === 'undefined') {\n    throw new TypeError('failed to create offscreen canvas: OffscreenCanvas is not supported');\n  }\n  return new OffscreenCanvas(1, 1);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {env} from 'onnxruntime-common';\n\nimport * as DataEncoders from './texture-data-encoder';\nimport {DataEncoder, Encoder} from './texture-data-encoder';\nimport {repeatedTry} from './utils';\n\nexport interface FenceContext {\n  query: WebGLSync|null;\n  isFencePassed(): boolean;\n}\n\ntype PollItem = {\n  isDoneFn: () => boolean; resolveFn: () => void;\n};\n\nexport function linearSearchLastTrue(arr: Array<() => boolean>): number {\n  let i = 0;\n  for (; i < arr.length; ++i) {\n    const isDone = arr[i]();\n    if (!isDone) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\n/**\n * Abstraction and wrapper around WebGLRenderingContext and its operations\n */\nexport class WebGLContext {\n  gl: WebGLRenderingContext;\n  version: 1|2;\n\n  private vertexbuffer: WebGLBuffer;\n  private framebuffer: WebGLFramebuffer;\n\n  // WebGL flags and vital parameters\n  private isFloatTextureAttachableToFrameBuffer: boolean;\n  isFloat32DownloadSupported: boolean;\n  isRenderFloat32Supported: boolean;\n  isBlendSupported: boolean;\n  maxTextureSize: number;\n  // private maxCombinedTextureImageUnits: number;\n  private maxTextureImageUnits: number;\n  // private maxCubeMapTextureSize: number;\n  // private shadingLanguageVersion: string;\n  // private webglVendor: string;\n  // private webglVersion: string;\n\n  // WebGL2 flags and vital parameters\n  // private max3DTextureSize: number;\n  // private maxArrayTextureLayers: number;\n  // private maxColorAttachments: number;\n  // private maxDrawBuffers: number;\n\n  // WebGL extensions\n  // eslint-disable-next-line camelcase\n  textureFloatExtension: OES_texture_float|null;\n  // eslint-disable-next-line camelcase\n  textureHalfFloatExtension: OES_texture_half_float|null;\n\n  // WebGL2 extensions\n  colorBufferFloatExtension: unknown|null;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  disjointTimerQueryWebgl2Extension: {TIME_ELAPSED_EXT: GLenum; GPU_DISJOINT_EXT: GLenum}|null;\n\n  private disposed: boolean;\n  private frameBufferBound = false;\n\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\n    this.gl = gl;\n    this.version = version;\n\n    this.getExtensions();\n    this.vertexbuffer = this.createVertexbuffer();\n    this.framebuffer = this.createFramebuffer();\n    this.queryVitalParameters();\n  }\n\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\n    const gl = this.gl;\n    // create the texture\n    const texture = gl.createTexture();\n    // bind the texture so the following methods effect this texture.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    const buffer = data ? encoder.encode(data, width * height) : null;\n    gl.texImage2D(\n        gl.TEXTURE_2D,\n        0,  // Level of detail.\n        encoder.internalFormat, width, height,\n        0,  // Always 0 in OpenGL ES.\n        encoder.format, encoder.textureType, buffer);\n    this.checkError();\n    return texture as WebGLTexture;\n  }\n  updateTexture(\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\n    const gl = this.gl;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    const buffer = encoder.encode(data, width * height);\n    gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,  // level\n        0,  // xoffset\n        0,  // yoffset\n        width, height, encoder.format, encoder.textureType, buffer);\n    this.checkError();\n  }\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\n    const gl = this.gl;\n    // Make it the target for framebuffer operations - including rendering.\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    this.checkError();\n    gl.viewport(0, 0, width, height);\n    gl.scissor(0, 0, width, height);\n  }\n  readTexture(\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\n      channels: number): Encoder.DataArrayType {\n    const gl = this.gl;\n    if (!channels) {\n      channels = 1;\n    }\n    if (!this.frameBufferBound) {\n      this.attachFramebuffer(texture, width, height);\n    }\n    const encoder = this.getEncoder(dataType, channels);\n    const buffer = encoder.allocate(width * height);\n    // bind texture to framebuffer\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.framebufferTexture2D(\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\n        0);  // 0, we aren't using MIPMAPs\n    // TODO: Check if framebuffer is ready\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\n    this.checkError();\n    // unbind FB\n    return encoder.decode(buffer, dataSize);\n  }\n\n  isFramebufferReady(): boolean {\n    // TODO: Implement logic to check if the framebuffer is ready\n    return true;\n  }\n  getActiveTexture(): string {\n    const gl = this.gl;\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\n  }\n  getTextureBinding(): WebGLTexture {\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\n  }\n  getFramebufferBinding(): WebGLFramebuffer {\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n  }\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\n    const gl = this.gl;\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\n    gl.enableVertexAttribArray(positionHandle);\n    if (textureCoordHandle !== -1) {\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\n      gl.enableVertexAttribArray(textureCoordHandle);\n    }\n    this.checkError();\n  }\n  createProgram(\n      vertexShader: WebGLShader,\n      fragShader: WebGLShader,\n      ): WebGLProgram {\n    const gl = this.gl;\n    const program = gl.createProgram()!;\n\n    // the program consists of our shaders\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragShader);\n    gl.linkProgram(program);\n    return program;\n  }\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\n    const gl = this.gl;\n    const shader = gl.createShader(shaderType);\n    if (!shader) {\n      throw new Error(`createShader() returned null with type ${shaderType}`);\n    }\n\n    gl.shaderSource(shader, shaderSource);\n    gl.compileShader(shader);\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}\nShader source:\n${shaderSource}`);\n    }\n    return shader;\n  }\n  deleteShader(shader: WebGLShader): void {\n    this.gl.deleteShader(shader);\n  }\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\n    const gl = this.gl;\n    gl.activeTexture(gl.TEXTURE0 + position);\n    this.checkError();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    this.checkError();\n    gl.uniform1i(uniformHandle, position);\n    this.checkError();\n  }\n  draw(): void {\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\n    this.checkError();\n  }\n  checkError(): void {\n    if (env.debug) {\n      const gl = this.gl;\n      const error = gl.getError();\n      let label = '';\n      switch (error) {\n        case (gl.NO_ERROR):\n          return;\n        case (gl.INVALID_ENUM):\n          label = 'INVALID_ENUM';\n          break;\n        case (gl.INVALID_VALUE):\n          label = 'INVALID_VALUE';\n          break;\n        case (gl.INVALID_OPERATION):\n          label = 'INVALID_OPERATION';\n          break;\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\n          break;\n        case (gl.OUT_OF_MEMORY):\n          label = 'OUT_OF_MEMORY';\n          break;\n        case (gl.CONTEXT_LOST_WEBGL):\n          label = 'CONTEXT_LOST_WEBGL';\n          break;\n        default:\n          label = `Unknown WebGL Error: ${error.toString(16)}`;\n      }\n      throw new Error(label);\n    }\n  }\n  deleteTexture(texture: WebGLTexture): void {\n    this.gl.deleteTexture(texture);\n  }\n  deleteProgram(program: WebGLProgram): void {\n    this.gl.deleteProgram(program);\n  }\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\n    if (this.version === 2) {\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\n    }\n\n    switch (dataType) {\n      case 'float':\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\n        } else {\n          return new DataEncoders.RGBAFloatDataEncoder(\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\n        }\n      case 'int':\n        throw new Error('not implemented');\n      case 'byte':\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\n      default:\n        throw new Error(`Invalid dataType: ${dataType}`);\n    }\n  }\n  clearActiveTextures(): void {\n    const gl = this.gl;\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\n      gl.activeTexture(gl.TEXTURE0 + unit);\n      gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n  }\n  dispose(): void {\n    if (this.disposed) {\n      return;\n    }\n    const gl = this.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteFramebuffer(this.framebuffer);\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\n    gl.deleteBuffer(this.vertexbuffer);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\n    gl.finish();\n    this.disposed = true;\n  }\n\n  private createDefaultGeometry(): Float32Array {\n    // Sets of x,y,z(=0),s,t coordinates.\n    return new Float32Array([\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\n      1.0,  -1.0, 0.0, 1.0, 0.0   // lower right\n    ]);\n  }\n  private createVertexbuffer(): WebGLBuffer {\n    const gl = this.gl;\n    const buffer = gl.createBuffer();\n    if (!buffer) {\n      throw new Error('createBuffer() returned null');\n    }\n    const geometry = this.createDefaultGeometry();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\n    this.checkError();\n    return buffer;\n  }\n  private createFramebuffer(): WebGLFramebuffer {\n    const fb = this.gl.createFramebuffer();\n    if (!fb) {\n      throw new Error('createFramebuffer returned null');\n    }\n    return fb;\n  }\n\n  private queryVitalParameters(): void {\n    const gl = this.gl;\n\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\n\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\n      throw new Error('both float32 and float16 TextureType are not supported');\n    }\n\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\n\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\n    // this.webglVersion = gl.getParameter(gl.VERSION);\n\n    if (this.version === 2) {\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\n    }\n  }\n  private getExtensions(): void {\n    if (this.version === 2) {\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\n      this.disjointTimerQueryWebgl2Extension = this.gl.getExtension('EXT_disjoint_timer_query_webgl2');\n    } else {\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\n    }\n  }\n\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\n    // test whether Float32 texture is supported:\n    // STEP.1 create a float texture\n    const gl = this.gl;\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n    // STEP.2 bind a frame buffer\n    const frameBuffer = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n    // STEP.3 attach texture to framebuffer\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n    // STEP.4 test whether framebuffer is complete\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    gl.deleteTexture(texture);\n    gl.deleteFramebuffer(frameBuffer);\n    return isComplete;\n  }\n\n  private checkRenderFloat32(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  private checkFloat32Download(): boolean {\n    if (this.version === 2) {\n      if (!this.colorBufferFloatExtension) {\n        return false;\n      }\n    } else {\n      if (!this.textureFloatExtension) {\n        return false;\n      }\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\n        return false;\n      }\n    }\n    return this.isFloatTextureAttachableToFrameBuffer;\n  }\n\n  /**\n   * Check whether GL_BLEND is supported\n   */\n  private checkFloat32Blend(): boolean {\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\n    // https://github.com/microsoft/onnxjs/issues/145\n\n    const gl = this.gl;\n\n    let texture: WebGLTexture|null|undefined;\n    let frameBuffer: WebGLFramebuffer|null|undefined;\n    let vertexShader: WebGLShader|null|undefined;\n    let fragmentShader: WebGLShader|null|undefined;\n    let program: WebGLProgram|null|undefined;\n\n    try {\n      texture = gl.createTexture();\n      frameBuffer = gl.createFramebuffer();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n      gl.enable(gl.BLEND);\n\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\n      if (!vertexShader) {\n        return false;\n      }\n      gl.shaderSource(vertexShader, 'void main(){}');\n      gl.compileShader(vertexShader);\n\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n      if (!fragmentShader) {\n        return false;\n      }\n      gl.shaderSource(fragmentShader, 'precision highp float;void main(){gl_FragColor=vec4(0.5);}');\n      gl.compileShader(fragmentShader);\n\n      program = gl.createProgram();\n      if (!program) {\n        return false;\n      }\n      gl.attachShader(program, vertexShader);\n      gl.attachShader(program, fragmentShader);\n      gl.linkProgram(program);\n      gl.useProgram(program);\n\n      gl.drawArrays(gl.POINTS, 0, 1);\n      return gl.getError() === gl.NO_ERROR;\n\n    } finally {\n      gl.disable(gl.BLEND);\n\n      if (program) {\n        gl.deleteProgram(program);\n      }\n      if (vertexShader) {\n        gl.deleteShader(vertexShader);\n      }\n      if (fragmentShader) {\n        gl.deleteShader(fragmentShader);\n      }\n      if (frameBuffer) {\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.deleteFramebuffer(frameBuffer);\n      }\n      if (texture) {\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.deleteTexture(texture);\n      }\n    }\n  }\n\n  beginTimer(): WebGLQuery {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      const query = gl2.createQuery() as WebGLQuery;\n      gl2.beginQuery(ext.TIME_ELAPSED_EXT, query);\n      return query;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported.');\n    }\n  }\n\n  endTimer() {\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n      gl2.endQuery(ext.TIME_ELAPSED_EXT);\n      return;\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n  }\n\n  isTimerResultAvailable(query: WebGLQuery): boolean {\n    let available = false, disjoint = false;\n    if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      const ext = this.disjointTimerQueryWebgl2Extension;\n\n      available = gl2.getQueryParameter(query, gl2.QUERY_RESULT_AVAILABLE);\n      disjoint = gl2.getParameter(ext.GPU_DISJOINT_EXT);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n\n    return available && !disjoint;\n  }\n\n  getTimerResult(query: WebGLQuery): number {\n    let timeElapsed = 0;\n    if (this.version === 2) {\n      const gl2 = this.gl as WebGL2RenderingContext;\n      timeElapsed = gl2.getQueryParameter(query, gl2.QUERY_RESULT);\n      gl2.deleteQuery(query);\n    } else {\n      // TODO: add webgl 1 handling.\n      throw new Error('WebGL1 profiling currently not supported');\n    }\n    // return miliseconds\n    return timeElapsed / 1000000;\n  }\n\n  async waitForQueryAndGetTime(query: WebGLQuery): Promise<number> {\n    await repeatedTry(() => this.isTimerResultAvailable(query));\n    return this.getTimerResult(query);\n  }\n\n  public async createAndWaitForFence(): Promise<void> {\n    const fenceContext = this.createFence(this.gl);\n    return this.pollFence(fenceContext);\n  }\n\n  private createFence(gl: WebGLRenderingContext): FenceContext {\n    let isFencePassed: () => boolean;\n    const gl2 = gl as WebGL2RenderingContext;\n    const query = gl2.fenceSync(gl2.SYNC_GPU_COMMANDS_COMPLETE, 0);\n    gl.flush();\n    if (query === null) {\n      isFencePassed = () => true;\n    } else {\n      isFencePassed = () => {\n        const status = gl2.clientWaitSync(query, 0, 0);\n        return status === gl2.ALREADY_SIGNALED || status === gl2.CONDITION_SATISFIED;\n      };\n    }\n    return {query, isFencePassed};\n  }\n\n  async pollFence(fenceContext: FenceContext) {\n    return new Promise<void>(resolve => {\n      void this.addItemToPoll(() => fenceContext.isFencePassed(), () => resolve());\n    });\n  }\n\n  private itemsToPoll: PollItem[] = [];\n\n  pollItems(): void {\n    // Find the last query that has finished.\n    const index = linearSearchLastTrue(this.itemsToPoll.map(x => x.isDoneFn));\n    for (let i = 0; i <= index; ++i) {\n      const {resolveFn} = this.itemsToPoll[i];\n      resolveFn();\n    }\n    this.itemsToPoll = this.itemsToPoll.slice(index + 1);\n  }\n\n  private async addItemToPoll(isDoneFn: () => boolean, resolveFn: () => void) {\n    this.itemsToPoll.push({isDoneFn, resolveFn});\n    if (this.itemsToPoll.length > 1) {\n      // We already have a running loop that polls.\n      return;\n    }\n    // Start a new loop that polls.\n    await repeatedTry(() => {\n      this.pollItems();\n      // End the loop if no more items to poll.\n      return this.itemsToPoll.length === 0;\n    });\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {SessionHandler} from './backend';\nimport {Graph} from './graph';\nimport {Logger, Profiler} from './instrument';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nclass KernelOp {\n  constructor(public op: Operator, public node: Graph.Node) {}\n}\n\nexport class ExecutionPlan {\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\n    this.initialize(ops);\n  }\n\n  initialize(ops: Operator[]) {\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\n      const graphNodes = this.graph.getNodes();\n      if (graphNodes.length !== ops.length) {\n        throw new Error('The size of nodes and OPs do not match.');\n      }\n\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\n      this.reset();\n\n      // look for starter node(s)\n      this._starter = [];\n      this._ops.forEach((op, i) => {\n        let resolved = true;\n        for (const input of op.node.inputs) {\n          if (\n              !this._values[input]                                   // not an initialized input\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\n          ) {\n            resolved = false;\n            break;\n          }\n        }\n        if (resolved) {\n          this._starter.push(i);\n        }\n      });\n    });\n  }\n\n  reset() {\n    this._values = this.graph.getValues().map(i => i.tensor);\n  }\n\n  async execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\n      // reset mediem result\n      this.reset();\n\n      // create inference handler\n      const inferenceHandler = sessionHandler.createInferenceHandler();\n\n      // populate inputs value\n      const graphInputs = this.graph.getInputIndices();\n      if (modelInputs.length !== graphInputs.length) {\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\n            modelInputs.length} expected: ${graphInputs.length}`);\n      }\n\n      modelInputs.forEach((input, i) => {\n        const index = graphInputs[i];\n        this._values[index] = input;\n      });\n\n      // prepare running sequence\n      const sequence: number[] = this._starter.slice(0);\n\n      // execution iterations\n      const graphValues = this.graph.getValues();\n      const graphNodes = this.graph.getNodes();\n\n      let rear = 0;\n      while (rear < sequence.length) {\n        const thisOpIndex = sequence[rear++];\n        const thisOp = this._ops[thisOpIndex];\n\n        // check input\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\n        if (inputList.indexOf(undefined) !== -1) {\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\n        }\n\n        // run\n        const inputTensors = inputList as Tensor[];\n        Logger.verbose(\n            'ExecPlan',\n            `Runing op:${thisOp.node.name} (${\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\n\n        const outputList = await this.profiler.event(\n            'node', thisOp.node.name, async () => thisOp.op.impl(inferenceHandler, inputTensors, thisOp.op.context));\n\n        // check output\n        if (outputList.length !== thisOp.node.outputs.length) {\n          throw new Error('the size of output does not match model definition.');\n        }\n\n        // fill value\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          if (this._values[j]) {\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\n          }\n          this._values[j] = output;\n        });\n\n        // resolve downstream nodes\n        const downstreamNodes = new Set<number>();\n        outputList.forEach((output, i) => {\n          const j = thisOp.node.outputs[i];\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\n            let resolved = true;\n            for (const k of currentDownstreamNode.inputs) {\n              if (!this._values[k]) {\n                resolved = false;\n                break;\n              }\n            }\n            if (resolved) {\n              downstreamNodes.add(currentDownstreamNodeIndex);\n            }\n          }\n        });\n        sequence.push(...downstreamNodes);\n      }\n\n      const output: Tensor[] = [];\n      for (let i = 0; i < this.graph.getOutputIndices().length; i++) {\n        const outputIndex = this.graph.getOutputIndices()[i];\n        const outputTensor = this._values[outputIndex];\n        if (outputTensor === undefined) {\n          throw new Error(`required output [${outputIndex}] does not have value`);\n        }\n        if (outputIndex === 0) {\n          await outputTensor.getData();\n        } else {\n          // eslint-disable-next-line no-unused-expressions\n          outputTensor.data;\n        }\n        output.push(outputTensor);\n      }\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\n      inferenceHandler.dispose();\n      return output;\n    });\n  }\n\n  _values: Array<Tensor|undefined>;\n  _ops: KernelOp[];\n  _starter: number[];\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {onnx} from 'onnx-proto';\n\nimport {Attribute} from './attribute';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\nimport {LongUtil, MAX_CLIP, MIN_CLIP, ProtoUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Graph {\n  export interface Shape {\n    readonly dims: readonly number[];\n  }\n  export interface ValueType {\n    readonly tensorType: Tensor.DataType;\n    readonly shape: Shape;\n  }\n  export interface Value {\n    // the tensor data. empty for non-initialized inputs\n    readonly tensor?: Tensor;\n\n    // index to the Node where the value comes from. -1 for initializer.\n    readonly from: number;\n\n    // indices to the Nodes where the values go to.\n    readonly to: readonly number[];\n\n    // value type specification. empty for non-input values.\n    readonly type?: ValueType;\n  }\n  export interface Node {\n    // name of the node\n    readonly name: string;\n\n    // the operator type\n    readonly opType: string;\n\n    // indices to the Values where the inputs come from.\n    readonly inputs: readonly number[];\n\n    // indices to the Values where the outpus go to.\n    readonly outputs: readonly number[];\n\n    // the attributes that used by the operator\n    readonly attributes: Attribute;\n  }\n\n  /**\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\n   */\n  export interface Transformer {\n    removeAllIdentityNodes(): void;\n    removeAllDropoutNodes(): void;\n    fuseConvActivationNodes(): void;\n    // TODO: add generic functions to manipulate the graph\n  }\n\n  // an initializer can use transformer to transform the graph\n  export interface Initializer {\n    transformGraph(transformer: Transformer): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Graph {\n  getInputIndices(): readonly number[];\n  getInputNames(): readonly string[];\n  getOutputIndices(): readonly number[];\n  getOutputNames(): readonly string[];\n  getValues(): readonly Graph.Value[];\n  getNodes(): readonly Graph.Node[];\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-redeclare\nexport const Graph = {\n  /**\n   * construct a graph from a graph protobuf type\n   */\n  from: (graphProto: onnx.IGraphProto|ortFbs.Graph, initializer?: Graph.Initializer) =>\n      new GraphImpl(graphProto, initializer),\n};\n\nclass Value implements Graph.Value {\n  constructor(valueInfo?: onnx.IValueInfoProto) {\n    this._from = undefined;\n    this._to = [];\n    this.tensor = undefined;\n    this.type = undefined;\n\n    if (valueInfo) {\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\n    }\n  }\n\n  _from?: number;  // -1 represent from initializer\n  get from() {\n    return this._from!;\n  }\n  _to: number[];\n  get to() {\n    return this._to;\n  }\n  type?: Graph.ValueType;\n  tensor?: Tensor;\n}\n\nclass Node implements Graph.Node {\n  constructor(_nodeProto: onnx.INodeProto|ortFbs.Node, name?: string) {\n    if (_nodeProto instanceof onnx.NodeProto) {\n      this.name = _nodeProto.name;\n      this.opType = _nodeProto.opType;\n      this.attributes = new Attribute(_nodeProto.attribute);\n    } else if (_nodeProto instanceof ortFbs.Node) {\n      this.name = name ?? _nodeProto.name()!;\n      this.opType = _nodeProto.opType()!;\n      this.attributes = new Attribute(ProtoUtil.tensorAttributesFromORTFormat(_nodeProto));\n    }\n\n    this.inputs = [];\n    this.outputs = [];\n    this.executeNode = true;\n  }\n\n  name: string;\n  opType: string;\n  inputs: number[];\n  outputs: number[];\n  attributes: Attribute;\n  executeNode: boolean;\n}\n\nclass GraphImpl implements Graph, Graph.Transformer {\n  private _allData: Value[];\n\n  private _allInputIndices: number[];\n  private _allInputNames: string[];\n\n  private _allOutputIndices: number[];\n  private _allOutputNames: string[];\n\n  private _nodes: Node[];\n\n  constructor(graph: onnx.IGraphProto|ortFbs.Graph, graphInitializer?: Graph.Initializer) {\n    if (!graph) {\n      throw new TypeError('graph is empty');\n    }\n\n    // build the graph - will throw exceptions if something fatal is detected\n    this.buildGraph(graph);\n\n    // execute any transformation logic for the graph (if applicable)\n    this.transformGraph(graphInitializer);\n\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\n    this.checkIsAcyclic();\n  }\n\n  getInputIndices(): readonly number[] {\n    return this._allInputIndices;\n  }\n\n  getInputNames(): readonly string[] {\n    return this._allInputNames;\n  }\n\n  getOutputIndices(): readonly number[] {\n    return this._allOutputIndices;\n  }\n\n  getOutputNames(): readonly string[] {\n    return this._allOutputNames;\n  }\n\n  getValues(): readonly Graph.Value[] {\n    return this._allData;\n  }\n\n  getNodes(): readonly Graph.Node[] {\n    return this._nodes;\n  }\n\n  private buildGraph(graph: onnx.IGraphProto|ortFbs.Graph) {\n    // build the graph - will throw exceptions if something fatal is detected\n    if (graph instanceof onnx.GraphProto) {\n      this.buildGraphFromOnnxFormat(graph);\n    } else if (graph instanceof ortFbs.Graph) {\n      this.buildGraphFromOrtFormat(graph);\n    } else {\n      throw new TypeError('Graph type is not supported.');\n    }\n  }\n  private buildGraphFromOnnxFormat(graph: onnx.IGraphProto) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    if (!graph.input) {\n      throw new Error('missing information in graph: input');\n    }\n    const inputValueNames = [];\n    for (const i of graph.input) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated input name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      inputValueNames.push(i.name!);\n    }\n\n    // scan all initializers\n    if (!graph.initializer) {\n      throw new Error('missing information in graph: initializer');\n    }\n    for (const i of graph.initializer) {\n      let index = dataIndices.get(i.name!);\n      if (index === undefined) {\n        const value = new Value();\n        value.type = {\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\n        };\n        index = this._allData.push(value) - 1;\n        dataIndices.set(i.name!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromProto(i);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    if (!graph.output) {\n      throw new Error('missing information in graph: output');\n    }\n    for (const i of graph.output) {\n      if (dataIndices.has(i.name!)) {\n        throw new Error(`duplicated output name: ${i.name}`);\n      }\n      const currentIndex = this._allData.push(new Value(i)) - 1;\n      dataIndices.set(i.name!, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(i.name!);\n    }\n\n    // scan all nodes\n    if (!graph.node) {\n      throw new Error('missing information in graph: node');\n    }\n    for (const nodeProto of graph.node) {\n      if (!nodeProto.name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            nodeProto.name = name;\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(nodeProto.name)) {\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\n      nodesIndices.set(nodeProto.name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n      if (!nodeProto.output) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (const output of nodeProto.output) {\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType === 'Constant') {\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.node[i];\n\n      if (!nodeProto.input) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (const input of nodeProto.input) {\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          // handle exception when opset > 9 and roi not given\n          if (input === '' && nodeProto.input.length === 3 && nodeProto.opType === 'Resize') {\n            continue;\n          }\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n\n    return true;\n  }\n\n  private buildGraphFromOrtFormat(graph: ortFbs.Graph) {\n    const dataIndices = new Map<string, number>();\n    this._allData = [];\n\n    this._allInputIndices = [];\n    this._allInputNames = [];\n\n    this._allOutputIndices = [];\n    this._allOutputNames = [];\n\n    this._nodes = [];\n\n    const nodesIndices = new Map<string, number>();\n\n    // scan all inputs\n    const inputValueNames = [];\n    for (let i = 0; i < graph.inputsLength(); i++) {\n      const inputName = graph.inputs(i);\n      if (dataIndices.has(inputName)) {\n        throw new Error(`duplicated input name: ${inputName}`);\n      }\n      // Find the input typeInfo from nodeargs\n      for (let j = 0; j < graph.nodeArgsLength(); j++) {\n        if (graph.nodeArgs(j)?.name() === inputName) {\n          const value = new Value();\n          const valueType = graph.nodeArgs(j)?.type()?.valueType();\n          if (valueType !== ortFbs.TypeInfoValue.tensor_type) {\n            throw new Error('Unexpected value type for the nodeArg.');\n          }\n          const valueInfo = graph.nodeArgs(j)!.type()!.value(new ortFbs.TensorTypeAndShape())!;\n          const type = ProtoUtil.tensorDataTypeFromProto(valueInfo.elemType());\n          const shape = valueInfo.shape()!;\n          const dims = [];\n          for (let k = 0; k < shape.dimLength()!; k++) {\n            dims.push(LongUtil.longToNumber(shape.dim(k)!.value()!.dimValue()!));\n          }\n          value.type = {shape: {dims}, tensorType: type};\n          const currentIndex = this._allData.push(value) - 1;\n          dataIndices.set(inputName, currentIndex);\n          inputValueNames.push(inputName);\n        }\n      }\n    }\n    // check initializers\n    for (let i = 0; i < graph.initializersLength(); i++) {\n      const initializer = graph.initializers(i)!;\n      let index = dataIndices.get(initializer.name()!);\n      if (index === undefined) {\n        const value = new Value();\n        const dims = ProtoUtil.tensorDimsFromORTFormat(initializer);\n        const type = ProtoUtil.tensorDataTypeFromProto(initializer.dataType());\n        value.type = {shape: {dims}, tensorType: type};\n        index = this._allData.push(value) - 1;\n        dataIndices.set(initializer.name()!, index);\n      }\n      this._allData[index]._from = -1;\n      this._allData[index].tensor = Tensor.fromOrtTensor(initializer);\n    }\n\n    // filter out input indices\n    for (let i = 0; i < this._allData.length; i++) {\n      if (!this._allData[i].tensor) {\n        this._allInputIndices.push(i);\n        this._allInputNames.push(inputValueNames[i]);\n      }\n    }\n\n    // scan all outputs\n    for (let i = 0; i < graph.outputsLength(); i++) {\n      const outputName = graph.outputs(i);\n      if (dataIndices.has(outputName)) {\n        throw new Error(`duplicated output name: ${outputName}`);\n      }\n      const currentIndex = this._allData.push(new Value()) - 1;\n      dataIndices.set(outputName, currentIndex);\n      this._allOutputIndices.push(currentIndex);\n      this._allOutputNames.push(outputName);\n    }\n\n    // scan all nodes\n    if (!graph.nodes) {\n      throw new Error('missing information in graph: node');\n    }\n    for (let i = 0; i < graph.nodesLength(); i++) {\n      const nodeProto = graph.nodes(i);\n      let name = nodeProto!.name();\n      if (!name) {\n        // assign a name to the node if it doesn't have one\n        for (let pick = 0;; pick++) {\n          name = `unnamed_${nodeProto!.opType()}_${pick}`;\n          if (!nodesIndices.has(name)) {\n            // an unique name is found. break.\n            break;\n          }\n        }\n      }\n\n      if (nodesIndices.has(name)) {\n        throw new Error(`duplicated node name: ${name}`);\n      }\n      const currentIndex = this._nodes.push(new Node(nodeProto!, name)) - 1;\n      nodesIndices.set(name, currentIndex);\n    }\n\n    // scan node's outputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i);\n      if (nodeProto == null) {\n        throw new Error(`No node exists at index ${i}`);\n      }\n      if (nodeProto?.outputsLength() === 0) {\n        throw new Error(`missing output for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto?.outputsLength(); j++) {\n        const output = nodeProto?.outputs(j);\n        let dataIndex = dataIndices.get(output);\n        if (typeof dataIndex === 'undefined') {\n          dataIndex = this._allData.push(new Value()) - 1;\n          dataIndices.set(output, dataIndex);\n        }\n        node.outputs.push(dataIndex);\n\n        if (this._allData[dataIndex]._from !== undefined) {\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\n        }\n        this._allData[dataIndex]._from = i;\n\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\n        // operator and ignore the node from the graph\n        if (nodeProto.opType() === 'Constant') {\n          if (nodeProto.attributesLength() !== 1 || !nodeProto.attributes(0)!.t()) {\n            throw new Error('missing attributes or missing tensor value in attributes for this Constant operator');\n          }\n          if (nodeProto.outputsLength() !== 1) {\n            throw new Error('missing output or incorrect number of outputs for this Constant operator');\n          }\n          node.outputs.pop();\n          node.executeNode = false;\n\n          this._allData[dataIndex]._from = -1;\n          this._allData[dataIndex].tensor = Tensor.fromOrtTensor(nodeProto.attributes(0)!.t()!);\n        }\n      }\n    }\n\n    // scan node's inputs\n    for (let i = 0; i < this._nodes.length; i++) {\n      const node = this._nodes[i];\n      const nodeProto = graph.nodes(i)!;\n\n      if (nodeProto.inputsLength() === 0) {\n        throw new Error(`missing input for node: ${nodeProto.name}`);\n      }\n      for (let j = 0; j < nodeProto.inputsLength()!; j++) {\n        const input = nodeProto.inputs(j)!;\n        const dataIndex = dataIndices.get(input);\n        if (typeof dataIndex === 'undefined') {\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto!.name()}`);\n        }\n        node.inputs.push(dataIndex);\n\n        this._allData[dataIndex]._to.push(i);\n      }\n    }\n  }\n\n  private checkIsAcyclic() {\n    // go through the graph and check for cycles or other fatal inconsistencies\n    const starters: Set<number> = new Set<number>();\n    this._allInputIndices.forEach(i => {\n      const data = this._allData[i];\n      data._to.forEach(j => {\n        starters.add(j);\n      });\n    });\n\n    // Iterative DFS to check for cycles\n    const nodesStack = Array.from(starters);\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\n\n    while (nodesStack.length > 0) {\n      const nodeIndex = nodesStack.pop()!;\n      // this node has now been processed completely. Mark this node 'black' to denote this.\n      if (nodesState[nodeIndex] === 'gray') {\n        nodesState[nodeIndex] = 'black';\n      } else {\n        // this node is under processing stage. mark this node 'gray' to denote this.\n        nodesStack.push(nodeIndex);\n        nodesState[nodeIndex] = 'gray';\n\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\n          const data = this._allData[outgoingEdgeIndex];\n          if (typeof data.tensor !== 'undefined') {\n            throw new Error('node outputs should not be initialized');\n          }\n          if (data._from !== nodeIndex) {\n            throw new Error('from property of the Value object doesn\\'t match index of Node being processed');\n          }\n          data._to.forEach((downstreamNodeIndex) => {\n            // back edge found - cyclic\n            if (nodesState[downstreamNodeIndex] === 'gray') {\n              throw new Error('model graph is cyclic');\n            }\n            // tree edge found - continue processing by adding it to stack\n            else if (nodesState[downstreamNodeIndex] === 'white') {\n              nodesStack.push(downstreamNodeIndex);\n            }\n          });\n        });\n      }\n    }\n  }\n\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\n    // apply common transform\n    this.removeAllIdentityNodes();\n    this.removeAllDropoutNodes();\n    this.fuseConvActivationNodes();\n    // apply initializer specific transform\n    if (graphInitializer) {\n      graphInitializer.transformGraph(this);\n    }\n\n    // finalize graph\n    this.finalizeGraph();\n  }\n\n  /**\n   * finalize the graph.\n   *\n   * this function should be called after all the transformation completed.\n   * this function removes all unnecessary nodes and values from the graph\n   */\n  finalizeGraph() {\n    let offset = 0;\n    // delete all nodes that are not being executed\n    // The graph is represented using these two arrays\n    // this._nodes - Array holding the kernels to execute - each entry is a kernel pointing to this._allData\n    // this._allData - hold 2 fields - to [] & from - these feileds hold the graph map for inputs and outputs per node\n    // newIndices - remapping the graph after reading the flag 'executeNode'\n    const newIndices = new Array<number>(this._nodes.length, 0);\n    let nodePossition = 0;\n\n    for (let i = 0; i < this._nodes.length; i++) {\n      // giving new indexes to the nodes based on execution flag\n      newIndices[i] = nodePossition;\n      if (this._nodes[i].executeNode) {\n        if (nodePossition !== i) {\n          this._nodes[nodePossition] = this._nodes[i];\n        }\n        nodePossition++;\n\n      } else {\n        // delete all output values\n        this._nodes[i].outputs.forEach(ind => {\n          this._allData[ind]._from = -2;\n        });\n      }\n    }\n\n    // removing the unused nodes\n    this._nodes.splice(nodePossition, this._nodes.length - nodePossition);\n\n    // Updating this._allData according to the new this._nodes\n    for (let i = 0; i < this._allData.length; i++) {\n      const currentData = this._allData[i];\n      if (currentData._from !== undefined && currentData._from !== -1 && currentData._from !== -2) {\n        currentData._from = newIndices[currentData._from];\n      }\n\n      for (let j = 0; j < currentData._to.length; j++) {\n        if (currentData._to[j] >= 0) {\n          currentData._to[j] = newIndices[currentData._to[j]];\n        } else {\n          throw new Error('Trying to update a removed node');\n        }\n      }\n    }\n\n    offset = 0;\n    // delete all values that are not being referenced\n    for (let i = 0; i < this._allData.length; i++) {\n      // if current value is neither linked to next node, nor an output value, remove it.\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\n        offset++;\n        this._allData.splice(i, 1);\n        i--;\n        continue;\n      }\n      if (offset > 0) {\n        let ind = -1;\n        // if current value is neither an input value nor an initializer, find the node it's\n        // coming from and update the corresponding node output\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[this._allData[i].from].outputs[ind] = i;\n          }\n        } else {\n          // if current value is an input value, update its reference in inputIndices\n          ind = this._allInputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allInputIndices[ind] = i;\n          }\n        }\n\n        // find the node that the current value is linking to and update its input reference\n        this._allData[i].to.forEach(node => {\n          ind = this._nodes[node].inputs.indexOf(i + offset);\n          if (ind !== -1) {\n            this._nodes[node].inputs[ind] = i;\n          }\n        });\n        if (this._allData[i].to.length === 0) {\n          // if current value is a graph output, update its reference in outputIndices\n          ind = this._allOutputIndices.indexOf(i + offset);\n          if (ind !== -1) {\n            this._allOutputIndices[ind] = i;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Delete the specifed node. Assume the node has one incoming input and the first output connected to other nodes.\n   * An input validation must be done before calling this function.\n   * @param nodeIndex The index of node to be deleted\n   */\n  private deleteNode(nodeIndex: number) {\n    const node = this._nodes[nodeIndex];\n    if (node.outputs.length > 1) {\n      for (let i = 1; i < node.outputs.length; i++) {\n        if (this._allData[node.outputs[i]].to.length > 0) {\n          throw new Error('Node deletion with more than one output connected to other nodes is not supported. ');\n        }\n      }\n    }\n\n    // this node wil not be executed\n    node.executeNode = false;\n    const inputValueIndex = node.inputs[0];\n    const outputValueIndex = node.outputs[0];\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\n\n    // remove this node from the to property of the input Value\n    for (let i = 0; i < node.inputs.length; i++) {\n      const delIndex = this._allData[node.inputs[i]].to.indexOf(nodeIndex);\n      // should not happen\n      if (delIndex === -1) {\n        throw new Error('The Value object doesn\\'t have the current Node in it\\'s \\'to\\' property ');\n      }\n      this._allData[node.inputs[i]].to.splice(delIndex, 1);\n    }\n\n    // clear node indices consuming this output Value\n    this._allData[outputValueIndex]._to = [];\n\n    // if the output of this node is a graph output, adjust the index appropriately\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\n    if (index !== -1) {\n      this._allOutputIndices[index] = inputValueIndex;\n    }\n\n    // override the inputs for nodes consuming this node's output with the input to this node\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\n      for (const nodeIndex of nodesConsumingOutput) {\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\n        // should not happen\n        if (replaceIndex === -1) {\n          throw new Error('The Node object doesn\\'t have the output Value in it\\'s \\'inputs\\' property ');\n        }\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\n        this._allData[inputValueIndex].to.push(nodeIndex);\n      }\n    }\n  }\n\n  removeAllDropoutNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Dropout' nodes so that no time is wasted in execution\n      if (node.opType === 'Dropout') {\n        // the node should have exactly 1 input and 1 or 2 outputs\n        if (node.inputs.length !== 1) {\n          throw new Error('Dropout nodes should only contain one input. ');\n        }\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\n          throw new Error('Dropout nodes should contain either 1 or 2 output(s)');\n        }\n        // the second output should not be referenced by any other node\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\n          throw new Error('Dropout nodes\\'s second output should not be referenced by other nodes');\n        }\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  removeAllIdentityNodes() {\n    let nodeIndex = 0;\n    for (const node of this._nodes) {\n      // weed out 'Identity' nodes so that no time is wasted in execution\n      if (node.opType === 'Identity') {\n        this.deleteNode(nodeIndex);\n      }\n      nodeIndex++;\n    }\n  }\n\n  isActivation(n: Node): boolean {\n    switch (n.opType) {\n      // TODO: add other activation methods\n      case 'Relu':\n      case 'Sigmoid':\n      case 'Clip':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  fuseConvActivationNodes() {\n    for (const node of this._nodes) {\n      if (node.opType === 'Conv') {\n        const next = this._allData[node.outputs[0]]._to;\n        if (next.length === 1 && this.isActivation(this._nodes[next[0]])) {\n          const child = this._nodes[next[0]];\n          if (child.opType === 'Clip') {\n            if (child.inputs.length === 1) {\n              try {\n                node.attributes.set(\n                    'activation_params', 'floats',\n                    [child.attributes.getFloat('min'), child.attributes.getFloat('max')]);\n              } catch (e) {\n                node.attributes.set('activation_params', 'floats', [MIN_CLIP, MAX_CLIP]);\n              }\n            } else if (\n                child.inputs.length >= 3 && this._allData[child.inputs[1]].tensor !== undefined &&\n                this._allData[child.inputs[2]].tensor !== undefined) {\n              node.attributes.set('activation_params', 'floats', [\n                this._allData[child.inputs[1]].tensor!.floatData[0], this._allData[child.inputs[2]].tensor!.floatData[0]\n              ]);\n            } else {\n              // Skip fusion with clip node since clip min and clip max are not coming from initializer\n              continue;\n            }\n          }\n          node.attributes.set('activation', 'string', (child.opType));\n          this.deleteNode(next[0]);\n        }\n      }\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\n\nimport {WebGLContext} from './backends/webgl/webgl-context';\n\nexport declare namespace Logger {\n  export interface SeverityTypeMap {\n    verbose: 'v';\n    info: 'i';\n    warning: 'w';\n    error: 'e';\n    fatal: 'f';\n  }\n\n  export type Severity = keyof SeverityTypeMap;\n\n  export type Provider = 'none'|'console';\n\n  /**\n   * Logging config that used to control the behavior of logger\n   */\n  export interface Config {\n    /**\n     * Specify the logging provider. 'console' by default\n     */\n    provider?: Provider;\n    /**\n     * Specify the minimal logger serverity. 'warning' by default\n     */\n    minimalSeverity?: Logger.Severity;\n    /**\n     * Whether to output date time in log. true by default\n     */\n    logDateTime?: boolean;\n    /**\n     * Whether to output source information (Not yet supported). false by default\n     */\n    logSourceLocation?: boolean;\n  }\n\n  export interface CategorizedLogger {\n    verbose(content: string): void;\n    info(content: string): void;\n    warning(content: string): void;\n    error(content: string): void;\n    fatal(content: string): void;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface Logger {\n  (category: string): Logger.CategorizedLogger;\n\n  verbose(content: string): void;\n  verbose(category: string, content: string): void;\n  info(content: string): void;\n  info(category: string, content: string): void;\n  warning(content: string): void;\n  warning(category: string, content: string): void;\n  error(content: string): void;\n  error(category: string, content: string): void;\n  fatal(content: string): void;\n  fatal(category: string, content: string): void;\n\n  /**\n   * Reset the logger configuration.\n   * @param config specify an optional default config\n   */\n  reset(config?: Logger.Config): void;\n  /**\n   * Set the logger's behavior on the given category\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\n   * '' is specified, the default behavior will be updated.\n   * @param config the config object to indicate the logger's behavior\n   */\n  set(category: string, config: Logger.Config): void;\n\n  /**\n   * Set the logger's behavior from ort-common env\n   * @param env the env used to set logger. Currently only setting loglevel is supported through Env.\n   */\n  setWithEnv(env: Env): void;\n}\n\ninterface LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string): void;\n}\nclass NoOpLoggerProvider implements LoggerProvider {\n  log(_severity: Logger.Severity, _content: string, _category?: string) {\n    // do nothing\n  }\n}\nclass ConsoleLoggerProvider implements LoggerProvider {\n  log(severity: Logger.Severity, content: string, category?: string) {\n    // eslint-disable-next-line no-console\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\n  }\n\n  private color(severity: Logger.Severity) {\n    switch (severity) {\n      case 'verbose':\n        return '\\x1b[34;40mv\\x1b[0m';\n      case 'info':\n        return '\\x1b[32mi\\x1b[0m';\n      case 'warning':\n        return '\\x1b[30;43mw\\x1b[0m';\n      case 'error':\n        return '\\x1b[31;40me\\x1b[0m';\n      case 'fatal':\n        return '\\x1b[101mf\\x1b[0m';\n      default:\n        throw new Error(`unsupported severity: ${severity}`);\n    }\n  }\n}\n\nconst SEVERITY_VALUE = {\n  verbose: 1000,\n  info: 2000,\n  warning: 4000,\n  error: 5000,\n  fatal: 6000\n};\n\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\n  ['none']: new NoOpLoggerProvider(),\n  ['console']: new ConsoleLoggerProvider()\n};\nconst LOGGER_DEFAULT_CONFIG = {\n  provider: 'console',\n  minimalSeverity: 'warning',\n  logDateTime: true,\n  logSourceLocation: false\n};\nlet LOGGER_CONFIG_MAP:\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\n\nfunction log(category: string): Logger.CategorizedLogger;\nfunction log(severity: Logger.Severity, content: string): void;\nfunction log(severity: Logger.Severity, category: string, content: string): void;\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\nfunction log(\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\n  if (arg1 === undefined) {\n    // log(category: string): Logger.CategorizedLogger;\n    return createCategorizedLogger(arg0);\n  } else if (arg2 === undefined) {\n    // log(severity, content);\n    logInternal(arg0 as Logger.Severity, arg1, 1);\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\n    // log(severity, content, stack)\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\n    // log(severity, category, content)\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\n    // log(severity, category, content, stack)\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\n  } else {\n    throw new TypeError('input is valid');\n  }\n}\n\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\n  return {\n    verbose: log.verbose.bind(null, category),\n    info: log.info.bind(null, category),\n    warning: log.warning.bind(null, category),\n    error: log.error.bind(null, category),\n    fatal: log.fatal.bind(null, category)\n  };\n}\n\n// NOTE: argument 'category' is put the last parameter beacause typescript\n// doesn't allow optional argument put in front of required argument. This\n// order is different from a usual logging API.\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\n    return;\n  }\n\n  if (config.logDateTime) {\n    content = `${new Date().toISOString()}|${content}`;\n  }\n\n  if (config.logSourceLocation) {\n    // TODO: calculate source location from 'stack'\n  }\n\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\nnamespace log {\n  export function verbose(content: string): void;\n  export function verbose(category: string, content: string): void;\n  export function verbose(arg0: string, arg1?: string) {\n    log('verbose', arg0, arg1);\n  }\n  export function info(content: string): void;\n  export function info(category: string, content: string): void;\n  export function info(arg0: string, arg1?: string) {\n    log('info', arg0, arg1);\n  }\n  export function warning(content: string): void;\n  export function warning(category: string, content: string): void;\n  export function warning(arg0: string, arg1?: string) {\n    log('warning', arg0, arg1);\n  }\n  export function error(content: string): void;\n  export function error(category: string, content: string): void;\n  export function error(arg0: string, arg1?: string) {\n    log('error', arg0, arg1);\n  }\n  export function fatal(content: string): void;\n  export function fatal(category: string, content: string): void;\n  export function fatal(arg0: string, arg1?: string) {\n    log('fatal', arg0, arg1);\n  }\n\n  export function reset(config?: Logger.Config): void {\n    LOGGER_CONFIG_MAP = {};\n    set('', config || {});\n  }\n  export function set(category: string, config: Logger.Config): void {\n    if (category === '*') {\n      reset(config);\n    } else {\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\n      LOGGER_CONFIG_MAP[category] = {\n        provider: config.provider || previousConfig.provider,\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\n                                                                      config.logSourceLocation\n      };\n    }\n\n    // TODO: we want to support wildcard or regex?\n  }\n\n  export function setWithEnv(env: Env): void {\n    const config: Logger.Config = {};\n    if (env.logLevel) {\n      config.minimalSeverity = env.logLevel as Logger.Severity;\n    }\n    set('', config);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare, @typescript-eslint/naming-convention\nexport const Logger: Logger = log;\n\nexport declare namespace Profiler {\n  export interface Config {\n    maxNumberEvents?: number;\n    flushBatchSize?: number;\n    flushIntervalInMilliseconds?: number;\n  }\n\n  export type EventCategory = 'session'|'node'|'op'|'backend';\n\n  export interface Event {\n    end(): void|Promise<void>;\n  }\n}\n// TODO\n// class WebGLEvent implements Profiler.Event {}\n\nclass Event implements Profiler.Event {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\n      private endCallback: (e: Event) => void|Promise<void>, public timer?: WebGLQuery, public ctx?: WebGLContext) {}\n\n  async end() {\n    return this.endCallback(this);\n  }\n\n  async checkTimer(): Promise<number> {\n    if (this.ctx === undefined || this.timer === undefined) {\n      throw new Error('No webgl timer found');\n    } else {\n      this.ctx.endTimer();\n      return this.ctx.waitForQueryAndGetTime(this.timer);\n    }\n  }\n}\n\nclass EventRecord {\n  constructor(\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\n}\n\nexport class Profiler {\n  static create(config?: Profiler.Config): Profiler {\n    if (config === undefined) {\n      return new this();\n    }\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\n  }\n\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\n    this._started = false;\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\n  }\n\n  // start profiling\n  start() {\n    this._started = true;\n    this._timingEvents = [];\n    this._flushTime = now();\n    this._flushPointer = 0;\n  }\n\n  // stop profiling\n  stop() {\n    this._started = false;\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\n    }\n  }\n\n  // create an event scope for the specific function\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T, ctx?: WebGLContext): T;\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>, ctx?: WebGLContext): Promise<T>;\n\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>, ctx?: WebGLContext): T\n      |Promise<T> {\n    const event = this._started ? this.begin(category, name, ctx) : undefined;\n    let isPromise = false;\n\n    const res = func();\n\n    // we consider a then-able object is a promise\n    if (res && typeof (res as Promise<T>).then === 'function') {\n      isPromise = true;\n      return new Promise<T>((resolve, reject) => {\n        (res as Promise<T>)\n            .then(\n                async value => {  // fulfilled\n                  if (event) {\n                    await event.end();\n                  }\n                  resolve(value);\n                },\n                async reason => {  // rejected\n                  if (event) {\n                    await event.end();\n                  }\n                  reject(reason);\n                });\n      });\n    }\n    if (!isPromise && event) {\n      const eventRes = event.end();\n      if (eventRes && typeof eventRes.then === 'function') {\n        return new Promise<T>((resolve, reject) => {\n          (eventRes).then(\n              () => {  // fulfilled\n                resolve(res);\n              },\n              (reason) => {  // rejected\n                reject(reason);\n              });\n        });\n      }\n    }\n    return res;\n  }\n\n  // begin an event\n  begin(category: Profiler.EventCategory, name: string, ctx?: WebGLContext): Event {\n    if (!this._started) {\n      throw new Error('profiler is not started yet');\n    }\n    if (ctx === undefined) {\n      const startTime = now();\n      this.flush(startTime);\n      return new Event(category, name, startTime, e => this.endSync(e));\n    } else {\n      const timer: WebGLQuery = ctx.beginTimer();\n      return new Event(category, name, 0, async e => this.end(e), timer, ctx);\n    }\n  }\n\n  // end the specific event\n  private async end(event: Event): Promise<void> {\n    const endTime: number = await event.checkTimer();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private endSync(event: Event): void {\n    const endTime: number = now();\n    if (this._timingEvents.length < this._maxNumberEvents) {\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\n      this.flush(endTime);\n    }\n  }\n\n  private logOneEvent(event: EventRecord) {\n    Logger.verbose(\n        `Profiler.${event.category}`,\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\n  }\n\n  private flush(currentTime: number) {\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\n      // should flush when either batch size accumlated or interval elepsed\n\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\n           this._flushPointer < this._timingEvents.length;\n           this._flushPointer++) {\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\n      }\n\n      this._flushTime = now();\n    }\n  }\n\n  get started() {\n    return this._started;\n  }\n  private _started = false;\n  private _timingEvents: EventRecord[];\n\n  private readonly _maxNumberEvents: number;\n\n  private readonly _flushBatchSize: number;\n  private readonly _flushIntervalInMilliseconds: number;\n\n  private _flushTime: number;\n  private _flushPointer = 0;\n}\n\n/**\n * returns a number to represent the current timestamp in a resolution as high as possible.\n */\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {OpSet} from './opset';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {LongUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport class Model {\n  // empty model\n  constructor() {}\n\n  load(buf: Uint8Array, graphInitializer?: Graph.Initializer, isOrtFormat?: boolean): void {\n    if (!isOrtFormat) {\n      // isOrtFormat === false || isOrtFormat === undefined\n      try {\n        this.loadFromOnnxFormat(buf, graphInitializer);\n        return;\n      } catch (e) {\n        if (isOrtFormat !== undefined) {\n          throw e;\n        }\n      }\n    }\n\n    this.loadFromOrtFormat(buf, graphInitializer);\n  }\n\n  private loadFromOnnxFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const modelProto = onnx.ModelProto.decode(buf);\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n\n    this._opsets =\n        modelProto.opsetImport.map(i => ({domain: i.domain as string, version: LongUtil.longToNumber(i.version!)}));\n\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\n  }\n\n  private loadFromOrtFormat(buf: Uint8Array, graphInitializer?: Graph.Initializer): void {\n    const fb = new flatbuffers.ByteBuffer(buf);\n    const ortModel = ortFbs.InferenceSession.getRootAsInferenceSession(fb).model()!;\n    const irVersion = LongUtil.longToNumber(ortModel.irVersion());\n    if (irVersion < 3) {\n      throw new Error('only support ONNX model with IR_VERSION>=3');\n    }\n    this._opsets = [];\n    for (let i = 0; i < ortModel.opsetImportLength(); i++) {\n      const opsetId = ortModel.opsetImport(i)!;\n      this._opsets.push({domain: opsetId?.domain() as string, version: LongUtil.longToNumber(opsetId.version()!)});\n    }\n\n    this._graph = Graph.from(ortModel.graph()!, graphInitializer);\n  }\n\n  private _graph: Graph;\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  private _opsets: OpSet[];\n  get opsets(): readonly OpSet[] {\n    return this._opsets;\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceHandler} from './backend';\nimport {Graph} from './graph';\nimport {Tensor} from './tensor';\n\nexport type OperatorImplementation<T> = (inferenceHandler: InferenceHandler, inputs: Tensor[], context: T) => Tensor[];\nexport type OperatorInitialization<T> = (node: Graph.Node, graph: Graph) => T;\n\nexport interface Operator {\n  readonly impl: OperatorImplementation<unknown>;\n  readonly context: Graph.Node|unknown;\n}\n\nexport const NUMBER_TYPES: readonly Tensor.DataType[] =\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const INT_TYPES: readonly Tensor.DataType[] = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\nexport const FLOAT_TYPES: readonly Tensor.DataType[] = ['float32', 'float64'];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Graph} from './graph';\nimport {OperatorImplementation, OperatorInitialization} from './operators';\n\nexport interface OpSet {\n  domain: string;\n  version: number;\n}\nexport declare namespace OpSet {\n  /**\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\n   */\n  type Domain = ''|'ai.onnx.ml'|'com.microsoft';\n  /**\n   * A resolve rule consists of 4 or 5 items: opType, opSetDomain, versionSelector, operatorImplementation and\n   * operatorInitialization (optional)\n   */\n  type ResolveRule = [\n    string, Domain, string, OperatorImplementation<Graph.Node>\n  ]|[string, Domain, string, OperatorImplementation<unknown>, OperatorInitialization<unknown>];\n}\n\nexport function resolveOperator(node: Graph.Node, opsets: readonly OpSet[], rules: readonly OpSet.ResolveRule[]) {\n  for (const rule of rules) {\n    const opType = rule[0];\n    const domain = rule[1];\n    const versionSelector = rule[2];\n    const opImpl = rule[3];\n    const opInit = rule[4];\n\n    if (node.opType === opType) {  // operator type matches\n      for (const opset of opsets) {\n        // opset '' and 'ai.onnx' are considered the same.\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\n          if (matchSelector(opset.version, versionSelector)) {\n            return {opImpl, opInit};\n          }\n        }\n      }\n    }\n  }\n\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\n}\n\nfunction matchSelector(version: number, selector: string): boolean {\n  if (selector.endsWith('+')) {\n    // minimum version match ('7+' expects version>=7)\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\n    return !isNaN(rangeStart) && rangeStart <= version;\n  } else if (selector.split('-').length === 2) {\n    // range match ('6-8' expects 6<=version<=8)\n    const pair = selector.split('-');\n    const rangeStart = Number.parseInt(pair[0], 10);\n    const rangeEnd = Number.parseInt(pair[1], 10);\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\n  } else {\n    // exact match ('7' expects version===7)\n    return Number.parseInt(selector, 10) === version;\n  }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n/* eslint-disable */\n\nimport {flatbuffers} from 'flatbuffers';\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum AttributeType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    INT = 2,\n    STRING = 3,\n    TENSOR = 4,\n    GRAPH = 5,\n    FLOATS = 6,\n    INTS = 7,\n    STRINGS = 8,\n    TENSORS = 9,\n    GRAPHS = 10,\n    SPARSE_TENSOR = 11,\n    SPARSE_TENSORS = 12\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum DimensionValueType {UNKNOWN = 0, VALUE = 1, PARAM = 2}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TensorDataType {\n    UNDEFINED = 0,\n    FLOAT = 1,\n    UINT8 = 2,\n    INT8 = 3,\n    UINT16 = 4,\n    INT16 = 5,\n    INT32 = 6,\n    INT64 = 7,\n    STRING = 8,\n    BOOL = 9,\n    FLOAT16 = 10,\n    DOUBLE = 11,\n    UINT32 = 12,\n    UINT64 = 13,\n    COMPLEX64 = 14,\n    COMPLEX128 = 15,\n    BFLOAT16 = 16,\n    FLOAT8E4M3FN = 17,\n    FLOAT8E4M3FNUZ = 18,\n    FLOAT8E5M2 = 19,\n    FLOAT8E5M2FNUZ = 20,\n  }\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum NodeType {Primitive = 0, Fused = 1}\n}\n\n/**\n * @enum {number}\n */\nexport namespace onnxruntime.experimental.fbs {\n  export enum TypeInfoValue {NONE = 0, tensor_type = 1, sequence_type = 2, map_type = 3}\n}\n\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Shape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Shape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Shape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Shape= obj\n     * @returns Shape\n     */\n    static getSizePrefixedRootAsShape(bb: flatbuffers.ByteBuffer, obj?: Shape): Shape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Shape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Dimension= obj\n     * @returns onnxruntime.experimental.fbs.Dimension\n     */\n    dim(index: number, obj?: onnxruntime.experimental.fbs.Dimension): onnxruntime.experimental.fbs.Dimension|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Dimension())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    dimLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startShape(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimOffset\n     */\n    static addDim(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, dimOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createShape(builder: flatbuffers.Builder, dimOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Shape.startShape(builder);\n      Shape.addDim(builder, dimOffset);\n      return Shape.endShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Dimension {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Dimension\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Dimension {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Dimension= obj\n     * @returns Dimension\n     */\n    static getSizePrefixedRootAsDimension(bb: flatbuffers.ByteBuffer, obj?: Dimension): Dimension {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Dimension()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.DimensionValue= obj\n     * @returns onnxruntime.experimental.fbs.DimensionValue|null\n     */\n    value(obj?: onnxruntime.experimental.fbs.DimensionValue): onnxruntime.experimental.fbs.DimensionValue|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.DimensionValue())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimension(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimension(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimension(\n        builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset,\n        denotationOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Dimension.startDimension(builder);\n      Dimension.addValue(builder, valueOffset);\n      Dimension.addDenotation(builder, denotationOffset);\n      return Dimension.endDimension(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class DimensionValue {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns DimensionValue\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): DimensionValue {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param DimensionValue= obj\n     * @returns DimensionValue\n     */\n    static getSizePrefixedRootAsDimensionValue(bb: flatbuffers.ByteBuffer, obj?: DimensionValue): DimensionValue {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new DimensionValue()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.DimensionValueType\n     */\n    dimType(): onnxruntime.experimental.fbs.DimensionValueType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    dimValue(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    dimParam(): string|null;\n    dimParam(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    dimParam(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startDimensionValue(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.DimensionValueType dimType\n     */\n    static addDimType(builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType) {\n      builder.addFieldInt8(0, dimType, onnxruntime.experimental.fbs.DimensionValueType.UNKNOWN);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long dimValue\n     */\n    static addDimValue(builder: flatbuffers.Builder, dimValue: flatbuffers.Long) {\n      builder.addFieldInt64(1, dimValue, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimParamOffset\n     */\n    static addDimParam(builder: flatbuffers.Builder, dimParamOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimParamOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endDimensionValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createDimensionValue(\n        builder: flatbuffers.Builder, dimType: onnxruntime.experimental.fbs.DimensionValueType,\n        dimValue: flatbuffers.Long, dimParamOffset: flatbuffers.Offset): flatbuffers.Offset {\n      DimensionValue.startDimensionValue(builder);\n      DimensionValue.addDimType(builder, dimType);\n      DimensionValue.addDimValue(builder, dimValue);\n      DimensionValue.addDimParam(builder, dimParamOffset);\n      return DimensionValue.endDimensionValue(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TensorTypeAndShape {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TensorTypeAndShape\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TensorTypeAndShape {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape): TensorTypeAndShape {\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TensorTypeAndShape= obj\n     * @returns TensorTypeAndShape\n     */\n    static getSizePrefixedRootAsTensorTypeAndShape(bb: flatbuffers.ByteBuffer, obj?: TensorTypeAndShape):\n        TensorTypeAndShape {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TensorTypeAndShape()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    elemType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Shape= obj\n     * @returns onnxruntime.experimental.fbs.Shape|null\n     */\n    shape(obj?: onnxruntime.experimental.fbs.Shape): onnxruntime.experimental.fbs.Shape|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Shape())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensorTypeAndShape(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType elemType\n     */\n    static addElemType(builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, elemType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset shapeOffset\n     */\n    static addShape(builder: flatbuffers.Builder, shapeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, shapeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensorTypeAndShape(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensorTypeAndShape(\n        builder: flatbuffers.Builder, elemType: onnxruntime.experimental.fbs.TensorDataType,\n        shapeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TensorTypeAndShape.startTensorTypeAndShape(builder);\n      TensorTypeAndShape.addElemType(builder, elemType);\n      TensorTypeAndShape.addShape(builder, shapeOffset);\n      return TensorTypeAndShape.endTensorTypeAndShape(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class MapType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns MapType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): MapType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param MapType= obj\n     * @returns MapType\n     */\n    static getSizePrefixedRootAsMapType(bb: flatbuffers.ByteBuffer, obj?: MapType): MapType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new MapType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    keyType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    valueType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startMapType(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType keyType\n     */\n    static addKeyType(builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(0, keyType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueTypeOffset\n     */\n    static addValueType(builder: flatbuffers.Builder, valueTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, valueTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endMapType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createMapType(\n        builder: flatbuffers.Builder, keyType: onnxruntime.experimental.fbs.TensorDataType,\n        valueTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      MapType.startMapType(builder);\n      MapType.addKeyType(builder, keyType);\n      MapType.addValueType(builder, valueTypeOffset);\n      return MapType.endMapType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SequenceType {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SequenceType\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SequenceType {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SequenceType= obj\n     * @returns SequenceType\n     */\n    static getSizePrefixedRootAsSequenceType(bb: flatbuffers.ByteBuffer, obj?: SequenceType): SequenceType {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SequenceType()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    elemType(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSequenceType(builder: flatbuffers.Builder) {\n      builder.startObject(1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset elemTypeOffset\n     */\n    static addElemType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, elemTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSequenceType(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSequenceType(builder: flatbuffers.Builder, elemTypeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SequenceType.startSequenceType(builder);\n      SequenceType.addElemType(builder, elemTypeOffset);\n      return SequenceType.endSequenceType(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class EdgeEnd {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns EdgeEnd\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): EdgeEnd {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      return this.bb!.readUint32(this.bb_pos);\n    }\n\n    /**\n     * @returns number\n     */\n    srcArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 4);\n    }\n\n    /**\n     * @returns number\n     */\n    dstArgIndex(): number {\n      return this.bb!.readInt32(this.bb_pos + 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number node_index\n     * @param number src_arg_index\n     * @param number dst_arg_index\n     * @returns flatbuffers.Offset\n     */\n    static createEdgeEnd(\n        builder: flatbuffers.Builder, node_index: number, src_arg_index: number,\n        dst_arg_index: number): flatbuffers.Offset {\n      builder.prep(4, 12);\n      builder.writeInt32(dst_arg_index);\n      builder.writeInt32(src_arg_index);\n      builder.writeInt32(node_index);\n      return builder.offset();\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class NodeEdge {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns NodeEdge\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): NodeEdge {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param NodeEdge= obj\n     * @returns NodeEdge\n     */\n    static getSizePrefixedRootAsNodeEdge(bb: flatbuffers.ByteBuffer, obj?: NodeEdge): NodeEdge {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new NodeEdge()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    inputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.EdgeEnd= obj\n     * @returns onnxruntime.experimental.fbs.EdgeEnd\n     */\n    outputEdges(index: number, obj?: onnxruntime.experimental.fbs.EdgeEnd): onnxruntime.experimental.fbs.EdgeEnd|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.EdgeEnd())\n                          .__init(this.bb!.__vector(this.bb_pos + offset) + index * 12, this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNodeEdge(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number nodeIndex\n     */\n    static addNodeIndex(builder: flatbuffers.Builder, nodeIndex: number) {\n      builder.addFieldInt32(0, nodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputEdgesOffset\n     */\n    static addInputEdges(builder: flatbuffers.Builder, inputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, inputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputEdgesOffset\n     */\n    static addOutputEdges(builder: flatbuffers.Builder, outputEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, outputEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(12, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNodeEdge(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNodeEdge(\n        builder: flatbuffers.Builder, nodeIndex: number, inputEdgesOffset: flatbuffers.Offset,\n        outputEdgesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      NodeEdge.startNodeEdge(builder);\n      NodeEdge.addNodeIndex(builder, nodeIndex);\n      NodeEdge.addInputEdges(builder, inputEdgesOffset);\n      NodeEdge.addOutputEdges(builder, outputEdgesOffset);\n      return NodeEdge.endNodeEdge(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Node {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Node\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Node {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Node= obj\n     * @returns Node\n     */\n    static getSizePrefixedRootAsNode(bb: flatbuffers.ByteBuffer, obj?: Node): Node {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Node()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    sinceVersion(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    index(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    opType(): string|null;\n    opType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    opType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.NodeType\n     */\n    type(): onnxruntime.experimental.fbs.NodeType {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.NodeType.Primitive;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    executionProviderType(): string|null;\n    executionProviderType(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    executionProviderType(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Attribute= obj\n     * @returns onnxruntime.experimental.fbs.Attribute\n     */\n    attributes(index: number, obj?: onnxruntime.experimental.fbs.Attribute): onnxruntime.experimental.fbs.Attribute\n        |null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Attribute())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    attributesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    inputArgCounts(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    inputArgCountsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Int32Array\n     */\n    inputArgCountsArray(): Int32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ?\n          new Int32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    implicitInputs(index: number): string;\n    implicitInputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    implicitInputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    implicitInputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startNode(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number sinceVersion\n     */\n    static addSinceVersion(builder: flatbuffers.Builder, sinceVersion: number) {\n      builder.addFieldInt32(3, sinceVersion, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number index\n     */\n    static addIndex(builder: flatbuffers.Builder, index: number) {\n      builder.addFieldInt32(4, index, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opTypeOffset\n     */\n    static addOpType(builder: flatbuffers.Builder, opTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, opTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.NodeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.NodeType) {\n      builder.addFieldInt32(6, type, onnxruntime.experimental.fbs.NodeType.Primitive);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset executionProviderTypeOffset\n     */\n    static addExecutionProviderType(builder: flatbuffers.Builder, executionProviderTypeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, executionProviderTypeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset attributesOffset\n     */\n    static addAttributes(builder: flatbuffers.Builder, attributesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, attributesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createAttributesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startAttributesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputArgCountsOffset\n     */\n    static addInputArgCounts(builder: flatbuffers.Builder, inputArgCountsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, inputArgCountsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputArgCountsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputArgCountsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset implicitInputsOffset\n     */\n    static addImplicitInputs(builder: flatbuffers.Builder, implicitInputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, implicitInputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createImplicitInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startImplicitInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endNode(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createNode(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, sinceVersion: number, index: number, opTypeOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.NodeType, executionProviderTypeOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset, attributesOffset: flatbuffers.Offset,\n        inputArgCountsOffset: flatbuffers.Offset, implicitInputsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Node.startNode(builder);\n      Node.addName(builder, nameOffset);\n      Node.addDocString(builder, docStringOffset);\n      Node.addDomain(builder, domainOffset);\n      Node.addSinceVersion(builder, sinceVersion);\n      Node.addIndex(builder, index);\n      Node.addOpType(builder, opTypeOffset);\n      Node.addType(builder, type);\n      Node.addExecutionProviderType(builder, executionProviderTypeOffset);\n      Node.addInputs(builder, inputsOffset);\n      Node.addOutputs(builder, outputsOffset);\n      Node.addAttributes(builder, attributesOffset);\n      Node.addInputArgCounts(builder, inputArgCountsOffset);\n      Node.addImplicitInputs(builder, implicitInputsOffset);\n      return Node.endNode(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class ValueInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns ValueInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): ValueInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param ValueInfo= obj\n     * @returns ValueInfo\n     */\n    static getSizePrefixedRootAsValueInfo(bb: flatbuffers.ByteBuffer, obj?: ValueInfo): ValueInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new ValueInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.TypeInfo= obj\n     * @returns onnxruntime.experimental.fbs.TypeInfo|null\n     */\n    type(obj?: onnxruntime.experimental.fbs.TypeInfo): onnxruntime.experimental.fbs.TypeInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.TypeInfo())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startValueInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset typeOffset\n     */\n    static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, typeOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endValueInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createValueInfo(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        typeOffset: flatbuffers.Offset): flatbuffers.Offset {\n      ValueInfo.startValueInfo(builder);\n      ValueInfo.addName(builder, nameOffset);\n      ValueInfo.addDocString(builder, docStringOffset);\n      ValueInfo.addType(builder, typeOffset);\n      return ValueInfo.endValueInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class TypeInfo {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns TypeInfo\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): TypeInfo {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param TypeInfo= obj\n     * @returns TypeInfo\n     */\n    static getSizePrefixedRootAsTypeInfo(bb: flatbuffers.ByteBuffer, obj?: TypeInfo): TypeInfo {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new TypeInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    denotation(): string|null;\n    denotation(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    denotation(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TypeInfoValue\n     */\n    valueType(): onnxruntime.experimental.fbs.TypeInfoValue {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TypeInfoValue.NONE;\n    }\n\n    /**\n     * @param flatbuffers.Table obj\n     * @returns ?flatbuffers.Table\n     */\n    value<T extends flatbuffers.Table>(obj: T): T|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTypeInfo(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset denotationOffset\n     */\n    static addDenotation(builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, denotationOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TypeInfoValue valueType\n     */\n    static addValueType(builder: flatbuffers.Builder, valueType: onnxruntime.experimental.fbs.TypeInfoValue) {\n      builder.addFieldInt8(1, valueType, onnxruntime.experimental.fbs.TypeInfoValue.NONE);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valueOffset\n     */\n    static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, valueOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTypeInfo(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTypeInfo(\n        builder: flatbuffers.Builder, denotationOffset: flatbuffers.Offset,\n        valueType: onnxruntime.experimental.fbs.TypeInfoValue, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n      TypeInfo.startTypeInfo(builder);\n      TypeInfo.addDenotation(builder, denotationOffset);\n      TypeInfo.addValueType(builder, valueType);\n      TypeInfo.addValue(builder, valueOffset);\n      return TypeInfo.endTypeInfo(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class OperatorSetId {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns OperatorSetId\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): OperatorSetId {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param OperatorSetId= obj\n     * @returns OperatorSetId\n     */\n    static getSizePrefixedRootAsOperatorSetId(bb: flatbuffers.ByteBuffer, obj?: OperatorSetId): OperatorSetId {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new OperatorSetId()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    version(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startOperatorSetId(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long version\n     */\n    static addVersion(builder: flatbuffers.Builder, version: flatbuffers.Long) {\n      builder.addFieldInt64(1, version, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endOperatorSetId(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createOperatorSetId(\n        builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset, version: flatbuffers.Long): flatbuffers.Offset {\n      OperatorSetId.startOperatorSetId(builder);\n      OperatorSetId.addDomain(builder, domainOffset);\n      OperatorSetId.addVersion(builder, version);\n      return OperatorSetId.endOperatorSetId(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Tensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Tensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Tensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Tensor= obj\n     * @returns Tensor\n     */\n    static getSizePrefixedRootAsTensor(bb: flatbuffers.ByteBuffer, obj?: Tensor): Tensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Tensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.TensorDataType\n     */\n    dataType(): onnxruntime.experimental.fbs.TensorDataType {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.TensorDataType.UNDEFINED;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    rawData(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    rawDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint8Array\n     */\n    rawDataArray(): Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ?\n          new Uint8Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    stringData(index: number): string;\n    stringData(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    stringData(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringDataLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startTensor(builder: flatbuffers.Builder) {\n      builder.startObject(6);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.TensorDataType dataType\n     */\n    static addDataType(builder: flatbuffers.Builder, dataType: onnxruntime.experimental.fbs.TensorDataType) {\n      builder.addFieldInt32(3, dataType, onnxruntime.experimental.fbs.TensorDataType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset rawDataOffset\n     */\n    static addRawData(builder: flatbuffers.Builder, rawDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, rawDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createRawDataVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(1, data.length, 1);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt8(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startRawDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(1, numElems, 1);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringDataOffset\n     */\n    static addStringData(builder: flatbuffers.Builder, stringDataOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, stringDataOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringDataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringDataVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createTensor(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset, dataType: onnxruntime.experimental.fbs.TensorDataType,\n        rawDataOffset: flatbuffers.Offset, stringDataOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Tensor.startTensor(builder);\n      Tensor.addName(builder, nameOffset);\n      Tensor.addDocString(builder, docStringOffset);\n      Tensor.addDims(builder, dimsOffset);\n      Tensor.addDataType(builder, dataType);\n      Tensor.addRawData(builder, rawDataOffset);\n      Tensor.addStringData(builder, stringDataOffset);\n      return Tensor.endTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SparseTensor {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SparseTensor\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SparseTensor {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SparseTensor= obj\n     * @returns SparseTensor\n     */\n    static getSizePrefixedRootAsSparseTensor(bb: flatbuffers.ByteBuffer, obj?: SparseTensor): SparseTensor {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SparseTensor()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    values(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    indices(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    dims(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    dimsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSparseTensor(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset valuesOffset\n     */\n    static addValues(builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, valuesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset indicesOffset\n     */\n    static addIndices(builder: flatbuffers.Builder, indicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, indicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset dimsOffset\n     */\n    static addDims(builder: flatbuffers.Builder, dimsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, dimsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createDimsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startDimsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSparseTensor(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSparseTensor(\n        builder: flatbuffers.Builder, valuesOffset: flatbuffers.Offset, indicesOffset: flatbuffers.Offset,\n        dimsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SparseTensor.startSparseTensor(builder);\n      SparseTensor.addValues(builder, valuesOffset);\n      SparseTensor.addIndices(builder, indicesOffset);\n      SparseTensor.addDims(builder, dimsOffset);\n      return SparseTensor.endSparseTensor(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Attribute {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Attribute\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Attribute {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Attribute= obj\n     * @returns Attribute\n     */\n    static getSizePrefixedRootAsAttribute(bb: flatbuffers.ByteBuffer, obj?: Attribute): Attribute {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Attribute()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    name(): string|null;\n    name(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    name(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns onnxruntime.experimental.fbs.AttributeType\n     */\n    type(): onnxruntime.experimental.fbs.AttributeType {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? /**  */ (this.bb!.readInt32(this.bb_pos + offset)) :\n                      onnxruntime.experimental.fbs.AttributeType.UNDEFINED;\n    }\n\n    /**\n     * @returns number\n     */\n    f(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    i(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    s(): string|null;\n    s(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    s(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor|null\n     */\n    t(obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    g(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    floats(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    floatsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Float32Array\n     */\n    floatsArray(): Float32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ?\n          new Float32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    ints(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    intsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 22);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    strings(index: number): string;\n    strings(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    strings(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    stringsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 24);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    tensors(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    tensorsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 26);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph\n     */\n    graphs(index: number, obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    graphsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 28);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startAttribute(builder: flatbuffers.Builder) {\n      builder.startObject(13);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nameOffset\n     */\n    static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param onnxruntime.experimental.fbs.AttributeType type\n     */\n    static addType(builder: flatbuffers.Builder, type: onnxruntime.experimental.fbs.AttributeType) {\n      builder.addFieldInt32(2, type, onnxruntime.experimental.fbs.AttributeType.UNDEFINED);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number f\n     */\n    static addF(builder: flatbuffers.Builder, f: number) {\n      builder.addFieldFloat32(3, f, 0.0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long i\n     */\n    static addI(builder: flatbuffers.Builder, i: flatbuffers.Long) {\n      builder.addFieldInt64(4, i, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sOffset\n     */\n    static addS(builder: flatbuffers.Builder, sOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, sOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tOffset\n     */\n    static addT(builder: flatbuffers.Builder, tOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, tOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset gOffset\n     */\n    static addG(builder: flatbuffers.Builder, gOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, gOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset floatsOffset\n     */\n    static addFloats(builder: flatbuffers.Builder, floatsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, floatsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createFloatsVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addFloat32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startFloatsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset intsOffset\n     */\n    static addInts(builder: flatbuffers.Builder, intsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(9, intsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createIntsVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startIntsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset stringsOffset\n     */\n    static addStrings(builder: flatbuffers.Builder, stringsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(10, stringsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createStringsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startStringsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset tensorsOffset\n     */\n    static addTensors(builder: flatbuffers.Builder, tensorsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(11, tensorsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createTensorsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startTensorsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphsOffset\n     */\n    static addGraphs(builder: flatbuffers.Builder, graphsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(12, graphsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createGraphsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startGraphsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endAttribute(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createAttribute(\n        builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, docStringOffset: flatbuffers.Offset,\n        type: onnxruntime.experimental.fbs.AttributeType, f: number, i: flatbuffers.Long, sOffset: flatbuffers.Offset,\n        tOffset: flatbuffers.Offset, gOffset: flatbuffers.Offset, floatsOffset: flatbuffers.Offset,\n        intsOffset: flatbuffers.Offset, stringsOffset: flatbuffers.Offset, tensorsOffset: flatbuffers.Offset,\n        graphsOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Attribute.startAttribute(builder);\n      Attribute.addName(builder, nameOffset);\n      Attribute.addDocString(builder, docStringOffset);\n      Attribute.addType(builder, type);\n      Attribute.addF(builder, f);\n      Attribute.addI(builder, i);\n      Attribute.addS(builder, sOffset);\n      Attribute.addT(builder, tOffset);\n      Attribute.addG(builder, gOffset);\n      Attribute.addFloats(builder, floatsOffset);\n      Attribute.addInts(builder, intsOffset);\n      Attribute.addStrings(builder, stringsOffset);\n      Attribute.addTensors(builder, tensorsOffset);\n      Attribute.addGraphs(builder, graphsOffset);\n      return Attribute.endAttribute(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Graph {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Graph\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Graph {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Graph= obj\n     * @returns Graph\n     */\n    static getSizePrefixedRootAsGraph(bb: flatbuffers.ByteBuffer, obj?: Graph): Graph {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Graph()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Tensor= obj\n     * @returns onnxruntime.experimental.fbs.Tensor\n     */\n    initializers(index: number, obj?: onnxruntime.experimental.fbs.Tensor): onnxruntime.experimental.fbs.Tensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Tensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    initializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.ValueInfo= obj\n     * @returns onnxruntime.experimental.fbs.ValueInfo\n     */\n    nodeArgs(index: number, obj?: onnxruntime.experimental.fbs.ValueInfo): onnxruntime.experimental.fbs.ValueInfo|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.ValueInfo())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeArgsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.Node= obj\n     * @returns onnxruntime.experimental.fbs.Node\n     */\n    nodes(index: number, obj?: onnxruntime.experimental.fbs.Node): onnxruntime.experimental.fbs.Node|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Node())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    maxNodeIndex(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.readUint32(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.NodeEdge= obj\n     * @returns onnxruntime.experimental.fbs.NodeEdge\n     */\n    nodeEdges(index: number, obj?: onnxruntime.experimental.fbs.NodeEdge): onnxruntime.experimental.fbs.NodeEdge|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? (obj || new onnxruntime.experimental.fbs.NodeEdge())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeEdgesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    inputs(index: number): string;\n    inputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    inputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    inputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array\n     */\n    outputs(index: number): string;\n    outputs(index: number, optionalEncoding: flatbuffers.Encoding): string|Uint8Array;\n    outputs(index: number, optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns number\n     */\n    outputsLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SparseTensor= obj\n     * @returns onnxruntime.experimental.fbs.SparseTensor\n     */\n    sparseInitializers(index: number, obj?: onnxruntime.experimental.fbs.SparseTensor):\n        onnxruntime.experimental.fbs.SparseTensor|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SparseTensor())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    sparseInitializersLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startGraph(builder: flatbuffers.Builder) {\n      builder.startObject(8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset initializersOffset\n     */\n    static addInitializers(builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, initializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeArgsOffset\n     */\n    static addNodeArgs(builder: flatbuffers.Builder, nodeArgsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, nodeArgsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeArgsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeArgsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodesOffset\n     */\n    static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, nodesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number maxNodeIndex\n     */\n    static addMaxNodeIndex(builder: flatbuffers.Builder, maxNodeIndex: number) {\n      builder.addFieldInt32(3, maxNodeIndex, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeEdgesOffset\n     */\n    static addNodeEdges(builder: flatbuffers.Builder, nodeEdgesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, nodeEdgesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeEdgesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeEdgesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset inputsOffset\n     */\n    static addInputs(builder: flatbuffers.Builder, inputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(5, inputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createInputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startInputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset outputsOffset\n     */\n    static addOutputs(builder: flatbuffers.Builder, outputsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, outputsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOutputsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOutputsVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sparseInitializersOffset\n     */\n    static addSparseInitializers(builder: flatbuffers.Builder, sparseInitializersOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, sparseInitializersOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSparseInitializersVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSparseInitializersVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endGraph(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createGraph(\n        builder: flatbuffers.Builder, initializersOffset: flatbuffers.Offset, nodeArgsOffset: flatbuffers.Offset,\n        nodesOffset: flatbuffers.Offset, maxNodeIndex: number, nodeEdgesOffset: flatbuffers.Offset,\n        inputsOffset: flatbuffers.Offset, outputsOffset: flatbuffers.Offset,\n        sparseInitializersOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Graph.startGraph(builder);\n      Graph.addInitializers(builder, initializersOffset);\n      Graph.addNodeArgs(builder, nodeArgsOffset);\n      Graph.addNodes(builder, nodesOffset);\n      Graph.addMaxNodeIndex(builder, maxNodeIndex);\n      Graph.addNodeEdges(builder, nodeEdgesOffset);\n      Graph.addInputs(builder, inputsOffset);\n      Graph.addOutputs(builder, outputsOffset);\n      Graph.addSparseInitializers(builder, sparseInitializersOffset);\n      return Graph.endGraph(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class Model {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns Model\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): Model {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param Model= obj\n     * @returns Model\n     */\n    static getSizePrefixedRootAsModel(bb: flatbuffers.ByteBuffer, obj?: Model): Model {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new Model()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    irVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.OperatorSetId= obj\n     * @returns onnxruntime.experimental.fbs.OperatorSetId\n     */\n    opsetImport(index: number, obj?: onnxruntime.experimental.fbs.OperatorSetId):\n        onnxruntime.experimental.fbs.OperatorSetId|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.OperatorSetId())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    opsetImportLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerName(): string|null;\n    producerName(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerName(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    producerVersion(): string|null;\n    producerVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    producerVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 10);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    domain(): string|null;\n    domain(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    domain(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 12);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @returns flatbuffers.Long\n     */\n    modelVersion(): flatbuffers.Long {\n      let offset = this.bb!.__offset(this.bb_pos, 14);\n      return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    docString(): string|null;\n    docString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    docString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 16);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Graph= obj\n     * @returns onnxruntime.experimental.fbs.Graph|null\n     */\n    graph(obj?: onnxruntime.experimental.fbs.Graph): onnxruntime.experimental.fbs.Graph|null {\n      let offset = this.bb!.__offset(this.bb_pos, 18);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Graph())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphDocString(): string|null;\n    graphDocString(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphDocString(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 20);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startModel(builder: flatbuffers.Builder) {\n      builder.startObject(9);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long irVersion\n     */\n    static addIrVersion(builder: flatbuffers.Builder, irVersion: flatbuffers.Long) {\n      builder.addFieldInt64(0, irVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset opsetImportOffset\n     */\n    static addOpsetImport(builder: flatbuffers.Builder, opsetImportOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, opsetImportOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createOpsetImportVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startOpsetImportVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerNameOffset\n     */\n    static addProducerName(builder: flatbuffers.Builder, producerNameOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, producerNameOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset producerVersionOffset\n     */\n    static addProducerVersion(builder: flatbuffers.Builder, producerVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(3, producerVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset domainOffset\n     */\n    static addDomain(builder: flatbuffers.Builder, domainOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(4, domainOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Long modelVersion\n     */\n    static addModelVersion(builder: flatbuffers.Builder, modelVersion: flatbuffers.Long) {\n      builder.addFieldInt64(5, modelVersion, builder.createLong(0, 0));\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset docStringOffset\n     */\n    static addDocString(builder: flatbuffers.Builder, docStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(6, docStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphOffset\n     */\n    static addGraph(builder: flatbuffers.Builder, graphOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(7, graphOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphDocStringOffset\n     */\n    static addGraphDocString(builder: flatbuffers.Builder, graphDocStringOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(8, graphDocStringOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endModel(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createModel(\n        builder: flatbuffers.Builder, irVersion: flatbuffers.Long, opsetImportOffset: flatbuffers.Offset,\n        producerNameOffset: flatbuffers.Offset, producerVersionOffset: flatbuffers.Offset,\n        domainOffset: flatbuffers.Offset, modelVersion: flatbuffers.Long, docStringOffset: flatbuffers.Offset,\n        graphOffset: flatbuffers.Offset, graphDocStringOffset: flatbuffers.Offset): flatbuffers.Offset {\n      Model.startModel(builder);\n      Model.addIrVersion(builder, irVersion);\n      Model.addOpsetImport(builder, opsetImportOffset);\n      Model.addProducerName(builder, producerNameOffset);\n      Model.addProducerVersion(builder, producerVersionOffset);\n      Model.addDomain(builder, domainOffset);\n      Model.addModelVersion(builder, modelVersion);\n      Model.addDocString(builder, docStringOffset);\n      Model.addGraph(builder, graphOffset);\n      Model.addGraphDocString(builder, graphDocStringOffset);\n      return Model.endModel(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class KernelCreateInfos {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns KernelCreateInfos\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): KernelCreateInfos {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos): KernelCreateInfos {\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param KernelCreateInfos= obj\n     * @returns KernelCreateInfos\n     */\n    static getSizePrefixedRootAsKernelCreateInfos(bb: flatbuffers.ByteBuffer, obj?: KernelCreateInfos):\n        KernelCreateInfos {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new KernelCreateInfos()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param number index\n     * @returns number\n     */\n    nodeIndices(index: number): number|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.readUint32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n    }\n\n    /**\n     * @returns number\n     */\n    nodeIndicesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @returns Uint32Array\n     */\n    nodeIndicesArray(): Uint32Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ?\n          new Uint32Array(\n              this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset),\n              this.bb!.__vector_len(this.bb_pos + offset)) :\n          null;\n    }\n\n    /**\n     * @param number index\n     * @returns flatbuffers.Long\n     */\n    kernelDefHashes(index: number): flatbuffers.Long|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.readUint64(this.bb!.__vector(this.bb_pos + offset) + index * 8) :\n                      this.bb!.createLong(0, 0);\n    }\n\n    /**\n     * @returns number\n     */\n    kernelDefHashesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startKernelCreateInfos(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset nodeIndicesOffset\n     */\n    static addNodeIndices(builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, nodeIndicesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<number> data\n     * @returns flatbuffers.Offset\n     */\n    static createNodeIndicesVector(builder: flatbuffers.Builder, data: number[]|Uint8Array): flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt32(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startNodeIndicesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelDefHashesOffset\n     */\n    static addKernelDefHashes(builder: flatbuffers.Builder, kernelDefHashesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, kernelDefHashesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Long> data\n     * @returns flatbuffers.Offset\n     */\n    static createKernelDefHashesVector(builder: flatbuffers.Builder, data: flatbuffers.Long[]): flatbuffers.Offset {\n      builder.startVector(8, data.length, 8);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addInt64(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startKernelDefHashesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(8, numElems, 8);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endKernelCreateInfos(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createKernelCreateInfos(\n        builder: flatbuffers.Builder, nodeIndicesOffset: flatbuffers.Offset,\n        kernelDefHashesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      KernelCreateInfos.startKernelCreateInfos(builder);\n      KernelCreateInfos.addNodeIndices(builder, nodeIndicesOffset);\n      KernelCreateInfos.addKernelDefHashes(builder, kernelDefHashesOffset);\n      return KernelCreateInfos.endKernelCreateInfos(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SubGraphSessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SubGraphSessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SubGraphSessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState): SubGraphSessionState {\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SubGraphSessionState= obj\n     * @returns SubGraphSessionState\n     */\n    static getSizePrefixedRootAsSubGraphSessionState(bb: flatbuffers.ByteBuffer, obj?: SubGraphSessionState):\n        SubGraphSessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SubGraphSessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    graphId(): string|null;\n    graphId(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    graphId(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSubGraphSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset graphIdOffset\n     */\n    static addGraphId(builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, graphIdOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSubGraphSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      builder.requiredField(offset, 4);  // graph_id\n      return offset;\n    }\n\n    static createSubGraphSessionState(\n        builder: flatbuffers.Builder, graphIdOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SubGraphSessionState.startSubGraphSessionState(builder);\n      SubGraphSessionState.addGraphId(builder, graphIdOffset);\n      SubGraphSessionState.addSessionState(builder, sessionStateOffset);\n      return SubGraphSessionState.endSubGraphSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class SessionState {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns SessionState\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): SessionState {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param SessionState= obj\n     * @returns SessionState\n     */\n    static getSizePrefixedRootAsSessionState(bb: flatbuffers.ByteBuffer, obj?: SessionState): SessionState {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new SessionState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.KernelCreateInfos= obj\n     * @returns onnxruntime.experimental.fbs.KernelCreateInfos|null\n     */\n    kernels(obj?: onnxruntime.experimental.fbs.KernelCreateInfos): onnxruntime.experimental.fbs.KernelCreateInfos|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? (obj || new onnxruntime.experimental.fbs.KernelCreateInfos())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param number index\n     * @param onnxruntime.experimental.fbs.SubGraphSessionState= obj\n     * @returns onnxruntime.experimental.fbs.SubGraphSessionState\n     */\n    subGraphSessionStates(index: number, obj?: onnxruntime.experimental.fbs.SubGraphSessionState):\n        onnxruntime.experimental.fbs.SubGraphSessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SubGraphSessionState())\n                          .__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @returns number\n     */\n    subGraphSessionStatesLength(): number {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startSessionState(builder: flatbuffers.Builder) {\n      builder.startObject(2);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset kernelsOffset\n     */\n    static addKernels(builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, kernelsOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset subGraphSessionStatesOffset\n     */\n    static addSubGraphSessionStates(builder: flatbuffers.Builder, subGraphSessionStatesOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, subGraphSessionStatesOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param Array.<flatbuffers.Offset> data\n     * @returns flatbuffers.Offset\n     */\n    static createSubGraphSessionStatesVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]):\n        flatbuffers.Offset {\n      builder.startVector(4, data.length, 4);\n      for (let i = data.length - 1; i >= 0; i--) {\n        builder.addOffset(data[i]);\n      }\n      return builder.endVector();\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param number numElems\n     */\n    static startSubGraphSessionStatesVector(builder: flatbuffers.Builder, numElems: number) {\n      builder.startVector(4, numElems, 4);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endSessionState(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    static createSessionState(\n        builder: flatbuffers.Builder, kernelsOffset: flatbuffers.Offset,\n        subGraphSessionStatesOffset: flatbuffers.Offset): flatbuffers.Offset {\n      SessionState.startSessionState(builder);\n      SessionState.addKernels(builder, kernelsOffset);\n      SessionState.addSubGraphSessionStates(builder, subGraphSessionStatesOffset);\n      return SessionState.endSessionState(builder);\n    }\n  }\n}\n/**\n * @constructor\n */\nexport namespace onnxruntime.experimental.fbs {\n  export class InferenceSession {\n    bb: flatbuffers.ByteBuffer|null = null;\n\n    bb_pos = 0;\n    /**\n     * @param number i\n     * @param flatbuffers.ByteBuffer bb\n     * @returns InferenceSession\n     */\n    __init(i: number, bb: flatbuffers.ByteBuffer): InferenceSession {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @param InferenceSession= obj\n     * @returns InferenceSession\n     */\n    static getSizePrefixedRootAsInferenceSession(bb: flatbuffers.ByteBuffer, obj?: InferenceSession): InferenceSession {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new InferenceSession()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n\n    /**\n     * @param flatbuffers.ByteBuffer bb\n     * @returns boolean\n     */\n    static bufferHasIdentifier(bb: flatbuffers.ByteBuffer): boolean {\n      return bb.__has_identifier('ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Encoding= optionalEncoding\n     * @returns string|Uint8Array|null\n     */\n    ortVersion(): string|null;\n    ortVersion(optionalEncoding: flatbuffers.Encoding): string|Uint8Array|null;\n    ortVersion(optionalEncoding?: any): string|Uint8Array|null {\n      let offset = this.bb!.__offset(this.bb_pos, 4);\n      return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.Model= obj\n     * @returns onnxruntime.experimental.fbs.Model|null\n     */\n    model(obj?: onnxruntime.experimental.fbs.Model): onnxruntime.experimental.fbs.Model|null {\n      let offset = this.bb!.__offset(this.bb_pos, 6);\n      return offset ? (obj || new onnxruntime.experimental.fbs.Model())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param onnxruntime.experimental.fbs.SessionState= obj\n     * @returns onnxruntime.experimental.fbs.SessionState|null\n     */\n    sessionState(obj?: onnxruntime.experimental.fbs.SessionState): onnxruntime.experimental.fbs.SessionState|null {\n      let offset = this.bb!.__offset(this.bb_pos, 8);\n      return offset ? (obj || new onnxruntime.experimental.fbs.SessionState())\n                          .__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) :\n                      null;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     */\n    static startInferenceSession(builder: flatbuffers.Builder) {\n      builder.startObject(3);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset ortVersionOffset\n     */\n    static addOrtVersion(builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(0, ortVersionOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset modelOffset\n     */\n    static addModel(builder: flatbuffers.Builder, modelOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(1, modelOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset sessionStateOffset\n     */\n    static addSessionState(builder: flatbuffers.Builder, sessionStateOffset: flatbuffers.Offset) {\n      builder.addFieldOffset(2, sessionStateOffset, 0);\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @returns flatbuffers.Offset\n     */\n    static endInferenceSession(builder: flatbuffers.Builder): flatbuffers.Offset {\n      let offset = builder.endObject();\n      return offset;\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM');\n    }\n\n    /**\n     * @param flatbuffers.Builder builder\n     * @param flatbuffers.Offset offset\n     */\n    static finishSizePrefixedInferenceSessionBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n      builder.finish(offset, 'ORTM', true);\n    }\n\n    static createInferenceSession(\n        builder: flatbuffers.Builder, ortVersionOffset: flatbuffers.Offset, modelOffset: flatbuffers.Offset,\n        sessionStateOffset: flatbuffers.Offset): flatbuffers.Offset {\n      InferenceSession.startInferenceSession(builder);\n      InferenceSession.addOrtVersion(builder, ortVersionOffset);\n      InferenceSession.addModel(builder, modelOffset);\n      InferenceSession.addSessionState(builder, sessionStateOffset);\n      return InferenceSession.endInferenceSession(builder);\n    }\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\n\nimport {Session} from './session';\nimport {Tensor as OnnxjsTensor} from './tensor';\n\nexport class OnnxjsSessionHandler implements SessionHandler {\n  constructor(private session: Session) {\n    this.inputNames = this.session.inputNames;\n    this.outputNames = this.session.outputNames;\n  }\n\n  async dispose(): Promise<void> {}\n  inputNames: readonly string[];\n  outputNames: readonly string[];\n  async run(\n      feeds: SessionHandler.FeedsType, _fetches: SessionHandler.FetchesType,\n      _options: InferenceSession.RunOptions): Promise<SessionHandler.ReturnType> {\n    const inputMap = new Map<string, OnnxjsTensor>();\n    for (const name in feeds) {\n      if (Object.hasOwnProperty.call(feeds, name)) {\n        const feed = feeds[name];\n        inputMap.set(\n            name,\n            new OnnxjsTensor(\n                feed.dims, feed.type as OnnxjsTensor.DataType, undefined, undefined,\n                feed.data as OnnxjsTensor.NumberType));\n      }\n    }\n    const outputMap = await this.session.run(inputMap);\n    const output: SessionHandler.ReturnType = {};\n    outputMap.forEach((tensor, name) => {\n      output[name] = new Tensor(tensor.type, tensor.data, tensor.dims);\n    });\n    return output;\n  }\n  startProfiling(): void {\n    this.session.startProfiling();\n  }\n  endProfiling(): void {\n    this.session.endProfiling();\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {promisify} from 'util';\n\nimport {resolveBackend, SessionHandlerType} from './backend';\nimport {ExecutionPlan} from './execution-plan';\nimport {Graph} from './graph';\nimport {Profiler} from './instrument';\nimport {Model} from './model';\nimport {Operator} from './operators';\nimport {Tensor} from './tensor';\n\nexport declare namespace Session {\n  export interface Config {\n    backendHint?: string;\n    profiler?: Profiler.Config;\n  }\n\n  export interface Context {\n    profiler: Readonly<Profiler>;\n    graphInputTypes?: Tensor.DataType[];\n    graphInputDims?: Array<readonly number[]>;\n  }\n}\n\nexport class Session {\n  constructor(config: Session.Config = {}) {\n    this._initialized = false;\n    this.backendHint = config.backendHint;\n    this.profiler = Profiler.create(config.profiler);\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\n  }\n\n  get inputNames(): readonly string[] {\n    return this._model.graph.getInputNames();\n  }\n  get outputNames(): readonly string[] {\n    return this._model.graph.getOutputNames();\n  }\n\n  startProfiling() {\n    this.profiler.start();\n  }\n\n  endProfiling() {\n    this.profiler.stop();\n  }\n\n  async loadModel(uri: string): Promise<void>;\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\n  async loadModel(buffer: Uint8Array): Promise<void>;\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\n    await this.profiler.event('session', 'Session.loadModel', async () => {\n      // resolve backend and session handler\n      const backend = await resolveBackend(this.backendHint);\n      this.sessionHandler = backend.createSessionHandler(this.context);\n\n      this._model = new Model();\n      if (typeof arg === 'string') {\n        const isOrtFormat = arg.endsWith('.ort');\n        if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n          // node\n          const buf = await promisify(readFile)(arg);\n          this.initialize(buf, isOrtFormat);\n        } else {\n          // browser\n          const response = await fetch(arg);\n          const buf = await response.arrayBuffer();\n          this.initialize(new Uint8Array(buf), isOrtFormat);\n        }\n      } else if (!ArrayBuffer.isView(arg)) {\n        // load model from ArrayBuffer\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\n        this.initialize(arr);\n      } else {\n        // load model from Uint8array\n        this.initialize(arg);\n      }\n    });\n  }\n\n  private initialize(modelProtoBlob: Uint8Array, isOrtFormat?: boolean): void {\n    if (this._initialized) {\n      throw new Error('already initialized');\n    }\n\n    this.profiler.event('session', 'Session.initialize', () => {\n      // load graph\n      const graphInitializer =\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\n      this._model.load(modelProtoBlob, graphInitializer, isOrtFormat);\n\n      // graph is completely initialzied at this stage , let the interested handlers know\n      if (this.sessionHandler.onGraphInitialized) {\n        this.sessionHandler.onGraphInitialized(this._model.graph);\n      }\n      // initialize each operator in the graph\n      this.initializeOps(this._model.graph);\n\n      // instantiate an ExecutionPlan object to be used by the Session object\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\n    });\n\n    this._initialized = true;\n  }\n\n  async run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\n    if (!this._initialized) {\n      throw new Error('session not initialized yet');\n    }\n\n    return this.profiler.event('session', 'Session.run', async () => {\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\n\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\n\n      return this.createOutput(outputTensors);\n    });\n  }\n\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\n    const modelInputNames = this._model.graph.getInputNames();\n\n    // normalize inputs\n    // inputs: Tensor[]\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== modelInputNames.length) {\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\n      }\n    }\n    // convert map to array\n    // inputs: Map<string, Tensor>\n    else {\n      if (inputs.size !== modelInputNames.length) {\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\n      }\n\n      const sortedInputs = new Array<Tensor>(inputs.size);\n      let sortedInputsIndex = 0;\n      for (let i = 0; i < modelInputNames.length; ++i) {\n        const tensor = inputs.get(modelInputNames[i]);\n        if (!tensor) {\n          throw new Error(`missing input tensor for: '${name}'`);\n        }\n        sortedInputs[sortedInputsIndex++] = tensor;\n      }\n\n      inputs = sortedInputs;\n    }\n\n    // validate dims requirements\n    // First session run - graph input data is not cached for the session\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\n        this.context.graphInputDims.length === 0) {\n      const modelInputIndices = this._model.graph.getInputIndices();\n      const modelValues = this._model.graph.getValues();\n\n      const graphInputDims = new Array<readonly number[]>(modelInputIndices.length);\n\n      for (let i = 0; i < modelInputIndices.length; ++i) {\n        const graphInput = modelValues[modelInputIndices[i]];\n        graphInputDims[i] = graphInput.type!.shape.dims;\n\n        // cached for second and subsequent runs.\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\n        this.context.graphInputDims!.push(inputs[i].dims);\n      }\n\n      this.validateInputTensorDims(graphInputDims, inputs, true);\n    }\n\n    // Second and subsequent session runs - graph input data is cached for the session\n    else {\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\n    }\n\n    // validate types requirement\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\n\n    return inputs;\n  }\n\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedType = graphInputTypes[i];\n      const actualType = givenInputs[i].type;\n      if (expectedType !== actualType) {\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\n      }\n    }\n  }\n\n  private validateInputTensorDims(\n      graphInputDims: Array<readonly number[]>, givenInputs: Tensor[], noneDimSupported: boolean) {\n    for (let i = 0; i < givenInputs.length; i++) {\n      const expectedDims = graphInputDims[i];\n      const actualDims = givenInputs[i].dims;\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\n            actualDims.join(',')}]`);\n      }\n    }\n  }\n\n  private compareTensorDims(expectedDims: readonly number[], actualDims: readonly number[], noneDimSupported: boolean):\n      boolean {\n    if (expectedDims.length !== actualDims.length) {\n      return false;\n    }\n\n    for (let i = 0; i < expectedDims.length; ++i) {\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\n        // data shape mis-match AND not a 'None' dimension.\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\n    const modelOutputNames = this._model.graph.getOutputNames();\n    if (outputTensors.length !== modelOutputNames.length) {\n      throw new Error('expected number of outputs do not match number of generated outputs');\n    }\n\n    const output = new Map<string, Tensor>();\n    for (let i = 0; i < modelOutputNames.length; ++i) {\n      output.set(modelOutputNames[i], outputTensors[i]);\n    }\n\n    return output;\n  }\n\n  private initializeOps(graph: Graph): void {\n    const nodes = graph.getNodes();\n    this._ops = new Array(nodes.length);\n\n    for (let i = 0; i < nodes.length; i++) {\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets, graph);\n    }\n  }\n\n  private _model: Model;\n  private _initialized: boolean;\n\n  private _ops: Operator[];\n  private _executionPlan: ExecutionPlan;\n\n  private backendHint?: string;\n\n  private sessionHandler: SessionHandlerType;\n  private context: Session.Context;\n  private profiler: Readonly<Profiler>;\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Guid} from 'guid-typescript';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {decodeUtf8String, ProtoUtil, ShapeUtil} from './util';\n\nimport ortFbs = onnxruntime.experimental.fbs;\n\nexport declare namespace Tensor {\n  export interface DataTypeMap {\n    bool: Uint8Array;\n    float32: Float32Array;\n    float64: Float64Array;\n    string: string[];\n    int8: Int8Array;\n    uint8: Uint8Array;\n    int16: Int16Array;\n    uint16: Uint16Array;\n    int32: Int32Array;\n    uint32: Uint32Array;\n  }\n\n  export type DataType = keyof DataTypeMap;\n\n  export type StringType = Tensor.DataTypeMap['string'];\n  export type BooleanType = Tensor.DataTypeMap['bool'];\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\n  export type NumberType = BooleanType|IntegerType|FloatType;\n\n  export type Id = Guid;\n}\n\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\n\ntype DataProvider = (id: Tensor.Id) => TensorData;\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\n\nexport class Tensor {\n  /**\n   * get the underlying tensor data\n   */\n  get data(): TensorData {\n    if (this.cache === undefined) {\n      const data = this.dataProvider!(this.dataId);\n      if (data.length !== this.size) {\n        throw new Error('Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.');\n      }\n      this.cache = data;\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the underlying string tensor data. Should only use when type is STRING\n   */\n  get stringData() {\n    if (this.type !== 'string') {\n      throw new TypeError('data type is not string');\n    }\n\n    return this.data as Tensor.StringType;\n  }\n\n  /**\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL)\n   */\n  get integerData() {\n    switch (this.type) {\n      case 'uint8':\n      case 'int8':\n      case 'uint16':\n      case 'int16':\n      case 'int32':\n      case 'uint32':\n      case 'bool':\n        return this.data as Tensor.IntegerType;\n\n      default:\n        throw new TypeError('data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)');\n    }\n  }\n\n  /**\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\n   */\n  get floatData() {\n    switch (this.type) {\n      case 'float32':\n      case 'float64':\n        return this.data as Tensor.FloatType;\n\n      default:\n        throw new TypeError('data type is not float (float32, float64)');\n    }\n  }\n\n  /**\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\n   */\n  get numberData() {\n    if (this.type !== 'string') {\n      return this.data as Tensor.NumberType;\n    }\n    throw new TypeError('type cannot be non-number (string)');\n  }\n\n  /**\n   * get value of an element at the given indices\n   */\n  get(indices: readonly number[]): Tensor.DataTypeMap[Tensor.DataType][number] {\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\n  }\n\n  /**\n   * set value of an element at the given indices\n   */\n  set(indices: readonly number[], value: Tensor.DataTypeMap[Tensor.DataType][number]) {\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\n  }\n\n  /**\n   * get the underlying tensor data asynchronously\n   */\n  async getData(): Promise<TensorData> {\n    if (this.cache === undefined) {\n      this.cache = await this.asyncDataProvider!(this.dataId);\n    }\n    return this.cache;\n  }\n\n  /**\n   * get the number of elements in the tensor\n   */\n  public readonly size: number;\n\n  private _strides: readonly number[];\n  /**\n   * get the strides for each dimension\n   */\n  get strides(): readonly number[] {\n    if (!this._strides) {\n      this._strides = ShapeUtil.computeStrides(this.dims);\n    }\n    return this._strides;\n  }\n\n  constructor(\n      /**\n       * get the dimensions of the tensor\n       */\n      public readonly dims: readonly number[],\n      /**\n       * get the type of the tensor\n       */\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\n      /**\n       * get the data ID that used to map to a tensor data\n       */\n      public readonly dataId: Guid = Guid.create()) {\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\n    const size = this.size;\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\n\n    if (cache !== undefined) {\n      if (cache.length !== size) {\n        throw new RangeError('Input dims doesn\\'t match data length.');\n      }\n    }\n\n    if (type === 'string') {\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\n        throw new TypeError('cache should be a string array');\n      }\n\n      if (empty) {\n        this.cache = new Array<string>(size);\n      }\n    } else {\n      if (cache !== undefined) {\n        const constructor = dataviewConstructor(type);\n        if (!(cache instanceof constructor)) {\n          throw new TypeError(`cache should be type ${constructor.name}`);\n        }\n      }\n\n      if (empty) {\n        const buf = new ArrayBuffer(size * sizeof(type));\n        this.cache = createView(buf, type);\n      }\n    }\n  }\n\n  /**\n   * Construct new Tensor from a ONNX Tensor object\n   * @param tensorProto the ONNX Tensor\n   */\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\n    if (!tensorProto) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      tensorProto.stringData!.forEach((str, i) => {\n        value.data[i] = decodeUtf8String(str);\n      });\n\n    } else if (\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\n        tensorProto.rawData.byteLength > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource =\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\n      const elementSize = sizeofProto(tensorProto.dataType!);\n      const length = tensorProto.rawData.byteLength / elementSize;\n\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\n        dataDest[i] = n;\n      }\n    } else {\n      // populate value from array\n      let array: Array<number|Long>;\n      switch (tensorProto.dataType) {\n        case onnx.TensorProto.DataType.FLOAT:\n          array = tensorProto.floatData!;\n          break;\n        case onnx.TensorProto.DataType.INT32:\n        case onnx.TensorProto.DataType.INT16:\n        case onnx.TensorProto.DataType.UINT16:\n        case onnx.TensorProto.DataType.INT8:\n        case onnx.TensorProto.DataType.UINT8:\n        case onnx.TensorProto.DataType.BOOL:\n          array = tensorProto.int32Data!;\n          break;\n        case onnx.TensorProto.DataType.INT64:\n          array = tensorProto.int64Data!;\n          break;\n        case onnx.TensorProto.DataType.DOUBLE:\n          array = tensorProto.doubleData!;\n          break;\n        case onnx.TensorProto.DataType.UINT32:\n        case onnx.TensorProto.DataType.UINT64:\n          array = tensorProto.uint64Data!;\n          break;\n        default:\n          // should never run here\n          throw new Error('unspecific error');\n      }\n\n      if (array === null || array === undefined) {\n        throw new Error('failed to populate data from a tensorproto value');\n      }\n\n      const data = value.data;\n      if (data.length !== array.length) {\n        throw new Error('array length mismatch');\n      }\n\n      for (let i = 0; i < array.length; i++) {\n        const element = array[i];\n        if (Long.isLong(element)) {\n          data[i] = longToNumber(element, tensorProto.dataType);\n        } else {\n          data[i] = element;\n        }\n      }\n    }\n\n    return value;\n  }\n\n  /**\n   * Construct new Tensor from raw data\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\n   * for other types of tensor.\n   * @param dims the dimensions of the tensor\n   * @param type the type of the tensor\n   */\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: readonly number[], type: Tensor.DataType) {\n    return new Tensor(dims, type, undefined, undefined, data);\n  }\n\n  static fromOrtTensor(ortTensor: ortFbs.Tensor) {\n    if (!ortTensor) {\n      throw new Error('cannot construct Value from an empty tensor');\n    }\n    const dims = ProtoUtil.tensorDimsFromORTFormat(ortTensor);\n    const type = ProtoUtil.tensorDataTypeFromProto(ortTensor.dataType());\n\n    const value = new Tensor(dims, type);\n\n    if (type === 'string') {\n      // When it's STRING type, the value should always be stored in field\n      // 'stringData'\n      for (let i = 0; i < ortTensor.stringDataLength(); i++) {\n        value.data[i] = ortTensor.stringData(i);\n      }\n\n    } else if (\n        ortTensor.rawDataArray() && typeof ortTensor.rawDataLength() === 'number' && ortTensor.rawDataLength() > 0) {\n      // NOT considering segment for now (IMPORTANT)\n\n      // populate value from rawData\n      const dataDest = value.data;\n      const dataSource = new DataView(\n          ortTensor.rawDataArray()!.buffer, ortTensor.rawDataArray()!.byteOffset, ortTensor.rawDataLength());\n      const elementSize = sizeofProto(ortTensor.dataType());\n      const length = ortTensor.rawDataLength() / elementSize;\n\n      if (ortTensor.rawDataLength() % elementSize !== 0) {\n        throw new Error('invalid buffer length');\n      }\n      if (dataDest.length !== length) {\n        throw new Error('buffer length mismatch');\n      }\n\n      for (let i = 0; i < length; i++) {\n        const n = readProto(dataSource, ortTensor.dataType(), i * elementSize);\n        dataDest[i] = n;\n      }\n    }\n    return value;\n  }\n}\n\nfunction sizeof(type: Tensor.DataType): number {\n  switch (type) {\n    case 'bool':\n    case 'int8':\n    case 'uint8':\n      return 1;\n    case 'int16':\n    case 'uint16':\n      return 2;\n    case 'int32':\n    case 'uint32':\n    case 'float32':\n      return 4;\n    case 'float64':\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\n  }\n}\n\nfunction sizeofProto(type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.UINT8:\n    case onnx.TensorProto.DataType.INT8:\n    case onnx.TensorProto.DataType.BOOL:\n      return 1;\n    case onnx.TensorProto.DataType.UINT16:\n    case onnx.TensorProto.DataType.INT16:\n      return 2;\n    case onnx.TensorProto.DataType.FLOAT:\n    case onnx.TensorProto.DataType.INT32:\n    case onnx.TensorProto.DataType.UINT32:\n      return 4;\n    case onnx.TensorProto.DataType.INT64:\n    case onnx.TensorProto.DataType.DOUBLE:\n    case onnx.TensorProto.DataType.UINT64:\n      return 8;\n    default:\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\n  return new (dataviewConstructor(type))(dataBuffer);\n}\n\nfunction dataviewConstructor(type: Tensor.DataType) {\n  switch (type) {\n    case 'bool':\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'int16':\n      return Int16Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int32':\n      return Int32Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'float32':\n      return Float32Array;\n    case 'float64':\n      return Float64Array;\n    default:\n      // should never run to here\n      throw new Error('unspecified error');\n  }\n}\n\n// convert a long number to a 32-bit integer (cast-down)\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType|ortFbs.TensorDataType): number {\n  // INT64, UINT32, UINT64\n  if (type === onnx.TensorProto.DataType.INT64 || type === ortFbs.TensorDataType.INT64) {\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\n      throw new TypeError('int64 is not supported');\n    }\n  } else if (\n      type === onnx.TensorProto.DataType.UINT32 || type === ortFbs.TensorDataType.UINT32 ||\n      type === onnx.TensorProto.DataType.UINT64 || type === ortFbs.TensorDataType.UINT64) {\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\n      throw new TypeError('uint64 is not supported');\n    }\n  } else {\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\n  }\n\n  return i.toNumber();\n}\n\n// read one value from TensorProto\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType|ortFbs.TensorDataType, byteOffset: number): number {\n  switch (type) {\n    case onnx.TensorProto.DataType.BOOL:\n    case onnx.TensorProto.DataType.UINT8:\n      return view.getUint8(byteOffset);\n    case onnx.TensorProto.DataType.INT8:\n      return view.getInt8(byteOffset);\n    case onnx.TensorProto.DataType.UINT16:\n      return view.getUint16(byteOffset, true);\n    case onnx.TensorProto.DataType.INT16:\n      return view.getInt16(byteOffset, true);\n    case onnx.TensorProto.DataType.FLOAT:\n      return view.getFloat32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT32:\n      return view.getInt32(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT32:\n      return view.getUint32(byteOffset, true);\n    case onnx.TensorProto.DataType.INT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\n    case onnx.TensorProto.DataType.DOUBLE:\n      return view.getFloat64(byteOffset, true);\n    case onnx.TensorProto.DataType.UINT64:\n      return longToNumber(\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\n    default:\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {flatbuffers} from 'flatbuffers';\nimport Long from 'long';\nimport {onnx} from 'onnx-proto';\n\nimport {Graph} from './graph';\nimport {onnxruntime} from './ort-schema/ort-generated';\nimport {Tensor} from './tensor';\n\n// check the inputs shape before running an OP.\n// return true when the inputs pass the check\n// return false when the inputs do not fit the requirement\n// throw exception when fatal error or not implemented\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\n  if (!inputs || inputs.length !== expectedDimensions.length) {\n    return false;\n  }\n  for (let i = 0; i < inputs.length; i++) {\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Evaluates the given expression and asserts error message if condition is unmet.\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport class ArrayUtil {\n  /**\n   * Verifies if 2 input arrays contain the same elements.\n   * @param n1 Array 1\n   * @param n2 Array 2\n   * @returns Whether these 2 are equal\n   */\n  static arraysEqual(\n      n1: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array,\n      n2: readonly number[]|Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Uint8ClampedArray|\n      Float32Array|Float64Array) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class MatMulUtil {\n  /**\n   * Fix the input shapes for MatMul operation if they need fixing\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\n   */\n  static preprocessInputShapes(dimsA: readonly number[], dimsB: readonly number[]):\n      [readonly number[], readonly number[]] {\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\n    // removed.\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\n\n    // If the second argument is 1-D, it is promoted to a matrix by appending\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\n    // removed.\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\n\n    return [a, b];\n  }\n\n  /**\n   * Fix the output shape computed for MatMul operation if it needs fixing\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\n   * This will be mutated.\n   * @param aRank The rank of tensor A.\n   * @param bRank The rank of tensor B.\n   */\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\n    // Remove prepended dimension if first input is 1d\n    if (aRank === 1) {\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\n      outputShape.splice(outputShape.length - 2, 1);\n    }\n    // Remove appended dimension if second input is 1d\n    if (bRank === 1) {\n      outputShape.pop();\n    }\n  }\n\n  /**\n   * Calculate the expected shape when matrix multiplication\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\n  }\n}\n\nexport class BroadcastUtil {\n  /**\n   * Calculate the expected shape when broadcasting 2 tensors\n   * @param a The shape of tensor A. Should be an array of positive integers\n   * @param b The shape of tensor B. Should be an array of positive integers\n   * @param isMatMul Whether the operation is MatMul\n   * @returns The expected shape of the result, or undefined if N/A\n   */\n  static calcShape(adims: readonly number[], bdims: readonly number[], isMatMul = false): readonly number[]|undefined {\n    const arank = adims.length;\n    const brank = bdims.length;\n    if (arank === 0) {\n      return bdims;\n    }\n    if (brank === 0) {\n      return adims;\n    }\n    const crank = Math.max(adims.length, bdims.length);\n    const cdims = new Array<number>(crank);\n\n    // calculate the last 2 dimension if it is MatMul\n    if (isMatMul) {\n      if (arank < 2 || brank < 2) {\n        return undefined;\n      }\n      const cShapeMatMul =\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\n      if (cShapeMatMul === undefined) {\n        return undefined;\n      }\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\n    }\n\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\n\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\n        return undefined;\n      }\n      cdims[crank - i] = Math.max(aLen, bLen);\n    }\n\n    return cdims;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcas\n   * @returns The calculated indices that maps to the original tensor.\n   */\n  static index(broadcastedIndices: readonly number[], originalShape: readonly number[]): number[] {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\n    // length as the broadcasted shape, and for each dimension the index should\n    // not be out of range.\n    const originalIndices = new Array(originalShape.length);\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\n    return originalIndices;\n  }\n\n  /**\n   * Given the indices of a broadcasted tensor, calculate the original indices\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\n   * @param originalShape The original shape of the tensor before broadcast\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\n   *     mutated).\n   */\n  static fillIndex(broadcastedIndices: readonly number[], originalShape: readonly number[], originalIndices: number[]) {\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\n    // broadcasted shape, and for each dimension the index should not be out of range.\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\n    const dimOffset = broadcastedIndices.length - originalShape.length;\n    for (let i = 0; i < originalShape.length; i++) {\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\n    }\n  }\n\n  /**\n   * Perform the broadcasting operation on the specific operator\n   * @param a The input tensor A\n   * @param b The input tensor B\n   * @param op The operator lambda function\n   * @param inplace Whether to write the result back to A.\n   * @returns The result tensor, or undefined if input not broadcastable.\n   */\n  static calc(\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\n      resultType?: Tensor.DataType): Tensor|undefined {\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\n\n    if (outputShape) {\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\n        // B is not broadcastable to A, failed to calculate inplace.\n        return undefined;\n      }\n\n      const size = ShapeUtil.size(outputShape);\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\n\n      // both inputs are scalars\n      if (outputShape.length === 0) {\n        c.set([], op(a.get([]), b.get([])));\n      }\n\n      // atleast one input is a non-scalar\n      else {\n        const outputIndices = new Array<number>(outputShape.length);\n        const originalIndicesA = new Array(a.dims.length);\n        const originalIndicesB = new Array(b.dims.length);\n        let valA: string|number = 0;\n        let valB: string|number = 0;\n        let isAScalar = false;\n        let isBScalar = false;\n        if (a.dims.length === 0) {\n          valA = a.get([]);\n          isAScalar = true;\n        }\n        if (b.dims.length === 0) {\n          valB = b.get([]);\n          isBScalar = true;\n        }\n        let rest: number;\n        for (let i = 0; i < size; i++) {\n          // traversal indices\n          rest = i;\n          for (let j = outputShape.length - 1; j >= 0; j--) {\n            outputIndices[j] = rest % outputShape[j];\n            rest = Math.floor(rest / outputShape[j]);\n          }\n\n          if (!isAScalar) {\n            // map outputIndices (which is actually broadcasted) to the originalIndices\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\n            valA = a.get(originalIndicesA);\n          }\n          if (!isBScalar) {\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\n            valB = b.get(originalIndicesB);\n          }\n\n          c.set(outputIndices, op(valA, valB));\n        }\n      }\n\n      return c;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Determine if a shape is unidirectional broadcastable to another shape\n   * @param shape The input shape\n   * @param finalShape The desired shape after broadcasting\n   */\n  static isValidBroadcast(shape: readonly number[], finalShape: readonly number[]): boolean {\n    // align shape to the right\n    const inputRank = shape.length;\n    const finalRank = finalShape.length;\n    if (inputRank > finalRank) {\n      return false;\n    }\n    for (let i = 1; i <= inputRank; i++) {\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Determine the broadcasted dims in input shape based on the given output shape.\n   * Note that this function only returns the broadcasted dims.\n   * @param inputShape The input shape\n   * @param outputShape The output shape\n   * @returns The broadcasted dims in input shape.\n   */\n  static getBroadcastDims(inputShape: readonly number[], outputShape: readonly number[]): number[] {\n    const inRank = inputShape.length;\n    const dims: number[] = [];\n    for (let i = 0; i < inRank; i++) {\n      const dim = inRank - 1 - i;\n      const a = inputShape[dim] || 1;\n      const b = outputShape[outputShape.length - 1 - i] || 1;\n      if (b > 1 && a === 1) {\n        dims.unshift(dim);\n      }\n    }\n    return dims;\n  }\n}\n\n// copy array helper\n// mimics memcpy as much as possible\nexport function arrayCopyHelper(\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n    blockSize: number) {\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\n    throw new Error('sourceIndex out of bounds');\n  }\n  if (targetIndex < 0 || targetIndex >= target.length) {\n    throw new Error('targetIndex out of bounds');\n  }\n  if (sourceIndex + blockSize > source.length) {\n    throw new Error('source indices to be copied are outside bounds');\n  }\n  if (targetIndex + blockSize > target.length) {\n    throw new Error('target array is too small to hold result');\n  }\n\n  for (let offset = 0; offset < blockSize; offset++) {\n    target[targetIndex + offset] = source[sourceIndex + offset];\n  }\n}\n\nexport class GemmUtil {\n  // will make sure input shapes are compatible for this op\n  // and return back the shape of the output in the form of a tuple\n  // will throw exception if the input shapes are not compatible\n  static getShapeOfGemmResult(\n      leftShape: readonly number[], transLeft: boolean, rightShape: readonly number[], transRight: boolean,\n      biasShape?: readonly number[]): readonly number[] {\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\n      throw new Error('shape need to be of size 2');\n    }\n\n    let M: number;\n    let K: number;\n    let N: number;\n\n    if (transLeft) {\n      M = leftShape[1];\n      K = leftShape[0];\n    } else {\n      M = leftShape[0];\n      K = leftShape[1];\n    }\n\n    let kDim = -1;\n\n    if (transRight) {\n      N = rightShape[0];\n      kDim = 1;\n    } else {\n      N = rightShape[1];\n      kDim = 0;\n    }\n\n    if (rightShape[kDim] !== K) {\n      throw new Error('dimension mismatch');\n    }\n\n    if (M <= 0 || N <= 0 || K <= 0) {\n      throw new Error('invalid shape specified');\n    }\n\n    if (biasShape && !BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\n      throw new Error('gemm: invalid bias shape for broadcast');\n    }\n\n    return [M, N, K];\n  }\n}\n\nexport class ProtoUtil {\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType|\n                                 onnxruntime.experimental.fbs.TensorDataType): Tensor.DataType {\n    switch (typeProto) {\n      case onnx.TensorProto.DataType.INT8:\n        return 'int8';\n      case onnx.TensorProto.DataType.UINT8:\n        return 'uint8';\n      case onnx.TensorProto.DataType.BOOL:\n        return 'bool';\n      case onnx.TensorProto.DataType.INT16:\n        return 'int16';\n      case onnx.TensorProto.DataType.UINT16:\n        return 'uint16';\n      case onnx.TensorProto.DataType.INT32:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT32:\n        return 'uint32';\n      case onnx.TensorProto.DataType.FLOAT:\n        return 'float32';\n      case onnx.TensorProto.DataType.DOUBLE:\n        return 'float64';\n      case onnx.TensorProto.DataType.STRING:\n        return 'string';\n\n      // For INT64/UINT64, reduce their value to 32-bits.\n      // Should throw exception when overflow\n      case onnx.TensorProto.DataType.INT64:\n        return 'int32';\n      case onnx.TensorProto.DataType.UINT64:\n        return 'uint32';\n\n      default:\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\n    }\n  }\n\n  static tensorDataTypeStringToEnum(type: string): onnx.TensorProto.DataType {\n    switch (type) {\n      case 'int8':\n        return onnx.TensorProto.DataType.INT8;\n      case 'uint8':\n        return onnx.TensorProto.DataType.UINT8;\n      case 'bool':\n        return onnx.TensorProto.DataType.BOOL;\n      case 'int16':\n        return onnx.TensorProto.DataType.INT16;\n      case 'uint16':\n        return onnx.TensorProto.DataType.UINT16;\n      case 'int32':\n        return onnx.TensorProto.DataType.INT32;\n      case 'uint32':\n        return onnx.TensorProto.DataType.UINT32;\n      case 'float32':\n        return onnx.TensorProto.DataType.FLOAT;\n      case 'float64':\n        return onnx.TensorProto.DataType.DOUBLE;\n      case 'string':\n        return onnx.TensorProto.DataType.STRING;\n      case 'int64':\n        return onnx.TensorProto.DataType.INT64;\n      case 'uint64':\n        return onnx.TensorProto.DataType.UINT64;\n\n      default:\n        throw new Error(`unsupported data type: ${type}`);\n    }\n  }\n\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\n    // get rid of Long type for dims\n    return dims.map(d => Long.isLong(d) ? d.toNumber() : d);\n  }\n\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\n    return {\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\n    };\n  }\n\n  static tensorDimsFromORTFormat(tensor: onnxruntime.experimental.fbs.Tensor) {\n    const dims = [];\n    for (let i = 0; i < tensor.dimsLength(); i++) {\n      dims.push(LongUtil.longToNumber(tensor.dims(i)!));\n    }\n    return dims;\n  }\n\n  static tensorAttributesFromORTFormat(node: onnxruntime.experimental.fbs.Node) {\n    const attributes = [];\n    for (let i = 0; i < node.attributesLength(); i++) {\n      attributes.push(node.attributes(i)!);\n    }\n    return attributes;\n  }\n}\n\nexport class LongUtil {\n  // This function is called to get a number from long type of data for attribute, dim, and ir version,\n  // which values are signed integers.\n  // To make it more generic, add an optional paramter to convert to a unsigned number.\n  static longToNumber(n: Long|flatbuffers.Long|number, unsigned?: boolean) {\n    if (Long.isLong(n)) {\n      return n.toNumber();\n    } else if (n instanceof flatbuffers.Long) {\n      return Long.fromValue({low: n.low, high: n.high, unsigned: unsigned ?? false}).toNumber();\n    }\n    return n;\n  }\n  static isLong(n: unknown) {\n    return Long.isLong(n) || n instanceof flatbuffers.Long;\n  }\n}\n\nexport class ShapeUtil {\n  static size(dims: readonly number[]): number {\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\n  }\n\n  // `axis` inclusive\n  static sizeFromDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\n  }\n\n  // `axis` exclusive\n  static sizeToDimension(dims: readonly number[], axis: number): number {\n    if (axis < 0 || axis > dims.length) {\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\n    }\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\n  }\n\n  static getSizeFromDimensionRange(dims: readonly number[], start: number, end: number): number {\n    let size = 1;\n    for (let i = start; i < end; i++) {\n      // safety check as this method is called by multiple other methods requiring size.\n      // size cannot be 0 or negative.\n      if (dims[i] <= 0) {\n        throw new Error(\n            // eslint-disable-next-line max-len\n            'cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.');\n      }\n      size *= dims[i];\n    }\n    return size;\n  }\n\n  static computeStrides(dims: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [1];\n    }\n    const strides = new Array(rank);\n    strides[rank - 1] = 1;\n    strides[rank - 2] = dims[rank - 1];\n    for (let i = rank - 3; i >= 0; --i) {\n      strides[i] = strides[i + 1] * dims[i + 1];\n    }\n    return strides;\n  }\n\n  static transpose(dims: readonly number[]): readonly number[] {\n    const copy = dims.slice();\n    return copy.reverse();\n  }\n\n  static indicesToOffset(indices: readonly number[], strides: readonly number[], axis?: number): number {\n    if (axis === undefined) {\n      axis = indices.length;\n    }\n    let offset = 0;\n    for (let i = 0; i < axis; ++i) {\n      offset += strides[i] * indices[i];\n    }\n    return offset;\n  }\n\n  static offsetToIndices(offset: number, strides: readonly number[]): readonly number[] {\n    const rank = strides.length;\n    if (rank === 0) {\n      return [];\n    } else if (rank === 1) {\n      return [offset * strides[0]];\n    }\n    const indices: number[] = new Array(strides.length);\n    for (let i = 0; i < indices.length - 1; ++i) {\n      indices[i] = Math.floor(offset / strides[i]);\n      offset -= indices[i] * strides[i];\n    }\n    indices[indices.length - 1] = offset;\n    return indices;\n  }\n\n  /**\n   * normailze axis of range [-r, r) into [0, r).\n   */\n  static normalizeAxis(axis: number, tensorRank: number): number {\n    if (axis < -tensorRank && axis >= tensorRank) {\n      throw new Error('unsupported axis for this operation.');\n    }\n    return axis < 0 ? axis + tensorRank : axis;\n  }\n\n  static normalizeAxes(axes: readonly number[], tensorRank: number): number[] {\n    return axes.map(x => this.normalizeAxis(x, tensorRank));\n  }\n\n  // Increment an index into a tensor (in lexicographic\n  // ordering), wrapping around the specified upper_bound.\n  /**\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\n   * @param index Given index to increment (Will be mutated)\n   * @param dims The dimensions of the tensor for which the given index corresponds to\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\n   */\n  static incrementIndex(index: number[], dims: readonly number[], axisToIncrementOn?: number) {\n    if (dims.length === 0 || index.length === 0) {\n      throw new Error('Index incrementing unsupported for scalar Tensor');\n    }\n    if (axisToIncrementOn === undefined) {\n      axisToIncrementOn = dims.length;\n    } else {\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\n        throw new Error('Incorrect axis to increment on');\n      }\n    }\n\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\n      index[k]++;\n      if (index[k] < dims[k]) {\n        break;\n      }\n      index[k] = 0;\n    }\n  }\n\n  /**\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\n   * Used in Reshape\n   * @param originalDims Original Shape array\n   * @param shapeHints array containing values to compute the new dimensions\n   * For example:\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\n   * https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape\n   */\n\n  static calculateReshapedDims(originalDims: readonly number[], shapeHints: ArrayLike<number>): number[] {\n    // reshape to a Scalar Tensor\n    if (shapeHints.length === 0) {\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\n        return [];\n      } else {\n        throw new Error('cannot reshape to a scalar Tensor');\n      }\n    }\n\n    const nDims = shapeHints.length;\n    const reshapedDims = new Array<number>(nDims);\n    let unknownDimension = -1;\n    let newTensorSize = 1;\n    for (let i = 0; i < nDims; i++) {\n      if (shapeHints[i] < -1) {\n        throw new Error('a dimension in shape hints cannot be less than -1');\n      }\n      if (shapeHints[i] === -1) {\n        if (unknownDimension !== -1) {\n          throw new Error('at most one dimension in shape hints can be -1');\n        }\n        unknownDimension = i;\n      } else {\n        if (shapeHints[i] === 0) {\n          if (i >= originalDims.length) {\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\n          }\n          reshapedDims[i] = originalDims[i];\n        } else {\n          reshapedDims[i] = shapeHints[i];\n        }\n        newTensorSize *= reshapedDims[i];\n      }\n    }\n\n    const oldTensorSize = ShapeUtil.size(originalDims);\n    if (unknownDimension !== -1) {\n      if (oldTensorSize % newTensorSize !== 0) {\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\n            originalDims}] Output shape: [${shapeHints}]`);\n      }\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\n    }\n    // validate sizes from originalDims and reshapedDims match\n    else {\n      if (newTensorSize !== oldTensorSize) {\n        throw new Error('reshapedDims and originalDims don\\'t have matching sizes');\n      }\n    }\n    return reshapedDims;\n  }\n\n  /**\n   * Sorts a given array based on the indices in the Perm array\n   * Used in Transpose\n   * @param a Array to be sorted such as dims or strides\n   * @param perm Perm given; if null a will be reversed\n   */\n  static sortBasedOnPerm(a: readonly number[], perm?: readonly number[]): readonly number[] {\n    if (perm) {\n      return perm.map((v) => a[v]);\n    } else {\n      return a.slice().reverse();\n    }\n  }\n\n  /**\n   * Pads a given shape according to the padding values\n   * @param dims shape of the Tensor to be padded\n   * @param pad pad values\n   */\n  static padShape(dims: readonly number[], pad: readonly number[]): readonly number[] {\n    const rank = dims.length;\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\n  }\n\n  /**\n   * Determines if the two shapes are identical\n   * @param shape1\n   * @param shape2\n   */\n  static areEqual(shape1: readonly number[], shape2: readonly number[]): boolean {\n    if (shape1.length !== shape2.length) {\n      return false;\n    }\n    return shape1.every((v, i) => v === shape2[i]);\n  }\n\n  /**\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\n   * @param dims - input `dims` that needs to be checked\n   */\n  static validateDimsAndCalcSize(dims: readonly number[]): number {\n    if (dims.length > 6) {\n      throw new TypeError('Only rank 0 to 6 is supported for tensor shape.');\n    }\n    let size = 1;\n    for (const n of dims) {\n      if (!Number.isInteger(n)) {\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\n      }\n      if (n < 0 || n > 2147483647) {\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\n      }\n      size *= n;\n    }\n    return size;\n  }\n\n  /**\n   * Determines the shape of output tensor y = flatten(x, axis)\n   * @param dims - shape of input tensor\n   * @param axis - flatten axis, in the range [-r, r]\n   */\n  static flattenShape(dims: readonly number[], axis: number): readonly number[] {\n    if (axis < 0) {\n      axis += dims.length;\n    }\n    const total = dims.reduce((x, y) => x * y, 1);\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\n    const outputDims = [total / right, right];\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = squeeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - squeeze axes\n   */\n  static squeezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>();\n\n    // sanity check\n    axes = ShapeUtil.normalizeAxes(axes, dims.length);\n\n    for (let i = 0; i < dims.length; i++) {\n      const inSqueezeList = axes.indexOf(i) >= 0;\n      if (inSqueezeList && dims[i] !== 1) {\n        throw new Error('squeeze an axis of size different than 1');\n      }\n\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\n        outputDims.push(dims[i]);\n      }\n    }\n\n    return outputDims;\n  }\n\n  /**\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\n   * @param dims - shape of input tensor\n   * @param axes - unsqueeze axes\n   */\n  static unsqueezeShape(dims: readonly number[], axes: readonly number[]): readonly number[] {\n    const outputDims = new Array<number>(dims.length + axes.length);\n\n    // initialize the array elements to 0\n    outputDims.fill(0);\n\n    // set all axes indices to 1 in outputDims and check for duplicates\n    for (let i = 0; i < axes.length; i++) {\n      const axis = ShapeUtil.normalizeAxis(axes[i], outputDims.length);\n      if (axis >= outputDims.length) {\n        throw new Error('\\'axes\\' has an out of range axis');\n      }\n      if (outputDims[axis] !== 0) {\n        throw new Error('\\'axes\\' has a duplicate axis');\n      }\n\n      outputDims[axis] = 1;\n    }\n\n    // fill in the zero entries of outputDims with the input tensor's shape\n    let inputDimsIterator = 0;\n    for (let i = 0; i < outputDims.length; i++) {\n      if (outputDims[i] === 0) {\n        outputDims[i] = dims[inputDimsIterator++];\n      }\n    }\n\n    // sanity check assertion. 'inputDimsIterator'\n    // should be equal to the length of 'dims'\n    if (inputDimsIterator !== dims.length) {\n      throw new Error('the unsqueezed dimension could not be established');\n    }\n\n    return outputDims;\n  }\n}\n\n// bunch of helper methods that do a variety of math operations\nexport class MathUtil {\n  // y = (x*x) + y\n  static sqr(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\n    }\n  }\n\n  // y = ax + y\n  static axpy(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, alpha: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\n    }\n  }\n\n  // y = pow(x, b)\n  static powx(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number, b: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\n    }\n  }\n\n  // y = x * y\n  static mul(\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\n      blockSize: number) {\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\n      throw new Error('sourceIndex out of bounds');\n    }\n    if (targetIndex < 0 || targetIndex >= target.length) {\n      throw new Error('targetIndex out of bounds');\n    }\n    if (sourceIndex + blockSize > source.length) {\n      throw new Error('source indices to be copied are outside bounds');\n    }\n    if (targetIndex + blockSize > target.length) {\n      throw new Error('target array is too small to hold result');\n    }\n\n    for (let offset = 0; offset < blockSize; offset++) {\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\n    }\n  }\n}\n\nexport class SplitUtil {\n  /**\n   * Calculates new Shapes from existing one and the splits given along the axis provides\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\n   * @param axis The dimension along which the Tensor will be split\n   * @param splits Offsets for the start of each split\n   */\n  static splitShape(dims: readonly number[], axis: number, split: number[], numOutputs?: number):\n      [number[][], number[]] {\n    if (split.length === 0) {\n      if (!numOutputs) {\n        throw new Error('need to know number of outputs when the \\'split\\' attribute is not specified');\n      }\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\n    }\n\n    const shapes: number[][] = [];\n    const offsets = [0];\n    for (let i = 0; i < split.length; ++i) {\n      if (i !== 0) {\n        offsets.push(offsets[i - 1] + split[i - 1]);\n      }\n      const shape = dims.slice();\n      shape[axis] = split[i];\n      shapes.push(shape);\n    }\n    return [shapes, offsets];\n  }\n\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\n    if (numElementsAlongAxis % numOutputs !== 0) {\n      throw new Error('cannot split tensor to equal sized parts');\n    }\n    for (let i = 0; i < numOutputs; ++i) {\n      split.push(numElementsAlongAxis / numOutputs);\n    }\n  }\n}\n\nexport class ReduceUtil {\n  /**\n   * Perform reduce operations on the specific operator\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduce(\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\n      op2: (a: number, b: number) => number): Tensor {\n    const dims = a.dims.slice(0);\n    // if axes is not set, perform reduce on all axes\n    if (axes.length === 0) {\n      dims.forEach((d, ind) => axes.push(ind));\n    }\n    // get a temporary broadcastable output shape\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\n\n    // loop through the output and calculate result one by one\n    const size = ShapeUtil.size(outputDims);\n    const y = new Tensor(outputDims, a.type);\n    const strides = ShapeUtil.computeStrides(outputDims);\n    const inputStrides = ShapeUtil.computeStrides(dims);\n    const indicesY = new Array(dims.length);\n    for (let i = 0; i < size; i++) {\n      const indices = ShapeUtil.offsetToIndices(i, strides);\n      // map index\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\n      y.set(\n          indices,\n          ReduceUtil.calcReduceByAxis(\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\n    }\n\n    if (keepdims) {\n      return y;\n    } else {\n      // keepdims == 0, calculate the expected shape\n      return new Tensor(\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\n    }\n  }\n\n  /**\n   * Perform reduce operations on the specific operator on specific axes\n   * @param a Input tensor data\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param dims The input dimension.\n   * @param curAxisInd Index in axes specifying the current dimension along\n   *      which the tensor will be reduced\n   * @param pos The current index of element to perform operation\n   * @param op1 The operation to be performed on each element in the tensor\n   * @param op2 The operation to be performed between elements in the tensor\n   */\n  static calcReduceByAxis(\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\n    let res = 0;\n    if (curAxisInd >= axes.length) {\n      return op1(input[pos]);\n    }\n    const axis = axes[curAxisInd];\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\n    for (let i = 0; i < dims[axis]; i++) {\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\n      pos += step;\n    }\n    return res;\n  }\n\n  /**\n   * Calculate the expected shape of a reduce operation\n   * @param dims The input tensor dimension\n   * @param axes The dimensions along which the Tensor will be reduced\n   * @param keepdims If set to true, the axes which are reduced are left in the\n   *    result as dimensions with size one.\n   */\n  static calcReduceShape(dims: readonly number[], axes: readonly number[], keepDims: boolean): number[] {\n    const outputDims = dims.slice();\n    for (let i = 0; i < axes.length; i++) {\n      if (keepDims) {\n        outputDims[axes[i]] = 1;\n      } else {\n        outputDims[axes[i]] = 0;\n      }\n    }\n    return outputDims.filter(dim => dim !== 0);\n  }\n}\n\nexport class PoolConvUtil {\n  /**\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   */\n  static adjustPoolAttributes(\n      isGlobalOperator: boolean, inputDims: readonly number[], kernelShape: number[], strides: number[],\n      dilations: number[], pads: number[]) {\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\n      throw new Error('length of specified kernel shapes should be 2 less than length of input dimensions');\n    }\n\n    if (isGlobalOperator) {\n      // adjust kernel shape to cover the input dims\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        if (dim >= kernelShape.length) {\n          kernelShape.push(inputDims[dim + 2]);\n        } else {\n          kernelShape[dim] = inputDims[dim + 2];\n        }\n      }\n    }\n\n    // adjust strides length to match kernel shape length\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < strides.length) {\n        if (strides[dim] < 0) {\n          throw new Error('strides should be greater than or equal to 1');\n        }\n      } else {\n        strides.push(1);\n      }\n    }\n\n    // adjust dilation value\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (dim < dilations.length) {\n        if (dilations[dim] < 0) {\n          throw new Error('dilations should be greater than or equal to 1');\n        }\n      } else {\n        dilations.push(1);\n      }\n    }\n\n    // adjust pads length to match 2 * kernel shape length\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\n      if (dim < pads.length) {\n        if (pads[dim] < 0) {\n          throw new Error('pad should be greater than or equal to 1');\n        }\n      } else {\n        pads.push(0);\n      }\n    }\n\n    // sanity checks for values in kernel shapes and pads\n    for (let dim = 0; dim < kernelShape.length; dim++) {\n      if (kernelShape[dim] <= 0) {\n        throw new Error('kernel shapes need to be greater than 0');\n      }\n\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\n        throw new Error('pads should be smaller than kernel');\n      }\n    }\n  }\n\n  // adjust pad values based on 'autoPad' attribute\n  static adjustPadsBasedOnAutoPad(\n      inputDims: readonly number[], strides: readonly number[], dilations: readonly number[],\n      kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (!autoPad) {\n      return;\n    }\n\n    if (pads.length !== 2 * (inputDims.length - 2)) {\n      throw new Error('length of pads should be twice the length of data dimensions');\n    }\n\n    if (strides.length !== (inputDims.length - 2)) {\n      throw new Error('length of strides should be the length of data dimensions');\n    }\n\n    if (kernelShape.length !== (inputDims.length - 2)) {\n      throw new Error('length of kernel shapes should be the length of data dimensions');\n    }\n\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\n      PoolConvUtil.adjustPadAndReturnShape(\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n          autoPad);\n    }\n  }\n\n  /**\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\n   * @param isGlobalOperator If true, perform global pooling.\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param strides Stride along each axis.\n   * @param dilations Dilation along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computePoolOutputShape(\n      isGlobalOperator: boolean, inputDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0) {\n      throw new Error('input shape must be of size greater than 0');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], inputDims[1]];\n\n    PoolConvUtil.computeShapeHelper(\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  /**\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\n   * @param strides Stride along each axis.\n   * @param kernelShape The size of the kernel along each axis.\n   * @param pads Padding for the beginning and ending along each axis.\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\n   */\n  static computeConvOutputShape(\n      inputDims: readonly number[], filterDims: readonly number[], strides: number[], dilations: number[],\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\n      throw new Error('invalid input tensor dims or invalid filter tensor dims');\n    }\n\n    // Add batch size and number of channels of output\n    const outputDims = [inputDims[0], filterDims[0]];\n\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\n    return outputDims;\n  }\n\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\n  // called by computePoolOutputShape() and computeConvOutputShape()\n  // adjust pads based on 'autoPad' attribute prior to shape computation\n  private static computeShapeHelper(\n      isGlobalOperator: boolean, inputDims: readonly number[], outputDims: number[], strides: readonly number[],\n      dilations: readonly number[], kernelShape: readonly number[], pads: number[], autoPad?: string) {\n    if (isGlobalOperator) {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(1);\n      }\n    } else {\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\n            autoPad));\n      }\n    }\n  }\n\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\n  private static adjustPadAndReturnShape(\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\n      padTailIndex: number, autoPad?: string): number {\n    const dkernel = dilation * (kernel - 1) + 1;\n    if (autoPad && autoPad !== 'NOTSET') {\n      switch (autoPad) {\n        case 'VALID':\n          pads[padHeadIndex] = 0;\n          pads[padTailIndex] = 0;\n          return Math.floor(((inSize - dkernel) / stride) + 1);\n        case 'SAME_LOWER':\n        case 'SAME_UPPER':\n          if (dilation !== 1) {\n            throw new Error('Dilation not supported for SAME_UPPER or SAME_LOWER');\n          } else {\n            const legacyTargetSize = (inSize + stride - 1) / stride;\n            const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\n            pads[padHeadIndex] =\n                (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\n            pads[padTailIndex] = padNeeded - pads[padHeadIndex];\n            return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\n          }\n        default:\n          throw new Error('Unsupported AutoPad type');\n      }\n    } else {\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\n    }\n  }\n}\n\nexport const MIN_CLIP = -3.4028234663852886e+38;\nexport const MAX_CLIP = 3.4028234663852886e+38;\n\nexport function decodeUtf8String(buffer: Uint8Array): string {\n  return new TextDecoder().decode(buffer);\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.16.0';\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, env, InferenceSession} from 'onnxruntime-common';\n\nimport {OrtWasmMessage, SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport {initializeWebAssembly} from './wasm-factory';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker|undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\n\n// resolve; reject\ntype PromiseCallbacks<T = void> = [(result: T) => void, (reason: unknown) => void];\n\nlet initWasmCallbacks: PromiseCallbacks;\nlet initOrtCallbacks: PromiseCallbacks;\nconst createSessionAllocateCallbacks: Array<PromiseCallbacks<SerializableModeldata>> = [];\nconst createSessionFinalizeCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst createSessionCallbacks: Array<PromiseCallbacks<SerializableSessionMetadata>> = [];\nconst releaseSessionCallbacks: Array<PromiseCallbacks<void>> = [];\nconst runCallbacks: Array<PromiseCallbacks<SerializableTensor[]>> = [];\nconst endProfilingCallbacks: Array<PromiseCallbacks<void>> = [];\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      break;\n    case 'init-ort':\n      if (ev.data.err) {\n        initOrtCallbacks[1](ev.data.err);\n      } else {\n        initOrtCallbacks[0]();\n      }\n      break;\n    case 'create_allocate':\n      if (ev.data.err) {\n        createSessionAllocateCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionAllocateCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create_finalize':\n      if (ev.data.err) {\n        createSessionFinalizeCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionFinalizeCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'create':\n      if (ev.data.err) {\n        createSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        createSessionCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'release':\n      if (ev.data.err) {\n        releaseSessionCallbacks.shift()![1](ev.data.err);\n      } else {\n        releaseSessionCallbacks.shift()![0]();\n      }\n      break;\n    case 'run':\n      if (ev.data.err) {\n        runCallbacks.shift()![1](ev.data.err);\n      } else {\n        runCallbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    case 'end-profiling':\n      if (ev.data.err) {\n        endProfilingCallbacks.shift()![1](ev.data.err);\n      } else {\n        endProfilingCallbacks.shift()![0]();\n      }\n      break;\n    default:\n  }\n};\n\nconst scriptSrc = typeof document !== 'undefined' ? (document?.currentScript as HTMLScriptElement)?.src : undefined;\n\nexport const initializeWebAssemblyInstance = async(): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    if (initialized) {\n      return;\n    }\n    if (initializing) {\n      throw new Error('multiple calls to \\'initWasm()\\' detected.');\n    }\n    if (aborted) {\n      throw new Error('previous call to \\'initWasm()\\' failed.');\n    }\n\n    initializing = true;\n\n    // overwrite wasm filepaths\n    if (env.wasm.wasmPaths === undefined) {\n      if (scriptSrc && scriptSrc.indexOf('blob:') !== 0) {\n        env.wasm.wasmPaths = scriptSrc.substr(0, +(scriptSrc).lastIndexOf('/') + 1);\n      }\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports\n      proxyWorker = require('worker-loader?inline=no-fallback!./proxy-worker/main').default() as Worker;\n      proxyWorker.onmessage = onProxyWorkerMessage;\n      initWasmCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-wasm', in : env.wasm};\n      proxyWorker.postMessage(message);\n    });\n\n  } else {\n    return initializeWebAssembly(env.wasm);\n  }\n};\n\nexport const initializeRuntime = async(env: Env): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      initOrtCallbacks = [resolve, reject];\n      const message: OrtWasmMessage = {type: 'init-ort', in : env};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    await core.initRuntime(env);\n  }\n};\n\nexport const createSessionAllocate = async(model: Uint8Array): Promise<SerializableModeldata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableModeldata>((resolve, reject) => {\n      createSessionAllocateCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create_allocate', in : {model}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSessionAllocate(model);\n  }\n};\n\nexport const createSessionFinalize = async(modeldata: SerializableModeldata, options?: InferenceSession.SessionOptions):\n    Promise<SerializableSessionMetadata> => {\n      if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n        ensureWorker();\n        return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n          createSessionFinalizeCallbacks.push([resolve, reject]);\n          const message: OrtWasmMessage = {type: 'create_finalize', in : {modeldata, options}};\n          proxyWorker!.postMessage(message);\n        });\n      } else {\n        return core.createSessionFinalize(modeldata, options);\n      }\n    };\n\nexport const createSession =\n    async(model: Uint8Array, options?: InferenceSession.SessionOptions): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      createSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'create', in : {model, options}};\n      proxyWorker!.postMessage(message, [model.buffer]);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      releaseSessionCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'release', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableTensor[]>((resolve, reject) => {\n      runCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'run', in : {sessionId, inputIndices, inputs, outputIndices, options}};\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(inputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, options);\n  }\n};\n\nexport const endProfiling = async(sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      endProfilingCallbacks.push([resolve, reject]);\n      const message: OrtWasmMessage = {type: 'end-profiling', in : sessionId};\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2;  // Default to warning\n    } else if (\n        typeof options.logSeverityLevel !== 'number' || !Number.isInteger(options.logSeverityLevel) ||\n        options.logSeverityLevel < 0 || options.logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0;  // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n        runOptions.logSeverityLevel!, runOptions.logVerbosityLevel!, !!runOptions.terminate!, tagDataOffset);\n    if (runOptionsHandle === 0) {\n      checkLastError('Can\\'t create run options.');\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {readFile} from 'fs';\nimport {env, InferenceSession, SessionHandler, Tensor} from 'onnxruntime-common';\nimport {promisify} from 'util';\n\nimport {SerializableModeldata} from './proxy-messages';\nimport {createSession, createSessionAllocate, createSessionFinalize, endProfiling, initializeRuntime, releaseSession, run} from './proxy-wrapper';\n\nlet runtimeInitialized: boolean;\n\nexport class OnnxruntimeWebAssemblySessionHandler implements SessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async createSessionAllocate(path: string): Promise<SerializableModeldata> {\n    // fetch model from url and move to wasm heap. The arraybufffer that held the http\n    // response is freed once we return\n    const response = await fetch(path);\n    const arrayBuffer = await response.arrayBuffer();\n    return createSessionAllocate(new Uint8Array(arrayBuffer));\n  }\n\n  async loadModel(pathOrBuffer: string|Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    if (!runtimeInitialized) {\n      await initializeRuntime(env);\n      runtimeInitialized = true;\n    }\n\n    if (typeof pathOrBuffer === 'string') {\n      if (typeof process !== 'undefined' && process.versions && process.versions.node) {\n        // node\n        const model = await promisify(readFile)(pathOrBuffer);\n        [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n      } else {\n        // browser\n        // fetch model and move to wasm heap.\n        const modelData: SerializableModeldata = await this.createSessionAllocate(pathOrBuffer);\n        // create the session\n        [this.sessionId, this.inputNames, this.outputNames] = await createSessionFinalize(modelData, options);\n      }\n    } else {\n      [this.sessionId, this.inputNames, this.outputNames] = await createSession(pathOrBuffer, options);\n    }\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(feeds: SessionHandler.FeedsType, fetches: SessionHandler.FetchesType, options: InferenceSession.RunOptions):\n      Promise<SessionHandler.ReturnType> {\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach(kvp => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach(kvp => {\n      const name = kvp[0];\n      // TODO: support pre-allocated output\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputIndices.push(index);\n    });\n\n    const outputs =\n        await run(this.sessionId, inputIndices, inputArray.map(t => [t.type, t.dims, t.data]), outputIndices, options);\n\n    const result: SessionHandler.ReturnType = {};\n    for (let i = 0; i < outputs.length; i++) {\n      result[this.outputNames[outputIndices[i]]] = new Tensor(outputs[i][0], outputs[i][2], outputs[i][1]);\n    }\n    return result;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {InferenceSession} from 'onnxruntime-common';\n\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError, iterateExtraOptions} from './wasm-utils';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string|unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential'|'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (options.executionProviders &&\n      options.executionProviders.some(ep => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders =\n    (sessionOptionsHandle: number, executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n     allocs: number[]): void => {\n      for (const ep of executionProviders) {\n        let epName = typeof ep === 'string' ? ep : ep.name;\n\n        // check EP name\n        switch (epName) {\n          case 'xnnpack':\n            epName = 'XNNPACK';\n            break;\n          case 'webnn':\n            epName = 'WEBNN';\n            if (typeof ep !== 'string') {\n              const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n              if (webnnOptions?.deviceType) {\n                const keyDataOffset = allocWasmString('deviceType', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.deviceType, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(`Can't set a session config entry: 'deviceType' - ${webnnOptions.deviceType}.`);\n                }\n              }\n              if (webnnOptions?.powerPreference) {\n                const keyDataOffset = allocWasmString('powerPreference', allocs);\n                const valueDataOffset = allocWasmString(webnnOptions.powerPreference, allocs);\n                if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !==\n                    0) {\n                  checkLastError(\n                      `Can't set a session config entry: 'powerPreference' - ${webnnOptions.powerPreference}.`);\n                }\n              }\n            }\n            break;\n          case 'webgpu':\n            epName = 'JS';\n            break;\n          case 'wasm':\n          case 'cpu':\n            continue;\n          default:\n            throw new Error(`not supported execution provider: ${epName}`);\n        }\n\n        const epNameDataOffset = allocWasmString(epName, allocs);\n        if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n          checkLastError(`Can't append execution provider: ${epName}.`);\n        }\n      }\n    };\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n        typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2;  // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0;  // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset = typeof sessionOptions.optimizedModelFilePath === 'string' ?\n        allocWasmString(sessionOptions.optimizedModelFilePath, allocs) :\n        0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n        graphOptimizationLevel, !!sessionOptions.enableCpuMemArena, !!sessionOptions.enableMemPattern, executionMode,\n        !!sessionOptions.enableProfiling, 0, logIdDataOffset, logSeverityLevel, logVerbosityLevel,\n        optimizedModelFilePathOffset);\n    if (sessionOptionsHandle === 0) {\n      checkLastError('Can\\'t create session options.');\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n    }\n    allocs.forEach(alloc => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Tensor} from 'onnxruntime-common';\n\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'float16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor element size in bytes by the given data type\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const getTensorElementSize = (dateType: number): number|\n    undefined => [undefined, 4, 1, 1, 2, 2, 4, 8, undefined, 1, 2, 8, 4, 8, undefined, undefined, undefined][dateType];\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (type: Tensor.Type): Float32ArrayConstructor|Uint8ArrayConstructor|\n    Int8ArrayConstructor|Uint16ArrayConstructor|Int16ArrayConstructor|Int32ArrayConstructor|BigInt64ArrayConstructor|\n    Uint8ArrayConstructor|Float64ArrayConstructor|Uint32ArrayConstructor|BigUint64ArrayConstructor => {\n      switch (type) {\n        case 'float16':\n          return Uint16Array;\n        case 'float32':\n          return Float32Array;\n        case 'uint8':\n          return Uint8Array;\n        case 'int8':\n          return Int8Array;\n        case 'uint16':\n          return Uint16Array;\n        case 'int16':\n          return Int16Array;\n        case 'int32':\n          return Int32Array;\n        case 'bool':\n          return Uint8Array;\n        case 'float64':\n          return Float64Array;\n        case 'uint32':\n          return Uint32Array;\n        case 'int64':\n          return BigInt64Array;\n        case 'uint64':\n          return BigUint64Array;\n        default:\n          throw new Error(`unsupported type: ${type}`);\n      }\n    };\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel?: 'verbose'|'info'|'warning'|'error'|'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env, InferenceSession, Tensor} from 'onnxruntime-common';\n\nimport {SerializableModeldata, SerializableSessionMetadata, SerializableTensor} from './proxy-messages';\nimport {setRunOptions} from './run-options';\nimport {setSessionOptions} from './session-options';\nimport {logLevelStringToEnum, tensorDataTypeEnumToString, tensorDataTypeStringToEnum, tensorTypeToTypedArrayConstructor} from './wasm-common';\nimport {getInstance} from './wasm-factory';\nimport {allocWasmString, checkLastError} from './wasm-utils';\n\n/**\n * get the input/output count of the session.\n * @param sessionHandle the handle representing the session. should be non-zero.\n * @returns a tuple including 2 numbers, representing the input count and output count.\n */\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\n  const wasm = getInstance();\n  const stack = wasm.stackSave();\n  try {\n    const dataOffset = wasm.stackAlloc(8);\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + 4);\n    if (errorCode !== 0) {\n      checkLastError('Can\\'t get session input/output count.');\n    }\n    return [wasm.HEAP32[dataOffset / 4], wasm.HEAP32[dataOffset / 4 + 1]];\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * initialize ORT environment.\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    checkLastError('Can\\'t initialize onnxruntime.');\n  }\n};\n\n/**\n * intialize runtime environment.\n * @param env passed in the environment config object.\n */\nexport const initRuntime = async(env: Env): Promise<void> => {\n  // init ORT\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\n\n  if (!BUILD_DEFS.DISABLE_WEBGPU) {\n    // init JSEP if available\n\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n    const initJsep = require('./jsep/init').init;\n    await initJsep(getInstance(), env);\n  }\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded\n */\ntype SessionMetadata = [number, number[], number[]];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * allocate the memory and memcpy the model bytes, preparing for creating an instance of InferenceSession.\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\n */\nexport const createSessionAllocate = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  if (modelDataOffset === 0) {\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n  }\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\n/**\n * create an inference session using the prepared buffer containing the model data.\n * @param modelData a 2-elements tuple containing the pointer and size of the model data buffer.\n * @param options an optional session options object.\n * @returns a 3-elements tuple containing [session handle, input names, output names]\n */\nexport const createSessionFinalize =\n    (modelData: SerializableModeldata, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const wasm = getInstance();\n\n      let sessionHandle = 0;\n      let sessionOptionsHandle = 0;\n      let allocs: number[] = [];\n      const inputNamesUTF8Encoded = [];\n      const outputNamesUTF8Encoded = [];\n\n      try {\n        [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n        sessionHandle = wasm._OrtCreateSession(modelData[0], modelData[1], sessionOptionsHandle);\n        if (sessionHandle === 0) {\n          checkLastError('Can\\'t create a session.');\n        }\n\n        const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n\n        const inputNames = [];\n        const outputNames = [];\n        for (let i = 0; i < inputCount; i++) {\n          const name = wasm._OrtGetInputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an input name.');\n          }\n          inputNamesUTF8Encoded.push(name);\n          inputNames.push(wasm.UTF8ToString(name));\n        }\n        for (let i = 0; i < outputCount; i++) {\n          const name = wasm._OrtGetOutputName(sessionHandle, i);\n          if (name === 0) {\n            checkLastError('Can\\'t get an output name.');\n          }\n          outputNamesUTF8Encoded.push(name);\n          outputNames.push(wasm.UTF8ToString(name));\n        }\n\n        activeSessions.set(sessionHandle, [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded]);\n        return [sessionHandle, inputNames, outputNames];\n      } catch (e) {\n        inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n        outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n\n        if (sessionHandle !== 0) {\n          wasm._OrtReleaseSession(sessionHandle);\n        }\n        throw e;\n      } finally {\n        wasm._free(modelData[0]);\n        if (sessionOptionsHandle !== 0) {\n          wasm._OrtReleaseSessionOptions(sessionOptionsHandle);\n        }\n        allocs.forEach(alloc => wasm._free(alloc));\n      }\n    };\n\n\n/**\n * create an instance of InferenceSession.\n * @returns the metadata of InferenceSession. 0-value handle for failure.\n */\nexport const createSession =\n    (model: Uint8Array, options?: InferenceSession.SessionOptions): SerializableSessionMetadata => {\n      const modelData: SerializableModeldata = createSessionAllocate(model);\n      return createSessionFinalize(modelData, options);\n    };\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\n\n  inputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  outputNamesUTF8Encoded.forEach(buf => wasm._OrtFree(buf));\n  wasm._OrtReleaseSession(sessionHandle);\n  activeSessions.delete(sessionId);\n};\n\n/**\n * perform inference run\n */\nexport const run = async(\n    sessionId: number, inputIndices: number[], inputs: SerializableTensor[], outputIndices: number[],\n    options: InferenceSession.RunOptions): Promise<SerializableTensor[]> => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded] = session;\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputValues: number[] = [];\n  const inputAllocs: number[] = [];\n\n  try {\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      const dataType = inputs[i][0];\n      const dims = inputs[i][1];\n      const data = inputs[i][2];\n\n      let dataOffset: number;\n      let dataByteLength: number;\n\n      if (Array.isArray(data)) {\n        // string tensor\n        dataByteLength = 4 * data.length;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        let dataIndex = dataOffset / 4;\n        for (let i = 0; i < data.length; i++) {\n          if (typeof data[i] !== 'string') {\n            throw new TypeError(`tensor data at index ${i} is not a string`);\n          }\n          wasm.HEAPU32[dataIndex++] = allocWasmString(data[i], inputAllocs);\n        }\n      } else {\n        dataByteLength = data.byteLength;\n        dataOffset = wasm._malloc(dataByteLength);\n        inputAllocs.push(dataOffset);\n        wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), dataOffset);\n      }\n\n      const stack = wasm.stackSave();\n      const dimsOffset = wasm.stackAlloc(4 * dims.length);\n      try {\n        let dimIndex = dimsOffset / 4;\n        dims.forEach(d => wasm.HEAP32[dimIndex++] = d);\n        const tensor = wasm._OrtCreateTensor(\n            tensorDataTypeStringToEnum(dataType), dataOffset, dataByteLength, dimsOffset, dims.length);\n        if (tensor === 0) {\n          checkLastError(`Can't create tensor for input[${i}].`);\n        }\n        inputValues.push(tensor);\n      } finally {\n        wasm.stackRestore(stack);\n      }\n    }\n\n    const beforeRunStack = wasm.stackSave();\n    const inputValuesOffset = wasm.stackAlloc(inputCount * 4);\n    const inputNamesOffset = wasm.stackAlloc(inputCount * 4);\n    const outputValuesOffset = wasm.stackAlloc(outputCount * 4);\n    const outputNamesOffset = wasm.stackAlloc(outputCount * 4);\n\n    try {\n      let inputValuesIndex = inputValuesOffset / 4;\n      let inputNamesIndex = inputNamesOffset / 4;\n      let outputValuesIndex = outputValuesOffset / 4;\n      let outputNamesIndex = outputNamesOffset / 4;\n      for (let i = 0; i < inputCount; i++) {\n        wasm.HEAPU32[inputValuesIndex++] = inputValues[i];\n        wasm.HEAPU32[inputNamesIndex++] = inputNamesUTF8Encoded[inputIndices[i]];\n      }\n      for (let i = 0; i < outputCount; i++) {\n        wasm.HEAPU32[outputValuesIndex++] = 0;\n        wasm.HEAPU32[outputNamesIndex++] = outputNamesUTF8Encoded[outputIndices[i]];\n      }\n\n      // support RunOptions\n      let errorCode = wasm._OrtRun(\n          sessionHandle, inputNamesOffset, inputValuesOffset, inputCount, outputNamesOffset, outputCount,\n          outputValuesOffset, runOptionsHandle);\n\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const runPromise = wasm.jsepRunPromise;\n      if (runPromise && typeof runPromise.then !== 'undefined') {\n        errorCode = await runPromise;\n      }\n\n      const output: SerializableTensor[] = [];\n\n      if (errorCode !== 0) {\n        checkLastError('failed to call OrtRun().');\n      }\n\n      for (let i = 0; i < outputCount; i++) {\n        const tensor = wasm.HEAPU32[outputValuesOffset / 4 + i];\n\n        const beforeGetTensorDataStack = wasm.stackSave();\n        // stack allocate 4 pointer value\n        const tensorDataOffset = wasm.stackAlloc(4 * 4);\n\n        let type: Tensor.Type|undefined, dataOffset = 0;\n        try {\n          errorCode = wasm._OrtGetTensorData(\n              tensor, tensorDataOffset, tensorDataOffset + 4, tensorDataOffset + 8, tensorDataOffset + 12);\n          if (errorCode !== 0) {\n            checkLastError(`Can't access output tensor data on index ${i}.`);\n          }\n          let tensorDataIndex = tensorDataOffset / 4;\n          const dataType = wasm.HEAPU32[tensorDataIndex++];\n          dataOffset = wasm.HEAPU32[tensorDataIndex++];\n          const dimsOffset = wasm.HEAPU32[tensorDataIndex++];\n          const dimsLength = wasm.HEAPU32[tensorDataIndex++];\n          const dims = [];\n          for (let i = 0; i < dimsLength; i++) {\n            dims.push(wasm.HEAPU32[dimsOffset / 4 + i]);\n          }\n          wasm._OrtFree(dimsOffset);\n\n          const size = dims.length === 0 ? 1 : dims.reduce((a, b) => a * b);\n          type = tensorDataTypeEnumToString(dataType);\n          if (type === 'string') {\n            const stringData: string[] = [];\n            let dataIndex = dataOffset / 4;\n            for (let i = 0; i < size; i++) {\n              const offset = wasm.HEAPU32[dataIndex++];\n              const maxBytesToRead = i === size - 1 ? undefined : wasm.HEAPU32[dataIndex] - offset;\n              stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n            }\n            output.push([type, dims, stringData]);\n          } else {\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n            const data = new typedArrayConstructor(size);\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength)\n                .set(wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength));\n            output.push([type, dims, data]);\n          }\n        } finally {\n          wasm.stackRestore(beforeGetTensorDataStack);\n          if (type === 'string' && dataOffset) {\n            wasm._free(dataOffset);\n          }\n          wasm._OrtReleaseTensor(tensor);\n        }\n      }\n\n      return output;\n    } finally {\n      wasm.stackRestore(beforeRunStack);\n    }\n  } finally {\n    inputValues.forEach(v => wasm._OrtReleaseTensor(v));\n    inputAllocs.forEach(p => wasm._free(p));\n\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    runOptionsAllocs.forEach(p => wasm._free(p));\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    checkLastError('Can\\'t get an profile file name.');\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensor[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && data.buffer) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {Env} from 'onnxruntime-common';\nimport * as path from 'path';\n\nimport {OrtWasmModule} from './binding/ort-wasm';\nimport {OrtWasmThreadedModule} from './binding/ort-wasm-threaded';\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nconst ortWasmFactory: EmscriptenModuleFactory<OrtWasmModule> =\n    BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm.js') : require('./binding/ort-wasm-simd.jsep.js');\n\nconst ortWasmFactoryThreaded: EmscriptenModuleFactory<OrtWasmModule> = !BUILD_DEFS.DISABLE_WASM_THREAD ?\n    (BUILD_DEFS.DISABLE_WEBGPU ? require('./binding/ort-wasm-threaded.js') :\n                                 require('./binding/ort-wasm-simd-threaded.jsep.js')) :\n    ortWasmFactory;\n/* eslint-enable @typescript-eslint/no-require-imports */\n\nlet wasm: OrtWasmModule|undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  try {\n    // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n    if (typeof SharedArrayBuffer === 'undefined') {\n      return false;\n    }\n\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(new Uint8Array([\n      0, 97, 115, 109, 1, 0,  0,  0, 1, 4, 1,  96, 0,   0,  3, 2, 1,  0, 5,\n      4, 1,  3,   1,   1, 10, 11, 1, 9, 0, 65, 0,  254, 16, 2, 0, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(new Uint8Array([\n      0,   97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1,   28,  0, 65, 0,\n      253, 15, 253, 12,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  253, 186, 1, 26, 11\n    ]));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst getWasmFileName = (useSimd: boolean, useThreads: boolean) => {\n  if (useThreads) {\n    return useSimd ? 'ort-wasm-simd-threaded.wasm' : 'ort-wasm-threaded.wasm';\n  } else {\n    return useSimd ? 'ort-wasm-simd.wasm' : 'ort-wasm.wasm';\n  }\n};\n\nexport const initializeWebAssembly = async(flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error('multiple calls to \\'initializeWebAssembly()\\' detected.');\n  }\n  if (aborted) {\n    throw new Error('previous call to \\'initializeWebAssembly()\\' failed.');\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  const numThreads = flags.numThreads!;\n  const simd = flags.simd!;\n\n  const useThreads = numThreads > 1 && isMultiThreadSupported();\n  const useSimd = simd && isSimdSupported();\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const wasmFileName = getWasmFileName(useSimd, useThreads);\n  const wasmPathOverride = typeof wasmPaths === 'object' ? wasmPaths[wasmFileName] : undefined;\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(new Promise((resolve) => {\n      setTimeout(() => {\n        isTimeout = true;\n        resolve();\n      }, timeout);\n    }));\n  }\n\n  // promise for module initialization\n  tasks.push(new Promise((resolve, reject) => {\n    const factory = useThreads ? ortWasmFactoryThreaded : ortWasmFactory;\n    const config: Partial<OrtWasmModule> = {\n      locateFile: (fileName: string, scriptDirectory: string) => {\n        if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads && fileName.endsWith('.worker.js') &&\n            typeof Blob !== 'undefined') {\n          return URL.createObjectURL(new Blob(\n              [\n                // This require() function is handled by webpack to load file content of the corresponding .worker.js\n                // eslint-disable-next-line @typescript-eslint/no-require-imports\n                require('./binding/ort-wasm-threaded.worker.js')\n              ],\n              {type: 'text/javascript'}));\n        }\n\n        if (fileName.endsWith('.wasm')) {\n          if (wasmPathOverride) {\n            return wasmPathOverride;\n          }\n\n          const prefix = wasmPrefixOverride ?? scriptDirectory;\n\n          if (!BUILD_DEFS.DISABLE_WEBGPU) {\n            if (wasmFileName === 'ort-wasm-simd.wasm') {\n              return prefix + 'ort-wasm-simd.jsep.wasm';\n            } else if (wasmFileName === 'ort-wasm-simd-threaded.wasm') {\n              return prefix + 'ort-wasm-simd-threaded.jsep.wasm';\n            }\n          }\n\n          return prefix + wasmFileName;\n        }\n\n        return scriptDirectory + fileName;\n      }\n    };\n\n    if (!BUILD_DEFS.DISABLE_WASM_THREAD && useThreads) {\n      if (typeof Blob === 'undefined') {\n        config.mainScriptUrlOrBlob = path.join(__dirname, 'ort-wasm-threaded.js');\n      } else {\n        const scriptSourceCode = `var ortWasmThreaded=(function(){var _scriptDir;return ${factory.toString()}})();`;\n        config.mainScriptUrlOrBlob = new Blob([scriptSourceCode], {type: 'text/javascript'});\n      }\n    }\n\n    factory(config).then(\n        // wasm module initialized successfully\n        module => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        });\n  }));\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    initializing = true;\n\n    (wasm as OrtWasmThreadedModule).PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {getInstance} from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions =\n    (options: Record<string, unknown>, prefix: string, seen: WeakSet<Record<string, unknown>>,\n     handler: ExtraOptionsHandler): void => {\n      if (typeof options == 'object' && options !== null) {\n        if (seen.has(options)) {\n          throw new Error('Circular reference in options');\n        } else {\n          seen.add(options);\n        }\n      }\n\n      Object.entries(options).forEach(([key, value]) => {\n        const name = (prefix) ? prefix + key : key;\n        if (typeof value === 'object') {\n          iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n        } else if (typeof value === 'string' || typeof value === 'number') {\n          handler(name, value.toString());\n        } else if (typeof value === 'boolean') {\n          handler(name, (value) ? '1' : '0');\n        } else {\n          throw new Error(`Can't handle extra config type: ${typeof value}`);\n        }\n      });\n    };\n\n/**\n * check web assembly API's last error and throw error if any error occurred.\n * @param message a message used when an error occurred.\n */\nexport const checkLastError = (message: string): void => {\n  const wasm = getInstance();\n\n  const stack = wasm.stackSave();\n  try {\n    const paramsOffset = wasm.stackAlloc(8);\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + 4);\n    const errorCode = wasm.HEAP32[paramsOffset / 4];\n    const errorMessagePointer = wasm.HEAPU32[paramsOffset / 4 + 1];\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n","\nimport worker from \"!!../../../../node_modules/worker-loader/dist/runtime/inline.js\";\n\nexport default function Worker_fn() {\n  return worker(\"/*!\\n* ONNX Runtime Web v1.16.0\\n* Copyright (c) Microsoft Corporation. All rights reserved.\\n* Licensed under the MIT License.\\n*/\\n(()=>{var e={918:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setRunOptions=void 0;const n=r(263),a=r(497);t.setRunOptions=e=>{const t=(0,n.getInstance)();let r=0;const o=[],i=e||{};try{if(void 0===(null==e?void 0:e.logSeverityLevel))i.logSeverityLevel=2;else if(\\\"number\\\"!=typeof e.logSeverityLevel||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(void 0===(null==e?void 0:e.logVerbosityLevel))i.logVerbosityLevel=0;else if(\\\"number\\\"!=typeof e.logVerbosityLevel||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);void 0===(null==e?void 0:e.terminate)&&(i.terminate=!1);let n=0;return void 0!==(null==e?void 0:e.tag)&&(n=(0,a.allocWasmString)(e.tag,o)),r=t._OrtCreateRunOptions(i.logSeverityLevel,i.logVerbosityLevel,!!i.terminate,n),0===r&&(0,a.checkLastError)(\\\"Can't create run options.\\\"),void 0!==(null==e?void 0:e.extra)&&(0,a.iterateExtraOptions)(e.extra,\\\"\\\",new WeakSet,((e,n)=>{const i=(0,a.allocWasmString)(e,o),s=(0,a.allocWasmString)(n,o);0!==t._OrtAddRunConfigEntry(r,i,s)&&(0,a.checkLastError)(`Can't set a run config entry: ${e} - ${n}.`)})),[r,o]}catch(e){throw 0!==r&&t._OrtReleaseRunOptions(r),o.forEach((e=>t._free(e))),e}}},622:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.setSessionOptions=void 0;const n=r(263),a=r(497);t.setSessionOptions=e=>{var t,r,o,i;const s=(0,n.getInstance)();let u=0;const c=[],l=e||{};(e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});const t=e.extra.session;t.use_ort_model_bytes_directly||(t.use_ort_model_bytes_directly=\\\"1\\\"),e.executionProviders&&e.executionProviders.some((e=>\\\"webgpu\\\"===(\\\"string\\\"==typeof e?e:e.name)))&&(e.enableMemPattern=!1)})(l);try{const e=(e=>{switch(e){case\\\"disabled\\\":return 0;case\\\"basic\\\":return 1;case\\\"extended\\\":return 2;case\\\"all\\\":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}})(null!==(t=l.graphOptimizationLevel)&&void 0!==t?t:\\\"all\\\"),f=(e=>{switch(e){case\\\"sequential\\\":return 0;case\\\"parallel\\\":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}})(null!==(r=l.executionMode)&&void 0!==r?r:\\\"sequential\\\"),p=\\\"string\\\"==typeof l.logId?(0,a.allocWasmString)(l.logId,c):0,d=null!==(o=l.logSeverityLevel)&&void 0!==o?o:2;if(!Number.isInteger(d)||d<0||d>4)throw new Error(`log serverity level is not valid: ${d}`);const g=null!==(i=l.logVerbosityLevel)&&void 0!==i?i:0;if(!Number.isInteger(g)||g<0||g>4)throw new Error(`log verbosity level is not valid: ${g}`);const m=\\\"string\\\"==typeof l.optimizedModelFilePath?(0,a.allocWasmString)(l.optimizedModelFilePath,c):0;return u=s._OrtCreateSessionOptions(e,!!l.enableCpuMemArena,!!l.enableMemPattern,f,!!l.enableProfiling,0,p,d,g,m),0===u&&(0,a.checkLastError)(\\\"Can't create session options.\\\"),l.executionProviders&&((e,t,r)=>{for(const o of t){let t=\\\"string\\\"==typeof o?o:o.name;switch(t){case\\\"xnnpack\\\":t=\\\"XNNPACK\\\";break;case\\\"webnn\\\":if(t=\\\"WEBNN\\\",\\\"string\\\"!=typeof o){const t=o;if(null==t?void 0:t.deviceType){const o=(0,a.allocWasmString)(\\\"deviceType\\\",r),i=(0,a.allocWasmString)(t.deviceType,r);0!==(0,n.getInstance)()._OrtAddSessionConfigEntry(e,o,i)&&(0,a.checkLastError)(`Can't set a session config entry: 'deviceType' - ${t.deviceType}.`)}if(null==t?void 0:t.powerPreference){const o=(0,a.allocWasmString)(\\\"powerPreference\\\",r),i=(0,a.allocWasmString)(t.powerPreference,r);0!==(0,n.getInstance)()._OrtAddSessionConfigEntry(e,o,i)&&(0,a.checkLastError)(`Can't set a session config entry: 'powerPreference' - ${t.powerPreference}.`)}}break;case\\\"webgpu\\\":t=\\\"JS\\\";break;case\\\"wasm\\\":case\\\"cpu\\\":continue;default:throw new Error(`not supported execution provider: ${t}`)}const i=(0,a.allocWasmString)(t,r);0!==(0,n.getInstance)()._OrtAppendExecutionProvider(e,i)&&(0,a.checkLastError)(`Can't append execution provider: ${t}.`)}})(u,l.executionProviders,c),void 0!==l.extra&&(0,a.iterateExtraOptions)(l.extra,\\\"\\\",new WeakSet,((e,t)=>{const r=(0,a.allocWasmString)(e,c),n=(0,a.allocWasmString)(t,c);0!==s._OrtAddSessionConfigEntry(u,r,n)&&(0,a.checkLastError)(`Can't set a session config entry: ${e} - ${t}.`)})),[u,c]}catch(e){throw 0!==u&&s._OrtReleaseSessionOptions(u),c.forEach((e=>s._free(e))),e}}},917:(e,t)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.logLevelStringToEnum=t.tensorTypeToTypedArrayConstructor=t.getTensorElementSize=t.tensorDataTypeEnumToString=t.tensorDataTypeStringToEnum=void 0,t.tensorDataTypeStringToEnum=e=>{switch(e){case\\\"int8\\\":return 3;case\\\"uint8\\\":return 2;case\\\"bool\\\":return 9;case\\\"int16\\\":return 5;case\\\"uint16\\\":return 4;case\\\"int32\\\":return 6;case\\\"uint32\\\":return 12;case\\\"float16\\\":return 10;case\\\"float32\\\":return 1;case\\\"float64\\\":return 11;case\\\"string\\\":return 8;case\\\"int64\\\":return 7;case\\\"uint64\\\":return 13;default:throw new Error(`unsupported data type: ${e}`)}},t.tensorDataTypeEnumToString=e=>{switch(e){case 3:return\\\"int8\\\";case 2:return\\\"uint8\\\";case 9:return\\\"bool\\\";case 5:return\\\"int16\\\";case 4:return\\\"uint16\\\";case 6:return\\\"int32\\\";case 12:return\\\"uint32\\\";case 10:return\\\"float16\\\";case 1:return\\\"float32\\\";case 11:return\\\"float64\\\";case 8:return\\\"string\\\";case 7:return\\\"int64\\\";case 13:return\\\"uint64\\\";default:throw new Error(`unsupported data type: ${e}`)}},t.getTensorElementSize=e=>[void 0,4,1,1,2,2,4,8,void 0,1,2,8,4,8,void 0,void 0,void 0][e],t.tensorTypeToTypedArrayConstructor=e=>{switch(e){case\\\"float16\\\":case\\\"uint16\\\":return Uint16Array;case\\\"float32\\\":return Float32Array;case\\\"uint8\\\":case\\\"bool\\\":return Uint8Array;case\\\"int8\\\":return Int8Array;case\\\"int16\\\":return Int16Array;case\\\"int32\\\":return Int32Array;case\\\"float64\\\":return Float64Array;case\\\"uint32\\\":return Uint32Array;case\\\"int64\\\":return BigInt64Array;case\\\"uint64\\\":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},t.logLevelStringToEnum=e=>{switch(e){case\\\"verbose\\\":return 0;case\\\"info\\\":return 1;case\\\"warning\\\":return 2;case\\\"error\\\":return 3;case\\\"fatal\\\":return 4;default:throw new Error(`unsupported logging level: ${e}`)}}},259:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.extractTransferableBuffers=t.endProfiling=t.run=t.releaseSession=t.createSession=t.createSessionFinalize=t.createSessionAllocate=t.initRuntime=void 0;const n=r(918),a=r(622),o=r(917),i=r(263),s=r(497);t.initRuntime=async e=>{var t,r;t=e.wasm.numThreads,r=(0,o.logLevelStringToEnum)(e.logLevel),0!==(0,i.getInstance)()._OrtInit(t,r)&&(0,s.checkLastError)(\\\"Can't initialize onnxruntime.\\\")};const u=new Map;t.createSessionAllocate=e=>{const t=(0,i.getInstance)(),r=t._malloc(e.byteLength);if(0===r)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return t.HEAPU8.set(e,r),[r,e.byteLength]},t.createSessionFinalize=(e,t)=>{const r=(0,i.getInstance)();let n=0,o=0,c=[];const l=[],f=[];try{[o,c]=(0,a.setSessionOptions)(t),n=r._OrtCreateSession(e[0],e[1],o),0===n&&(0,s.checkLastError)(\\\"Can't create a session.\\\");const[p,d]=(e=>{const t=(0,i.getInstance)(),r=t.stackSave();try{const r=t.stackAlloc(8);return 0!==t._OrtGetInputOutputCount(e,r,r+4)&&(0,s.checkLastError)(\\\"Can't get session input/output count.\\\"),[t.HEAP32[r/4],t.HEAP32[r/4+1]]}finally{t.stackRestore(r)}})(n),g=[],m=[];for(let e=0;e<p;e++){const t=r._OrtGetInputName(n,e);0===t&&(0,s.checkLastError)(\\\"Can't get an input name.\\\"),l.push(t),g.push(r.UTF8ToString(t))}for(let e=0;e<d;e++){const t=r._OrtGetOutputName(n,e);0===t&&(0,s.checkLastError)(\\\"Can't get an output name.\\\"),f.push(t),m.push(r.UTF8ToString(t))}return u.set(n,[n,l,f]),[n,g,m]}catch(e){throw l.forEach((e=>r._OrtFree(e))),f.forEach((e=>r._OrtFree(e))),0!==n&&r._OrtReleaseSession(n),e}finally{r._free(e[0]),0!==o&&r._OrtReleaseSessionOptions(o),c.forEach((e=>r._free(e)))}},t.createSession=(e,r)=>{const n=(0,t.createSessionAllocate)(e);return(0,t.createSessionFinalize)(n,r)},t.releaseSession=e=>{const t=(0,i.getInstance)(),r=u.get(e);if(!r)throw new Error(`cannot release session. invalid session id: ${e}`);const[n,a,o]=r;a.forEach((e=>t._OrtFree(e))),o.forEach((e=>t._OrtFree(e))),t._OrtReleaseSession(n),u.delete(e)},t.run=async(e,t,r,a,c)=>{const l=(0,i.getInstance)(),f=u.get(e);if(!f)throw new Error(`cannot run inference. invalid session id: ${e}`);const[p,d,g]=f,m=t.length,h=a.length;let y=0,v=[];const b=[],w=[];try{[y,v]=(0,n.setRunOptions)(c);for(let e=0;e<m;e++){const t=r[e][0],n=r[e][1],a=r[e][2];let i,u;if(Array.isArray(a)){u=4*a.length,i=l._malloc(u),w.push(i);let e=i/4;for(let t=0;t<a.length;t++){if(\\\"string\\\"!=typeof a[t])throw new TypeError(`tensor data at index ${t} is not a string`);l.HEAPU32[e++]=(0,s.allocWasmString)(a[t],w)}}else u=a.byteLength,i=l._malloc(u),w.push(i),l.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,u),i);const c=l.stackSave(),f=l.stackAlloc(4*n.length);try{let r=f/4;n.forEach((e=>l.HEAP32[r++]=e));const a=l._OrtCreateTensor((0,o.tensorDataTypeStringToEnum)(t),i,u,f,n.length);0===a&&(0,s.checkLastError)(`Can't create tensor for input[${e}].`),b.push(a)}finally{l.stackRestore(c)}}const e=l.stackSave(),i=l.stackAlloc(4*m),u=l.stackAlloc(4*m),f=l.stackAlloc(4*h),_=l.stackAlloc(4*h);try{let e=i/4,r=u/4,n=f/4,c=_/4;for(let n=0;n<m;n++)l.HEAPU32[e++]=b[n],l.HEAPU32[r++]=d[t[n]];for(let e=0;e<h;e++)l.HEAPU32[n++]=0,l.HEAPU32[c++]=g[a[e]];let v=l._OrtRun(p,u,i,m,_,h,f,y);const w=l.jsepRunPromise;w&&void 0!==w.then&&(v=await w);const O=[];0!==v&&(0,s.checkLastError)(\\\"failed to call OrtRun().\\\");for(let e=0;e<h;e++){const t=l.HEAPU32[f/4+e],r=l.stackSave(),n=l.stackAlloc(16);let a,i=0;try{v=l._OrtGetTensorData(t,n,n+4,n+8,n+12),0!==v&&(0,s.checkLastError)(`Can't access output tensor data on index ${e}.`);let r=n/4;const u=l.HEAPU32[r++];i=l.HEAPU32[r++];const c=l.HEAPU32[r++],f=l.HEAPU32[r++],p=[];for(let e=0;e<f;e++)p.push(l.HEAPU32[c/4+e]);l._OrtFree(c);const d=0===p.length?1:p.reduce(((e,t)=>e*t));if(a=(0,o.tensorDataTypeEnumToString)(u),\\\"string\\\"===a){const e=[];let t=i/4;for(let r=0;r<d;r++){const n=l.HEAPU32[t++],a=r===d-1?void 0:l.HEAPU32[t]-n;e.push(l.UTF8ToString(n,a))}O.push([a,p,e])}else{const e=new((0,o.tensorTypeToTypedArrayConstructor)(a))(d);new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(l.HEAPU8.subarray(i,i+e.byteLength)),O.push([a,p,e])}}finally{l.stackRestore(r),\\\"string\\\"===a&&i&&l._free(i),l._OrtReleaseTensor(t)}}return O}finally{l.stackRestore(e)}}finally{b.forEach((e=>l._OrtReleaseTensor(e))),w.forEach((e=>l._free(e))),0!==y&&l._OrtReleaseRunOptions(y),v.forEach((e=>l._free(e)))}},t.endProfiling=e=>{const t=(0,i.getInstance)(),r=u.get(e);if(!r)throw new Error(\\\"invalid session id\\\");const n=r[0],a=t._OrtEndProfiling(n);0===a&&(0,s.checkLastError)(\\\"Can't get an profile file name.\\\"),t._OrtFree(a)},t.extractTransferableBuffers=e=>{const t=[];for(const r of e){const e=r[2];!Array.isArray(e)&&e.buffer&&t.push(e.buffer)}return t}},263:function(e,t,r){\\\"use strict\\\";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var a=Object.getOwnPropertyDescriptor(t,r);a&&!(\\\"get\\\"in a?!t.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,a)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\\\"default\\\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)\\\"default\\\"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return a(t,e),t};Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.dispose=t.getInstance=t.initializeWebAssembly=void 0;const i=o(r(449)),s=r(932),u=r(474);let c,l=!1,f=!1,p=!1;t.initializeWebAssembly=async e=>{if(l)return Promise.resolve();if(f)throw new Error(\\\"multiple calls to 'initializeWebAssembly()' detected.\\\");if(p)throw new Error(\\\"previous call to 'initializeWebAssembly()' failed.\\\");f=!0;const t=e.initTimeout,n=e.numThreads,a=e.simd,o=n>1&&(()=>{try{return\\\"undefined\\\"!=typeof SharedArrayBuffer&&(\\\"undefined\\\"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(e){return!1}})(),d=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(e){return!1}})(),g=e.wasmPaths,m=\\\"string\\\"==typeof g?g:void 0,h=((e,t)=>t?e?\\\"ort-wasm-simd-threaded.wasm\\\":\\\"ort-wasm-threaded.wasm\\\":e?\\\"ort-wasm-simd.wasm\\\":\\\"ort-wasm.wasm\\\")(d,o),y=\\\"object\\\"==typeof g?g[h]:void 0;let v=!1;const b=[];if(t>0&&b.push(new Promise((e=>{setTimeout((()=>{v=!0,e()}),t)}))),b.push(new Promise(((e,t)=>{const n=o?u:s,a={locateFile:(e,t)=>o&&e.endsWith(\\\".worker.js\\\")&&\\\"undefined\\\"!=typeof Blob?URL.createObjectURL(new Blob([r(154)],{type:\\\"text/javascript\\\"})):e.endsWith(\\\".wasm\\\")?y||(null!=m?m:t)+h:t+e};if(o)if(\\\"undefined\\\"==typeof Blob)a.mainScriptUrlOrBlob=i.join(__dirname,\\\"ort-wasm-threaded.js\\\");else{const e=`var ortWasmThreaded=(function(){var _scriptDir;return ${n.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([e],{type:\\\"text/javascript\\\"})}n(a).then((t=>{f=!1,l=!0,c=t,e()}),(e=>{f=!1,p=!0,t(e)}))}))),await Promise.race(b),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${t}ms`)},t.getInstance=()=>{if(l&&c)return c;throw new Error(\\\"WebAssembly is not initialized yet.\\\")},t.dispose=()=>{var e;!l||f||p||(f=!0,null===(e=c.PThread)||void 0===e||e.terminateAllThreads(),c=void 0,f=!1,l=!1,p=!0)}},497:(e,t,r)=>{\\\"use strict\\\";Object.defineProperty(t,\\\"__esModule\\\",{value:!0}),t.checkLastError=t.iterateExtraOptions=t.allocWasmString=void 0;const n=r(263);t.allocWasmString=(e,t)=>{const r=(0,n.getInstance)(),a=r.lengthBytesUTF8(e)+1,o=r._malloc(a);return r.stringToUTF8(e,o,a),t.push(o),o},t.iterateExtraOptions=(e,r,n,a)=>{if(\\\"object\\\"==typeof e&&null!==e){if(n.has(e))throw new Error(\\\"Circular reference in options\\\");n.add(e)}Object.entries(e).forEach((([e,o])=>{const i=r?r+e:e;if(\\\"object\\\"==typeof o)(0,t.iterateExtraOptions)(o,i+\\\".\\\",n,a);else if(\\\"string\\\"==typeof o||\\\"number\\\"==typeof o)a(i,o.toString());else{if(\\\"boolean\\\"!=typeof o)throw new Error(\\\"Can't handle extra config type: \\\"+typeof o);a(i,o?\\\"1\\\":\\\"0\\\")}}))},t.checkLastError=e=>{const t=(0,n.getInstance)(),r=t.stackSave();try{const r=t.stackAlloc(8);t._OrtGetLastError(r,r+4);const n=t.HEAP32[r/4],a=t.HEAPU32[r/4+1],o=a?t.UTF8ToString(a):\\\"\\\";throw new Error(`${e} ERROR_CODE: ${n}, ERROR_MESSAGE: ${o}`)}finally{t.stackRestore(r)}}},474:(e,t,r)=>{var _scriptDir,n=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function t(){return C.buffer!=P.buffer&&H(),P}function n(){return C.buffer!=P.buffer&&H(),I}function a(){return C.buffer!=P.buffer&&H(),x}function o(){return C.buffer!=P.buffer&&H(),U}function i(){return C.buffer!=P.buffer&&H(),L}var s,u,c;s||(s=void 0!==e?e:{}),s.ready=new Promise(((e,t)=>{u=e,c=t}));var l,f,p,d=Object.assign({},s),g=\\\"./this.program\\\",m=(e,t)=>{throw t},h=\\\"object\\\"==typeof window,y=\\\"function\\\"==typeof importScripts,v=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,b=s.ENVIRONMENT_IS_PTHREAD||!1,w=\\\"\\\";function _(e){return s.locateFile?s.locateFile(e,w):w+e}if(v){var O=r(384),S=r(908);let t;w=y?S.dirname(w)+\\\"/\\\":__dirname+\\\"/\\\",l=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):S.normalize(e),O.readFileSync(e,t?void 0:\\\"utf8\\\")),p=e=>((e=l(e,!0)).buffer||(e=new Uint8Array(e)),e),f=(e,t,r,n=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):S.normalize(e),O.readFile(e,n?void 0:\\\"utf8\\\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!s.thisProgram&&1<process.argv.length&&(g=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),m=(e,t)=>{throw process.exitCode=e,t},s.inspect=()=>\\\"[Emscripten Module object]\\\";try{t=r(925)}catch(e){throw console.error('The \\\"worker_threads\\\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=t.Worker}else(h||y)&&(y?w=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(w=document.currentScript.src),_scriptDir&&(w=_scriptDir),w=0!==w.indexOf(\\\"blob:\\\")?w.substr(0,w.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",v||(l=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},y&&(p=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),f=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\\\"GET\\\",e,!0),n.responseType=\\\"arraybuffer\\\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)}));v&&\\\"undefined\\\"==typeof performance&&(global.performance=r(953).performance);var E=console.log.bind(console),T=console.warn.bind(console);v&&(E=(...e)=>O.writeSync(1,e.join(\\\" \\\")+\\\"\\\\n\\\"),T=(...e)=>O.writeSync(2,e.join(\\\" \\\")+\\\"\\\\n\\\"));var A,M=s.print||E,R=s.printErr||T;Object.assign(s,d),d=null,s.thisProgram&&(g=s.thisProgram),s.quit&&(m=s.quit),s.wasmBinary&&(A=s.wasmBinary);var k=s.noExitRuntime||!0;\\\"object\\\"!=typeof WebAssembly&&Z(\\\"no native wasm support detected\\\");var C,F,D,P,I,x,U,L,W=!1;function H(){var e=C.buffer;s.HEAP8=P=new Int8Array(e),s.HEAP16=new Int16Array(e),s.HEAP32=x=new Int32Array(e),s.HEAPU8=I=new Uint8Array(e),s.HEAPU16=new Uint16Array(e),s.HEAPU32=U=new Uint32Array(e),s.HEAPF32=new Float32Array(e),s.HEAPF64=L=new Float64Array(e)}var Y=s.INITIAL_MEMORY||16777216;if(5242880<=Y||Z(\\\"INITIAL_MEMORY should be larger than STACK_SIZE, was \\\"+Y+\\\"! (STACK_SIZE=5242880)\\\"),b)C=s.wasmMemory;else if(s.wasmMemory)C=s.wasmMemory;else if(!((C=new WebAssembly.Memory({initial:Y/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw R(\\\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\\\"),v&&R(\\\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\\\"),Error(\\\"bad memory\\\");H(),Y=C.buffer.byteLength;var j,z=[],G=[],N=[],B=0;function $(){return k||0<B}function q(){var e=s.preRun.shift();z.unshift(e)}var V,J=0,X=null,K=null;function Z(e){throw s.onAbort&&s.onAbort(e),R(e=\\\"Aborted(\\\"+e+\\\")\\\"),W=!0,D=1,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),c(e),e}function Q(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}function ee(e){try{if(e==V&&A)return new Uint8Array(A);if(p)return p(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){Z(e)}}function te(e,t,r){return function(e){if(!A&&(h||y)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>ee(e)));if(f)return new Promise(((t,r)=>{f(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>ee(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{R(\\\"failed to asynchronously prepare wasm: \\\"+e),Z(e)}))}function re(e){this.name=\\\"ExitStatus\\\",this.message=\\\"Program terminated with exit(\\\"+e+\\\")\\\",this.status=e}function ne(e){e.terminate(),e.onmessage=()=>{}}function ae(e){(e=pe.Fa[e])||Z(),pe.ab(e)}function oe(e){var t=pe.Va();if(!t)return 6;pe.Ia.push(t),pe.Fa[e.Ha]=t,t.Ha=e.Ha;var r={cmd:\\\"run\\\",start_routine:e.bb,arg:e.Ta,pthread_ptr:e.Ha};return v&&t.unref(),t.postMessage(r,e.ib),0}Q(V=\\\"ort-wasm-threaded.wasm\\\")||(V=_(V));var ie=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function se(e,t,r){var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&ie)return ie.decode(e.buffer instanceof SharedArrayBuffer?e.slice(t,r):e.subarray(t,r));for(n=\\\"\\\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n}function ue(e,t){return(e>>>=0)?se(n(),e,t):\\\"\\\"}function ce(e){if(b)return Be(1,1,e);D=e,$()||(pe.cb(),s.onExit&&s.onExit(e),W=!0),m(e,new re(e))}function le(e){if(D=e,b)throw ge(e),\\\"unwind\\\";ce(e)}function fe(e){e instanceof re||\\\"unwind\\\"==e||m(1,e)}var pe={La:[],Ia:[],Ra:[],Fa:{},Wa:function(){b&&pe.Xa()},lb:function(){},Xa:function(){pe.receiveObjectTransfer=pe.$a,pe.threadInitTLS=pe.Qa,pe.setExitStatus=pe.Pa,k=!1},Pa:function(e){D=e},nb:[\\\"$terminateWorker\\\"],cb:function(){for(var e of pe.Ia)ne(e);for(e of pe.La)ne(e);pe.La=[],pe.Ia=[],pe.Fa=[]},ab:function(e){var t=e.Ha;delete pe.Fa[t],pe.La.push(e),pe.Ia.splice(pe.Ia.indexOf(e),1),e.Ha=0,pt(t)},$a:function(){},Qa:function(){pe.Ra.forEach((e=>e()))},Za:e=>new Promise((t=>{e.onmessage=r=>{var n=(r=r.data).cmd;if(e.Ha&&(pe.Ua=e.Ha),r.targetThread&&r.targetThread!=ut()){var a=pe.Fa[r.mb];a?a.postMessage(r,r.transferList):R('Internal error! Worker sent a message \\\"'+n+'\\\" to target pthread '+r.targetThread+\\\", but that thread no longer exists!\\\")}else\\\"checkMailbox\\\"===n?xe():\\\"spawnThread\\\"===n?oe(r):\\\"cleanupThread\\\"===n?ae(r.thread):\\\"killThread\\\"===n?(r=r.thread,n=pe.Fa[r],delete pe.Fa[r],ne(n),pt(r),pe.Ia.splice(pe.Ia.indexOf(n),1),n.Ha=0):\\\"cancelThread\\\"===n?pe.Fa[r.thread].postMessage({cmd:\\\"cancel\\\"}):\\\"loaded\\\"===n?(e.loaded=!0,t(e)):\\\"print\\\"===n?M(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text):\\\"printErr\\\"===n?R(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text):\\\"alert\\\"===n?alert(\\\"Thread \\\"+r.threadId+\\\": \\\"+r.text):\\\"setimmediate\\\"===r.target?e.postMessage(r):\\\"callHandler\\\"===n?s[r.handler](...r.args):n&&R(\\\"worker sent an unknown command \\\"+n);pe.Ua=void 0},e.onerror=e=>{throw R(\\\"worker sent an error! \\\"+e.filename+\\\":\\\"+e.lineno+\\\": \\\"+e.message),e},v&&(e.on(\\\"message\\\",(function(t){e.onmessage({data:t})})),e.on(\\\"error\\\",(function(t){e.onerror(t)})));var r,n=[];for(r of[\\\"onExit\\\",\\\"onAbort\\\",\\\"print\\\",\\\"printErr\\\"])s.hasOwnProperty(r)&&n.push(r);e.postMessage({cmd:\\\"load\\\",handlers:n,urlOrBlob:s.mainScriptUrlOrBlob||_scriptDir,wasmMemory:C,wasmModule:F})})),Ya:function(e){e()},Sa:function(){var e=_(\\\"ort-wasm-threaded.worker.js\\\");e=new Worker(e),pe.La.push(e)},Va:function(){return 0==pe.La.length&&(pe.Sa(),pe.Za(pe.La[0])),pe.La.pop()}};function de(e){for(;0<e.length;)e.shift()(s)}function ge(e){if(b)return Be(2,0,e);le(e)}s.PThread=pe,s.establishStackSpace=function(){var e=ut(),t=a()[e+52>>2>>>0];ht(t,t-(e=a()[e+56>>2>>>0])),vt(t)};var me=[];function he(e,t,r,n){return b?Be(3,1,e,t,r,n):ye(e,t,r,n)}function ye(e,t,r,n){if(\\\"undefined\\\"==typeof SharedArrayBuffer)return R(\\\"Current environment does not support SharedArrayBuffer, pthreads are not available!\\\"),6;var a=[];return b&&0===a.length?he(e,t,r,n):(e={bb:r,Ha:e,Ta:n,ib:a},b?(e.kb=\\\"spawnThread\\\",postMessage(e,a),0):oe(e))}function ve(e,t,r){return b?Be(4,1,e,t,r):0}function be(e,t){if(b)return Be(5,1,e,t)}function we(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t}function _e(e,t,r,n){if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++>>>0]=i}else{if(2047>=i){if(r+1>=n)break;t[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++>>>0]=224|i>>12}else{if(r+3>=n)break;t[r++>>>0]=240|i>>18,t[r++>>>0]=128|i>>12&63}t[r++>>>0]=128|i>>6&63}t[r++>>>0]=128|63&i}}return t[r>>>0]=0,r-a}function Oe(e,t,r){return _e(e,n(),t,r)}function Se(e,t){if(b)return Be(6,1,e,t)}function Ee(e,t,r){if(b)return Be(7,1,e,t,r)}function Te(e,t,r){return b?Be(8,1,e,t,r):0}function Ae(e,t){if(b)return Be(9,1,e,t)}function Me(e,t,r){if(b)return Be(10,1,e,t,r)}function Re(e,t,r,n){if(b)return Be(11,1,e,t,r,n)}function ke(e,t,r,n){if(b)return Be(12,1,e,t,r,n)}function Ce(e,t,r,n){if(b)return Be(13,1,e,t,r,n)}function Fe(e){if(b)return Be(14,1,e)}function De(e,t){if(b)return Be(15,1,e,t)}function Pe(e,t,r){if(b)return Be(16,1,e,t,r)}function Ie(e){\\\"function\\\"==typeof Atomics.jb&&(Atomics.jb(a(),e>>2,e).value.then(xe),e+=128,Atomics.store(a(),e>>2,1))}function xe(){var e=ut();e&&(Ie(e),function(e){if(!W)try{if(mt(),!$())try{b?gt(D):le(D)}catch(e){fe(e)}}catch(e){fe(e)}}())}function Ue(e){return o()[e>>>2]+4294967296*a()[e+4>>>2]}function Le(e){return 0==e%4&&(0!=e%100||0==e%400)}s.invokeEntryPoint=function(e,t){var r=me[e];r||(e>=me.length&&(me.length=e+1),me[e]=r=j.get(e)),e=r(t),$()?pe.Pa(e):gt(e)},s.__emscripten_thread_mailbox_await=Ie,s.checkMailbox=xe;var We,He=[0,31,60,91,121,152,182,213,244,274,305,335],Ye=[0,31,59,90,120,151,181,212,243,273,304,334];function je(e){return(Le(e.getFullYear())?He:Ye)[e.getMonth()]+e.getDate()-1}function ze(e,t,r,n,a,o,i){return b?Be(17,1,e,t,r,n,a,o,i):-52}function Ge(e,t,r,n,a,o){if(b)return Be(18,1,e,t,r,n,a,o)}function Ne(e){var t=we(e)+1,r=ct(t);return r&&Oe(e,r,t),r}function Be(e,t){var r=arguments.length-2,n=arguments;return function(e){var t=yt();return e=e(),vt(t),e}((()=>{for(var a=bt(8*r),o=a>>3,s=0;s<r;s++){var u=n[2+s];i()[o+s>>>0]=u}return ft(e,r,a,t)}))}We=v?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.timeOrigin+performance.now();var $e,qe=[],Ve={};function Je(){if(!$e){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:g||\\\"./this.program\\\"};for(e in Ve)void 0===Ve[e]?delete t[e]:t[e]=Ve[e];var r=[];for(e in t)r.push(e+\\\"=\\\"+t[e]);$e=r}return $e}function Xe(e,r){if(b)return Be(19,1,e,r);var n=0;return Je().forEach((function(a,i){var s=r+n;for(i=o()[e+4*i>>2>>>0]=s,s=0;s<a.length;++s)t()[i++>>0>>>0]=a.charCodeAt(s);t()[i>>0>>>0]=0,n+=a.length+1})),0}function Ke(e,t){if(b)return Be(20,1,e,t);var r=Je();o()[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),o()[t>>2>>>0]=n,0}function Ze(e){return b?Be(21,1,e):52}function Qe(e,t,r,n){return b?Be(22,1,e,t,r,n):52}function et(e,t,r,n,a){return b?Be(23,1,e,t,r,n,a):70}var tt=[null,[],[]];function rt(e,t,r,a){if(b)return Be(24,1,e,t,r,a);for(var i=0,s=0;s<r;s++){var u=o()[t>>2>>>0],c=o()[t+4>>2>>>0];t+=8;for(var l=0;l<c;l++){var f=n()[u+l>>>0],p=tt[e];0===f||10===f?((1===e?M:R)(se(p,0)),p.length=0):p.push(f)}i+=c}return o()[a>>2>>>0]=i,0}var nt=[31,29,31,30,31,30,31,31,30,31,30,31],at=[31,28,31,30,31,30,31,31,30,31,30,31];function ot(e,r,n,o){function i(e,t,r){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=r[0]+e;return e}function s(e,t){return i(e,t,\\\"0\\\")}function u(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function c(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function l(e){var t=e.Ja;for(e=new Date(new Date(e.Ka+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=(Le(e.getFullYear())?nt:at)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=c(new Date(e.getFullYear(),0,4)),r=c(r),0>=u(t,e)?0>=u(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var f=a()[o+40>>2>>>0];for(var p in o={gb:a()[o>>2>>>0],fb:a()[o+4>>2>>>0],Ma:a()[o+8>>2>>>0],Oa:a()[o+12>>2>>>0],Na:a()[o+16>>2>>>0],Ka:a()[o+20>>2>>>0],Ga:a()[o+24>>2>>>0],Ja:a()[o+28>>2>>>0],ob:a()[o+32>>2>>>0],eb:a()[o+36>>2>>>0],hb:f?ue(f):\\\"\\\"},n=ue(n),f={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})n=n.replace(new RegExp(p,\\\"g\\\"),f[p]);var d=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),g=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(p in f={\\\"%a\\\":function(e){return d[e.Ga].substring(0,3)},\\\"%A\\\":function(e){return d[e.Ga]},\\\"%b\\\":function(e){return g[e.Na].substring(0,3)},\\\"%B\\\":function(e){return g[e.Na]},\\\"%C\\\":function(e){return s((e.Ka+1900)/100|0,2)},\\\"%d\\\":function(e){return s(e.Oa,2)},\\\"%e\\\":function(e){return i(e.Oa,2,\\\" \\\")},\\\"%g\\\":function(e){return l(e).toString().substring(2)},\\\"%G\\\":function(e){return l(e)},\\\"%H\\\":function(e){return s(e.Ma,2)},\\\"%I\\\":function(e){return 0==(e=e.Ma)?e=12:12<e&&(e-=12),s(e,2)},\\\"%j\\\":function(e){for(var t=0,r=0;r<=e.Na-1;t+=(Le(e.Ka+1900)?nt:at)[r++]);return s(e.Oa+t,3)},\\\"%m\\\":function(e){return s(e.Na+1,2)},\\\"%M\\\":function(e){return s(e.fb,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.Ma&&12>e.Ma?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return s(e.gb,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.Ga||7},\\\"%U\\\":function(e){return s(Math.floor((e.Ja+7-e.Ga)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.Ja+7-(e.Ga+6)%7)/7);if(2>=(e.Ga+371-e.Ja-2)%7&&t++,t)53==t&&(4==(r=(e.Ga+371-e.Ja)%7)||3==r&&Le(e.Ka)||(t=1));else{t=52;var r=(e.Ga+7-e.Ja-1)%7;(4==r||5==r&&Le(e.Ka%400-1))&&t++}return s(t,2)},\\\"%w\\\":function(e){return e.Ga},\\\"%W\\\":function(e){return s(Math.floor((e.Ja+7-(e.Ga+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.Ka+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.Ka+1900},\\\"%z\\\":function(e){var t=0<=(e=e.eb);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.hb},\\\"%%\\\":function(){return\\\"%\\\"}},n=n.replace(/%%/g,\\\"\\\\0\\\\0\\\"),f)n.includes(p)&&(n=n.replace(new RegExp(p,\\\"g\\\"),f[p](o)));return p=function(e){var t=Array(we(e)+1);return _e(e,t,0,t.length),t}(n=n.replace(/\\\\0\\\\0/g,\\\"%\\\")),p.length>r?0:(function(e,r){t().set(e,r>>>0)}(p,e),p.length-1)}pe.Wa();var it=[null,ce,ge,he,ve,be,Se,Ee,Te,Ae,Me,Re,ke,Ce,Fe,De,Pe,ze,Ge,Xe,Ke,Ze,Qe,et,rt],st={v:function(){Z(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},P:function(e){lt(e,!y,1,!h),pe.Qa()},h:function(e){b?postMessage({cmd:\\\"cleanupThread\\\",thread:e}):ae(e)},D:ye,e:ve,V:be,z:Se,B:Ee,p:Te,T:Ae,K:Me,S:Re,j:ke,A:Ce,x:Fe,U:De,y:Pe,E:function(){return 131072},m:function(){return!0},s:function(e,t){e==t?setTimeout((()=>xe())):b?postMessage({targetThread:e,cmd:\\\"checkMailbox\\\"}):(e=pe.Fa[e])&&e.postMessage({cmd:\\\"checkMailbox\\\"})},N:function(){return-1},O:Ie,l:function(e){v&&pe.Fa[e].ref()},H:function(e,t){e=new Date(1e3*Ue(e)),a()[t>>2>>>0]=e.getUTCSeconds(),a()[t+4>>2>>>0]=e.getUTCMinutes(),a()[t+8>>2>>>0]=e.getUTCHours(),a()[t+12>>2>>>0]=e.getUTCDate(),a()[t+16>>2>>>0]=e.getUTCMonth(),a()[t+20>>2>>>0]=e.getUTCFullYear()-1900,a()[t+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[t+28>>2>>>0]=e},I:function(e,t){e=new Date(1e3*Ue(e)),a()[t>>2>>>0]=e.getSeconds(),a()[t+4>>2>>>0]=e.getMinutes(),a()[t+8>>2>>>0]=e.getHours(),a()[t+12>>2>>>0]=e.getDate(),a()[t+16>>2>>>0]=e.getMonth(),a()[t+20>>2>>>0]=e.getFullYear()-1900,a()[t+24>>2>>>0]=e.getDay();var r=0|je(e);a()[t+28>>2>>>0]=r,a()[t+36>>2>>>0]=-60*e.getTimezoneOffset(),r=new Date(e.getFullYear(),6,1).getTimezoneOffset();var n=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r)),a()[t+32>>2>>>0]=e},J:function(e){var t=new Date(a()[e+20>>2>>>0]+1900,a()[e+16>>2>>>0],a()[e+12>>2>>>0],a()[e+8>>2>>>0],a()[e+4>>2>>>0],a()[e>>2>>>0],0),r=a()[e+32>>2>>>0],n=t.getTimezoneOffset(),o=new Date(t.getFullYear(),6,1).getTimezoneOffset(),i=new Date(t.getFullYear(),0,1).getTimezoneOffset(),s=Math.min(i,o);return 0>r?a()[e+32>>2>>>0]=Number(o!=i&&s==n):0<r!=(s==n)&&(o=Math.max(i,o),t.setTime(t.getTime()+6e4*((0<r?s:o)-n))),a()[e+24>>2>>>0]=t.getDay(),r=0|je(t),a()[e+28>>2>>>0]=r,a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),a()[e+20>>2>>>0]=t.getYear(),t.getTime()/1e3|0},F:ze,G:Ge,r:function(e,t,r){function n(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var i=(new Date).getFullYear(),s=new Date(i,0,1),u=new Date(i,6,1);i=s.getTimezoneOffset();var c=u.getTimezoneOffset(),l=Math.max(i,c);o()[e>>2>>>0]=60*l,a()[t>>2>>>0]=Number(i!=c),e=n(s),t=n(u),e=Ne(e),t=Ne(t),c<i?(o()[r>>2>>>0]=e,o()[r+4>>2>>>0]=t):(o()[r>>2>>>0]=t,o()[r+4>>2>>>0]=e)},b:function(){Z(\\\"\\\")},W:function(){Z(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},i:function(){},f:function(){return Date.now()},k:function(){throw B+=1,\\\"unwind\\\"},t:function(){return 4294901760},c:We,u:function(){return v?r(993).cpus().length:navigator.hardwareConcurrency},L:function(e,t,r){qe.length=t,r>>=3;for(var n=0;n<t;n++)qe[n]=i()[r+n>>>0];return it[e].apply(null,qe)},q:function(e){var t=n().length;if((e>>>=0)<=t||4294901760<e)return!1;for(var r=1;4>=r;r*=2){var a=t*(1+.2/r);a=Math.min(a,e+100663296);var o=Math,i=o.min;a=Math.max(e,a),a+=(65536-a%65536)%65536;e:{var s=C.buffer;try{C.grow(i.call(o,4294901760,a)-s.byteLength+65535>>>16),H();var u=1;break e}catch(e){}u=void 0}if(u)return!0}return!1},Q:Xe,R:Ke,C:le,d:Ze,g:Qe,n:et,w:rt,a:C||s.wasmMemory,M:ot,o:function(e,t,r,n){return ot(e,t,r,n)}};!function(){function e(e,t){return e=e.exports,s.asm=e,pe.Ra.push(s.asm.ta),j=s.asm.ua,G.unshift(s.asm.X),F=t,pe.Ya((()=>{if(J--,s.monitorRunDependencies&&s.monitorRunDependencies(J),0==J&&(null!==X&&(clearInterval(X),X=null),K)){var e=K;K=null,e()}})),e}var t={a:st};if(J++,s.monitorRunDependencies&&s.monitorRunDependencies(J),s.instantiateWasm)try{return s.instantiateWasm(t,e)}catch(e){R(\\\"Module.instantiateWasm callback failed with error: \\\"+e),c(e)}(function(e,t){var r=V;return A||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||Q(r)||r.startsWith(\\\"file://\\\")||v||\\\"function\\\"!=typeof fetch?te(r,e,t):fetch(r,{credentials:\\\"same-origin\\\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return R(\\\"wasm streaming compile failed: \\\"+n),R(\\\"falling back to ArrayBuffer instantiation\\\"),te(r,e,t)}))))})(t,(function(t){e(t.instance,t.module)})).catch(c)}(),s._OrtInit=function(){return(s._OrtInit=s.asm.Y).apply(null,arguments)},s._OrtGetLastError=function(){return(s._OrtGetLastError=s.asm.Z).apply(null,arguments)},s._OrtCreateSessionOptions=function(){return(s._OrtCreateSessionOptions=s.asm._).apply(null,arguments)},s._OrtAppendExecutionProvider=function(){return(s._OrtAppendExecutionProvider=s.asm.$).apply(null,arguments)},s._OrtAddSessionConfigEntry=function(){return(s._OrtAddSessionConfigEntry=s.asm.aa).apply(null,arguments)},s._OrtReleaseSessionOptions=function(){return(s._OrtReleaseSessionOptions=s.asm.ba).apply(null,arguments)},s._OrtCreateSession=function(){return(s._OrtCreateSession=s.asm.ca).apply(null,arguments)},s._OrtReleaseSession=function(){return(s._OrtReleaseSession=s.asm.da).apply(null,arguments)},s._OrtGetInputOutputCount=function(){return(s._OrtGetInputOutputCount=s.asm.ea).apply(null,arguments)},s._OrtGetInputName=function(){return(s._OrtGetInputName=s.asm.fa).apply(null,arguments)},s._OrtGetOutputName=function(){return(s._OrtGetOutputName=s.asm.ga).apply(null,arguments)},s._OrtFree=function(){return(s._OrtFree=s.asm.ha).apply(null,arguments)},s._OrtCreateTensor=function(){return(s._OrtCreateTensor=s.asm.ia).apply(null,arguments)},s._OrtGetTensorData=function(){return(s._OrtGetTensorData=s.asm.ja).apply(null,arguments)},s._OrtReleaseTensor=function(){return(s._OrtReleaseTensor=s.asm.ka).apply(null,arguments)},s._OrtCreateRunOptions=function(){return(s._OrtCreateRunOptions=s.asm.la).apply(null,arguments)},s._OrtAddRunConfigEntry=function(){return(s._OrtAddRunConfigEntry=s.asm.ma).apply(null,arguments)},s._OrtReleaseRunOptions=function(){return(s._OrtReleaseRunOptions=s.asm.na).apply(null,arguments)},s._OrtRun=function(){return(s._OrtRun=s.asm.oa).apply(null,arguments)},s._OrtEndProfiling=function(){return(s._OrtEndProfiling=s.asm.pa).apply(null,arguments)};var ut=s._pthread_self=function(){return(ut=s._pthread_self=s.asm.qa).apply(null,arguments)},ct=s._malloc=function(){return(ct=s._malloc=s.asm.ra).apply(null,arguments)};s._free=function(){return(s._free=s.asm.sa).apply(null,arguments)},s.__emscripten_tls_init=function(){return(s.__emscripten_tls_init=s.asm.ta).apply(null,arguments)};var lt=s.__emscripten_thread_init=function(){return(lt=s.__emscripten_thread_init=s.asm.va).apply(null,arguments)};function ft(){return(ft=s.asm.xa).apply(null,arguments)}function pt(){return(pt=s.asm.ya).apply(null,arguments)}s.__emscripten_thread_crashed=function(){return(s.__emscripten_thread_crashed=s.asm.wa).apply(null,arguments)};var dt,gt=s.__emscripten_thread_exit=function(){return(gt=s.__emscripten_thread_exit=s.asm.za).apply(null,arguments)},mt=s.__emscripten_check_mailbox=function(){return(mt=s.__emscripten_check_mailbox=s.asm.Aa).apply(null,arguments)};function ht(){return(ht=s.asm.Ba).apply(null,arguments)}function yt(){return(yt=s.asm.Ca).apply(null,arguments)}function vt(){return(vt=s.asm.Da).apply(null,arguments)}function bt(){return(bt=s.asm.Ea).apply(null,arguments)}function wt(){function e(){if(!dt&&(dt=!0,s.calledRun=!0,!W)&&(b||de(G),u(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),!b)){if(s.postRun)for(\\\"function\\\"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var e=s.postRun.shift();N.unshift(e)}de(N)}}if(!(0<J))if(b)u(s),b||de(G),startWorker(s);else{if(s.preRun)for(\\\"function\\\"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)q();de(z),0<J||(s.setStatus?(s.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){s.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(s.keepRuntimeAlive=$,s.wasmMemory=C,s.stackAlloc=bt,s.stackSave=yt,s.stackRestore=vt,s.UTF8ToString=ue,s.stringToUTF8=Oe,s.lengthBytesUTF8=we,s.ExitStatus=re,s.PThread=pe,K=function e(){dt||wt(),dt||(K=e)},s.preInit)for(\\\"function\\\"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return wt(),e.ready});e.exports=n},932:(e,t,r)=>{var _scriptDir,n=(_scriptDir=\\\"undefined\\\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\\\"undefined\\\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){var t,n,a;t||(t=void 0!==e?e:{}),t.ready=new Promise(((e,t)=>{n=e,a=t}));var o,i,s,u=Object.assign({},t),c=\\\"./this.program\\\",l=\\\"object\\\"==typeof window,f=\\\"function\\\"==typeof importScripts,p=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node,d=\\\"\\\";if(p){var g=r(384),m=r(908);d=f?m.dirname(d)+\\\"/\\\":__dirname+\\\"/\\\",o=(e,t)=>(e=e.startsWith(\\\"file://\\\")?new URL(e):m.normalize(e),g.readFileSync(e,t?void 0:\\\"utf8\\\")),s=e=>((e=o(e,!0)).buffer||(e=new Uint8Array(e)),e),i=(e,t,r,n=!0)=>{e=e.startsWith(\\\"file://\\\")?new URL(e):m.normalize(e),g.readFile(e,n?void 0:\\\"utf8\\\",((e,a)=>{e?r(e):t(n?a.buffer:a)}))},!t.thisProgram&&1<process.argv.length&&(c=process.argv[1].replace(/\\\\\\\\/g,\\\"/\\\")),process.argv.slice(2),t.inspect=()=>\\\"[Emscripten Module object]\\\"}else(l||f)&&(f?d=self.location.href:\\\"undefined\\\"!=typeof document&&document.currentScript&&(d=document.currentScript.src),_scriptDir&&(d=_scriptDir),d=0!==d.indexOf(\\\"blob:\\\")?d.substr(0,d.replace(/[?#].*/,\\\"\\\").lastIndexOf(\\\"/\\\")+1):\\\"\\\",o=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.send(null),t.responseText},f&&(s=e=>{var t=new XMLHttpRequest;return t.open(\\\"GET\\\",e,!1),t.responseType=\\\"arraybuffer\\\",t.send(null),new Uint8Array(t.response)}),i=(e,t,r)=>{var n=new XMLHttpRequest;n.open(\\\"GET\\\",e,!0),n.responseType=\\\"arraybuffer\\\",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):r()},n.onerror=r,n.send(null)});var h,y=t.print||console.log.bind(console),v=t.printErr||console.warn.bind(console);Object.assign(t,u),u=null,t.thisProgram&&(c=t.thisProgram),t.wasmBinary&&(h=t.wasmBinary),t.noExitRuntime,\\\"object\\\"!=typeof WebAssembly&&I(\\\"no native wasm support detected\\\");var b,w,_,O,S,E=!1;function T(){var e=b.buffer;t.HEAP8=w=new Int8Array(e),t.HEAP16=new Int16Array(e),t.HEAP32=O=new Int32Array(e),t.HEAPU8=_=new Uint8Array(e),t.HEAPU16=new Uint16Array(e),t.HEAPU32=S=new Uint32Array(e),t.HEAPF32=new Float32Array(e),t.HEAPF64=new Float64Array(e)}var A=[],M=[],R=[];function k(){var e=t.preRun.shift();A.unshift(e)}var C,F=0,D=null,P=null;function I(e){throw t.onAbort&&t.onAbort(e),v(e=\\\"Aborted(\\\"+e+\\\")\\\"),E=!0,e=new WebAssembly.RuntimeError(e+\\\". Build with -sASSERTIONS for more info.\\\"),a(e),e}function x(e){return e.startsWith(\\\"data:application/octet-stream;base64,\\\")}if(!x(C=\\\"ort-wasm.wasm\\\")){var U=C;C=t.locateFile?t.locateFile(U,d):d+U}function L(e){try{if(e==C&&h)return new Uint8Array(h);if(s)return s(e);throw\\\"both async and sync fetching of the wasm failed\\\"}catch(e){I(e)}}function W(e,t,r){return function(e){if(!h&&(l||f)){if(\\\"function\\\"==typeof fetch&&!e.startsWith(\\\"file://\\\"))return fetch(e,{credentials:\\\"same-origin\\\"}).then((t=>{if(!t.ok)throw\\\"failed to load wasm binary file at '\\\"+e+\\\"'\\\";return t.arrayBuffer()})).catch((()=>L(e)));if(i)return new Promise(((t,r)=>{i(e,(e=>t(new Uint8Array(e))),r)}))}return Promise.resolve().then((()=>L(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(r,(e=>{v(\\\"failed to asynchronously prepare wasm: \\\"+e),I(e)}))}function H(e){for(;0<e.length;)e.shift()(t)}var Y=\\\"undefined\\\"!=typeof TextDecoder?new TextDecoder(\\\"utf8\\\"):void 0;function j(e,t,r){var n=(t>>>=0)+r;for(r=t;e[r]&&!(r>=n);)++r;if(16<r-t&&e.buffer&&Y)return Y.decode(e.subarray(t,r));for(n=\\\"\\\";t<r;){var a=e[t++];if(128&a){var o=63&e[t++];if(192==(224&a))n+=String.fromCharCode((31&a)<<6|o);else{var i=63&e[t++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|i:(7&a)<<18|o<<12|i<<6|63&e[t++])?n+=String.fromCharCode(a):(a-=65536,n+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else n+=String.fromCharCode(a)}return n}function z(e,t){return(e>>>=0)?j(_,e,t):\\\"\\\"}function G(e){for(var t=0,r=0;r<e.length;++r){var n=e.charCodeAt(r);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++r):t+=3}return t}function N(e,t,r,n){if(!(0<n))return 0;var a=r>>>=0;n=r+n-1;for(var o=0;o<e.length;++o){var i=e.charCodeAt(o);if(55296<=i&&57343>=i&&(i=65536+((1023&i)<<10)|1023&e.charCodeAt(++o)),127>=i){if(r>=n)break;t[r++>>>0]=i}else{if(2047>=i){if(r+1>=n)break;t[r++>>>0]=192|i>>6}else{if(65535>=i){if(r+2>=n)break;t[r++>>>0]=224|i>>12}else{if(r+3>=n)break;t[r++>>>0]=240|i>>18,t[r++>>>0]=128|i>>12&63}t[r++>>>0]=128|i>>6&63}t[r++>>>0]=128|63&i}}return t[r>>>0]=0,r-a}function B(e,t,r){return N(e,_,t,r)}function $(e){return 0==e%4&&(0!=e%100||0==e%400)}var q=[0,31,60,91,121,152,182,213,244,274,305,335],V=[0,31,59,90,120,151,181,212,243,273,304,334];function J(e){return($(e.getFullYear())?q:V)[e.getMonth()]+e.getDate()-1}function X(e){var t=G(e)+1,r=ie(t);return r&&B(e,r,t),r}var K={};function Z(){if(!Q){var e,t={USER:\\\"web_user\\\",LOGNAME:\\\"web_user\\\",PATH:\\\"/\\\",PWD:\\\"/\\\",HOME:\\\"/home/web_user\\\",LANG:(\\\"object\\\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\\\"C\\\").replace(\\\"-\\\",\\\"_\\\")+\\\".UTF-8\\\",_:c||\\\"./this.program\\\"};for(e in K)void 0===K[e]?delete t[e]:t[e]=K[e];var r=[];for(e in t)r.push(e+\\\"=\\\"+t[e]);Q=r}return Q}var Q,ee=[null,[],[]],te=[31,29,31,30,31,30,31,31,30,31,30,31],re=[31,28,31,30,31,30,31,31,30,31,30,31];function ne(e,t,r,n){function a(e,t,r){for(e=\\\"number\\\"==typeof e?e.toString():e||\\\"\\\";e.length<t;)e=r[0]+e;return e}function o(e,t){return a(e,t,\\\"0\\\")}function i(e,t){function r(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=r(e.getFullYear()-t.getFullYear()))&&0===(n=r(e.getMonth()-t.getMonth()))&&(n=r(e.getDate()-t.getDate())),n}function s(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function u(e){var t=e.ka;for(e=new Date(new Date(e.la+1900,0,1).getTime());0<t;){var r=e.getMonth(),n=($(e.getFullYear())?te:re)[r];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>r?e.setMonth(r+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return r=new Date(e.getFullYear()+1,0,4),t=s(new Date(e.getFullYear(),0,4)),r=s(r),0>=i(t,e)?0>=i(r,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var c=O[n+40>>2>>>0];for(var l in n={ra:O[n>>2>>>0],qa:O[n+4>>2>>>0],ma:O[n+8>>2>>>0],oa:O[n+12>>2>>>0],na:O[n+16>>2>>>0],la:O[n+20>>2>>>0],ga:O[n+24>>2>>>0],ka:O[n+28>>2>>>0],ta:O[n+32>>2>>>0],pa:O[n+36>>2>>>0],sa:c?z(c):\\\"\\\"},r=z(r),c={\\\"%c\\\":\\\"%a %b %d %H:%M:%S %Y\\\",\\\"%D\\\":\\\"%m/%d/%y\\\",\\\"%F\\\":\\\"%Y-%m-%d\\\",\\\"%h\\\":\\\"%b\\\",\\\"%r\\\":\\\"%I:%M:%S %p\\\",\\\"%R\\\":\\\"%H:%M\\\",\\\"%T\\\":\\\"%H:%M:%S\\\",\\\"%x\\\":\\\"%m/%d/%y\\\",\\\"%X\\\":\\\"%H:%M:%S\\\",\\\"%Ec\\\":\\\"%c\\\",\\\"%EC\\\":\\\"%C\\\",\\\"%Ex\\\":\\\"%m/%d/%y\\\",\\\"%EX\\\":\\\"%H:%M:%S\\\",\\\"%Ey\\\":\\\"%y\\\",\\\"%EY\\\":\\\"%Y\\\",\\\"%Od\\\":\\\"%d\\\",\\\"%Oe\\\":\\\"%e\\\",\\\"%OH\\\":\\\"%H\\\",\\\"%OI\\\":\\\"%I\\\",\\\"%Om\\\":\\\"%m\\\",\\\"%OM\\\":\\\"%M\\\",\\\"%OS\\\":\\\"%S\\\",\\\"%Ou\\\":\\\"%u\\\",\\\"%OU\\\":\\\"%U\\\",\\\"%OV\\\":\\\"%V\\\",\\\"%Ow\\\":\\\"%w\\\",\\\"%OW\\\":\\\"%W\\\",\\\"%Oy\\\":\\\"%y\\\"})r=r.replace(new RegExp(l,\\\"g\\\"),c[l]);var f=\\\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\\\".split(\\\" \\\"),p=\\\"January February March April May June July August September October November December\\\".split(\\\" \\\");for(l in c={\\\"%a\\\":function(e){return f[e.ga].substring(0,3)},\\\"%A\\\":function(e){return f[e.ga]},\\\"%b\\\":function(e){return p[e.na].substring(0,3)},\\\"%B\\\":function(e){return p[e.na]},\\\"%C\\\":function(e){return o((e.la+1900)/100|0,2)},\\\"%d\\\":function(e){return o(e.oa,2)},\\\"%e\\\":function(e){return a(e.oa,2,\\\" \\\")},\\\"%g\\\":function(e){return u(e).toString().substring(2)},\\\"%G\\\":function(e){return u(e)},\\\"%H\\\":function(e){return o(e.ma,2)},\\\"%I\\\":function(e){return 0==(e=e.ma)?e=12:12<e&&(e-=12),o(e,2)},\\\"%j\\\":function(e){for(var t=0,r=0;r<=e.na-1;t+=($(e.la+1900)?te:re)[r++]);return o(e.oa+t,3)},\\\"%m\\\":function(e){return o(e.na+1,2)},\\\"%M\\\":function(e){return o(e.qa,2)},\\\"%n\\\":function(){return\\\"\\\\n\\\"},\\\"%p\\\":function(e){return 0<=e.ma&&12>e.ma?\\\"AM\\\":\\\"PM\\\"},\\\"%S\\\":function(e){return o(e.ra,2)},\\\"%t\\\":function(){return\\\"\\\\t\\\"},\\\"%u\\\":function(e){return e.ga||7},\\\"%U\\\":function(e){return o(Math.floor((e.ka+7-e.ga)/7),2)},\\\"%V\\\":function(e){var t=Math.floor((e.ka+7-(e.ga+6)%7)/7);if(2>=(e.ga+371-e.ka-2)%7&&t++,t)53==t&&(4==(r=(e.ga+371-e.ka)%7)||3==r&&$(e.la)||(t=1));else{t=52;var r=(e.ga+7-e.ka-1)%7;(4==r||5==r&&$(e.la%400-1))&&t++}return o(t,2)},\\\"%w\\\":function(e){return e.ga},\\\"%W\\\":function(e){return o(Math.floor((e.ka+7-(e.ga+6)%7)/7),2)},\\\"%y\\\":function(e){return(e.la+1900).toString().substring(2)},\\\"%Y\\\":function(e){return e.la+1900},\\\"%z\\\":function(e){var t=0<=(e=e.pa);return e=Math.abs(e)/60,(t?\\\"+\\\":\\\"-\\\")+String(\\\"0000\\\"+(e/60*100+e%60)).slice(-4)},\\\"%Z\\\":function(e){return e.sa},\\\"%%\\\":function(){return\\\"%\\\"}},r=r.replace(/%%/g,\\\"\\\\0\\\\0\\\"),c)r.includes(l)&&(r=r.replace(new RegExp(l,\\\"g\\\"),c[l](n)));return l=function(e){var t=Array(G(e)+1);return N(e,t,0,t.length),t}(r=r.replace(/\\\\0\\\\0/g,\\\"%\\\")),l.length>t?0:(w.set(l,e>>>0),l.length-1)}var ae={j:function(){I(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},c:function(){return 0},h:function(){},t:function(){},v:function(){},m:function(){return 0},H:function(){},C:function(){},G:function(){},g:function(){},u:function(){},r:function(){},I:function(){},s:function(){},i:function(){return!0},z:function(e,t){e=new Date(1e3*(S[e>>>2]+4294967296*O[e+4>>>2])),O[t>>2>>>0]=e.getUTCSeconds(),O[t+4>>2>>>0]=e.getUTCMinutes(),O[t+8>>2>>>0]=e.getUTCHours(),O[t+12>>2>>>0]=e.getUTCDate(),O[t+16>>2>>>0]=e.getUTCMonth(),O[t+20>>2>>>0]=e.getUTCFullYear()-1900,O[t+24>>2>>>0]=e.getUTCDay(),O[t+28>>2>>>0]=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},A:function(e,t){e=new Date(1e3*(S[e>>>2]+4294967296*O[e+4>>>2])),O[t>>2>>>0]=e.getSeconds(),O[t+4>>2>>>0]=e.getMinutes(),O[t+8>>2>>>0]=e.getHours(),O[t+12>>2>>>0]=e.getDate(),O[t+16>>2>>>0]=e.getMonth(),O[t+20>>2>>>0]=e.getFullYear()-1900,O[t+24>>2>>>0]=e.getDay(),O[t+28>>2>>>0]=0|J(e),O[t+36>>2>>>0]=-60*e.getTimezoneOffset();var r=new Date(e.getFullYear(),6,1).getTimezoneOffset(),n=new Date(e.getFullYear(),0,1).getTimezoneOffset();O[t+32>>2>>>0]=0|(r!=n&&e.getTimezoneOffset()==Math.min(n,r))},B:function(e){var t=new Date(O[e+20>>2>>>0]+1900,O[e+16>>2>>>0],O[e+12>>2>>>0],O[e+8>>2>>>0],O[e+4>>2>>>0],O[e>>2>>>0],0),r=O[e+32>>2>>>0],n=t.getTimezoneOffset(),a=new Date(t.getFullYear(),6,1).getTimezoneOffset(),o=new Date(t.getFullYear(),0,1).getTimezoneOffset(),i=Math.min(o,a);return 0>r?O[e+32>>2>>>0]=Number(a!=o&&i==n):0<r!=(i==n)&&(a=Math.max(o,a),t.setTime(t.getTime()+6e4*((0<r?i:a)-n))),O[e+24>>2>>>0]=t.getDay(),O[e+28>>2>>>0]=0|J(t),O[e>>2>>>0]=t.getSeconds(),O[e+4>>2>>>0]=t.getMinutes(),O[e+8>>2>>>0]=t.getHours(),O[e+12>>2>>>0]=t.getDate(),O[e+16>>2>>>0]=t.getMonth(),O[e+20>>2>>>0]=t.getYear(),t.getTime()/1e3|0},w:function(){return-52},x:function(){},o:function(e,t,r){function n(e){return(e=e.toTimeString().match(/\\\\(([A-Za-z ]+)\\\\)$/))?e[1]:\\\"GMT\\\"}var a=(new Date).getFullYear(),o=new Date(a,0,1),i=new Date(a,6,1);a=o.getTimezoneOffset();var s=i.getTimezoneOffset();S[e>>2>>>0]=60*Math.max(a,s),O[t>>2>>>0]=Number(a!=s),e=n(o),t=n(i),e=X(e),t=X(t),s<a?(S[r>>2>>>0]=e,S[r+4>>2>>>0]=t):(S[r>>2>>>0]=t,S[r+4>>2>>>0]=e)},a:function(){I(\\\"\\\")},J:function(){I(\\\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\\\")},e:function(){return Date.now()},p:function(){return 4294901760},b:p?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.now(),F:function(e,t,r){_.copyWithin(e>>>0,t>>>0,t+r>>>0)},n:function(e){var t=_.length;if(4294901760<(e>>>=0))return!1;for(var r=1;4>=r;r*=2){var n=t*(1+.2/r);n=Math.min(n,e+100663296);var a=Math,o=a.min;n=Math.max(e,n),n+=(65536-n%65536)%65536;e:{var i=b.buffer;try{b.grow(o.call(a,4294901760,n)-i.byteLength+65535>>>16),T();var s=1;break e}catch(e){}s=void 0}if(s)return!0}return!1},D:function(e,t){var r=0;return Z().forEach((function(n,a){var o=t+r;for(a=S[e+4*a>>2>>>0]=o,o=0;o<n.length;++o)w[a++>>0>>>0]=n.charCodeAt(o);w[a>>0>>>0]=0,r+=n.length+1})),0},E:function(e,t){var r=Z();S[e>>2>>>0]=r.length;var n=0;return r.forEach((function(e){n+=e.length+1})),S[t>>2>>>0]=n,0},d:function(){return 52},f:function(){return 52},k:function(){return 70},q:function(e,t,r,n){for(var a=0,o=0;o<r;o++){var i=S[t>>2>>>0],s=S[t+4>>2>>>0];t+=8;for(var u=0;u<s;u++){var c=_[i+u>>>0],l=ee[e];0===c||10===c?((1===e?y:v)(j(l,0)),l.length=0):l.push(c)}a+=s}return S[n>>2>>>0]=a,0},y:ne,l:function(e,t,r,n){return ne(e,t,r,n)}};!function(){function e(e){if(e=e.exports,t.asm=e,b=t.asm.K,T(),M.unshift(t.asm.L),F--,t.monitorRunDependencies&&t.monitorRunDependencies(F),0==F&&(null!==D&&(clearInterval(D),D=null),P)){var r=P;P=null,r()}return e}var r={a:ae};if(F++,t.monitorRunDependencies&&t.monitorRunDependencies(F),t.instantiateWasm)try{return t.instantiateWasm(r,e)}catch(e){v(\\\"Module.instantiateWasm callback failed with error: \\\"+e),a(e)}(function(e,t){var r=C;return h||\\\"function\\\"!=typeof WebAssembly.instantiateStreaming||x(r)||r.startsWith(\\\"file://\\\")||p||\\\"function\\\"!=typeof fetch?W(r,e,t):fetch(r,{credentials:\\\"same-origin\\\"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return v(\\\"wasm streaming compile failed: \\\"+n),v(\\\"falling back to ArrayBuffer instantiation\\\"),W(r,e,t)}))))})(r,(function(t){e(t.instance)})).catch(a)}(),t._OrtInit=function(){return(t._OrtInit=t.asm.M).apply(null,arguments)},t._OrtGetLastError=function(){return(t._OrtGetLastError=t.asm.N).apply(null,arguments)},t._OrtCreateSessionOptions=function(){return(t._OrtCreateSessionOptions=t.asm.O).apply(null,arguments)},t._OrtAppendExecutionProvider=function(){return(t._OrtAppendExecutionProvider=t.asm.P).apply(null,arguments)},t._OrtAddSessionConfigEntry=function(){return(t._OrtAddSessionConfigEntry=t.asm.Q).apply(null,arguments)},t._OrtReleaseSessionOptions=function(){return(t._OrtReleaseSessionOptions=t.asm.R).apply(null,arguments)},t._OrtCreateSession=function(){return(t._OrtCreateSession=t.asm.S).apply(null,arguments)},t._OrtReleaseSession=function(){return(t._OrtReleaseSession=t.asm.T).apply(null,arguments)},t._OrtGetInputOutputCount=function(){return(t._OrtGetInputOutputCount=t.asm.U).apply(null,arguments)},t._OrtGetInputName=function(){return(t._OrtGetInputName=t.asm.V).apply(null,arguments)},t._OrtGetOutputName=function(){return(t._OrtGetOutputName=t.asm.W).apply(null,arguments)},t._OrtFree=function(){return(t._OrtFree=t.asm.X).apply(null,arguments)},t._OrtCreateTensor=function(){return(t._OrtCreateTensor=t.asm.Y).apply(null,arguments)},t._OrtGetTensorData=function(){return(t._OrtGetTensorData=t.asm.Z).apply(null,arguments)},t._OrtReleaseTensor=function(){return(t._OrtReleaseTensor=t.asm._).apply(null,arguments)},t._OrtCreateRunOptions=function(){return(t._OrtCreateRunOptions=t.asm.$).apply(null,arguments)},t._OrtAddRunConfigEntry=function(){return(t._OrtAddRunConfigEntry=t.asm.aa).apply(null,arguments)},t._OrtReleaseRunOptions=function(){return(t._OrtReleaseRunOptions=t.asm.ba).apply(null,arguments)},t._OrtRun=function(){return(t._OrtRun=t.asm.ca).apply(null,arguments)},t._OrtEndProfiling=function(){return(t._OrtEndProfiling=t.asm.da).apply(null,arguments)};var oe,ie=t._malloc=function(){return(ie=t._malloc=t.asm.ea).apply(null,arguments)};function se(){return(se=t.asm.ha).apply(null,arguments)}function ue(){return(ue=t.asm.ia).apply(null,arguments)}function ce(){return(ce=t.asm.ja).apply(null,arguments)}function le(){function e(){if(!oe&&(oe=!0,t.calledRun=!0,!E)){if(H(M),n(t),t.onRuntimeInitialized&&t.onRuntimeInitialized(),t.postRun)for(\\\"function\\\"==typeof t.postRun&&(t.postRun=[t.postRun]);t.postRun.length;){var e=t.postRun.shift();R.unshift(e)}H(R)}}if(!(0<F)){if(t.preRun)for(\\\"function\\\"==typeof t.preRun&&(t.preRun=[t.preRun]);t.preRun.length;)k();H(A),0<F||(t.setStatus?(t.setStatus(\\\"Running...\\\"),setTimeout((function(){setTimeout((function(){t.setStatus(\\\"\\\")}),1),e()}),1)):e())}}if(t._free=function(){return(t._free=t.asm.fa).apply(null,arguments)},t.stackAlloc=ce,t.stackSave=se,t.stackRestore=ue,t.UTF8ToString=z,t.stringToUTF8=B,t.lengthBytesUTF8=G,P=function e(){oe||le(),oe||(P=e)},t.preInit)for(\\\"function\\\"==typeof t.preInit&&(t.preInit=[t.preInit]);0<t.preInit.length;)t.preInit.pop()();return le(),e.ready});e.exports=n},154:e=>{\\\"use strict\\\";e.exports='\\\"use strict\\\";var e={},a=\\\"object\\\"==typeof process&&\\\"object\\\"==typeof process.versions&&\\\"string\\\"==typeof process.versions.node;if(a){var r=require(\\\"worker_threads\\\"),t=r.parentPort;t.on(\\\"message\\\",(e=>onmessage({data:e})));var s=require(\\\"fs\\\");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(s.readFileSync(e,\\\"utf8\\\")+\\\"//# sourceURL=\\\"+e)},postMessage:function(e){t.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var o=!1,n=function(){var e=Array.prototype.slice.call(arguments).join(\\\" \\\");a?s.writeSync(2,e+\\\"\\\\\\\\n\\\"):console.error(e)};self.alert=function(){var a=Array.prototype.slice.call(arguments).join(\\\" \\\");postMessage({cmd:\\\"alert\\\",text:a,threadId:e._pthread_self()})},e.instantiateWasm=(a,r)=>{var t=e.wasmModule;return e.wasmModule=null,r(new WebAssembly.Instance(t,a))},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=function a(r){try{if(\\\"load\\\"===r.data.cmd){let s=[];self.onmessage=e=>s.push(e),self.startWorker=r=>{e=r,postMessage({cmd:\\\"loaded\\\"});for(let e of s)a(e);self.onmessage=a},e.wasmModule=r.data.wasmModule;for(const a of r.data.handlers)e[a]=function(){postMessage({cmd:\\\"callHandler\\\",handler:a,args:[...arguments]})};if(e.wasmMemory=r.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,\\\"string\\\"==typeof r.data.urlOrBlob)importScripts(r.data.urlOrBlob);else{var t=URL.createObjectURL(r.data.urlOrBlob);importScripts(t),URL.revokeObjectURL(t)}ortWasmThreaded(e)}else if(\\\"run\\\"===r.data.cmd){e.__emscripten_thread_init(r.data.pthread_ptr,0,0,1),e.__emscripten_thread_mailbox_await(r.data.pthread_ptr),e.establishStackSpace(),e.PThread.receiveObjectTransfer(r.data),e.PThread.threadInitTLS(),o||(o=!0);try{e.invokeEntryPoint(r.data.start_routine,r.data.arg)}catch(e){if(\\\"unwind\\\"!=e)throw e}}else\\\"cancel\\\"===r.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):\\\"setimmediate\\\"===r.data.target||(\\\"checkMailbox\\\"===r.data.cmd?o&&e.checkMailbox():r.data.cmd&&(n(\\\"worker.js received unknown command \\\"+r.data.cmd),n(r.data)))}catch(a){throw e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),a}};\\\\n'},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}(()=>{\\\"use strict\\\";const e=r(259),t=r(263);self.onmessage=r=>{switch(r.data.type){case\\\"init-wasm\\\":try{(0,t.initializeWebAssembly)(r.data.in).then((()=>postMessage({type:\\\"init-wasm\\\"})),(e=>postMessage({type:\\\"init-wasm\\\",err:e})))}catch(e){postMessage({type:\\\"init-wasm\\\",err:e})}break;case\\\"init-ort\\\":try{(0,e.initRuntime)(r.data.in).then((()=>postMessage({type:\\\"init-ort\\\"})),(e=>postMessage({type:\\\"init-ort\\\",err:e}))),postMessage({type:\\\"init-ort\\\"})}catch(e){postMessage({type:\\\"init-ort\\\",err:e})}break;case\\\"create_allocate\\\":try{const{model:t}=r.data.in,n=(0,e.createSessionAllocate)(t);postMessage({type:\\\"create_allocate\\\",out:n})}catch(e){postMessage({type:\\\"create_allocate\\\",err:e})}break;case\\\"create_finalize\\\":try{const{modeldata:t,options:n}=r.data.in,a=(0,e.createSessionFinalize)(t,n);postMessage({type:\\\"create_finalize\\\",out:a})}catch(e){postMessage({type:\\\"create_finalize\\\",err:e})}break;case\\\"create\\\":try{const{model:t,options:n}=r.data.in,a=(0,e.createSession)(t,n);postMessage({type:\\\"create\\\",out:a})}catch(e){postMessage({type:\\\"create\\\",err:e})}break;case\\\"release\\\":try{const t=r.data.in;(0,e.releaseSession)(t),postMessage({type:\\\"release\\\"})}catch(e){postMessage({type:\\\"release\\\",err:e})}break;case\\\"run\\\":try{const{sessionId:t,inputIndices:n,inputs:a,outputIndices:o,options:i}=r.data.in;(0,e.run)(t,n,a,o,i).then((t=>{postMessage({type:\\\"run\\\",out:t},(0,e.extractTransferableBuffers)(t))}),(e=>{postMessage({type:\\\"run\\\",err:e})}))}catch(e){postMessage({type:\\\"run\\\",err:e})}break;case\\\"end-profiling\\\":try{const t=r.data.in;(0,e.endProfiling)(t),postMessage({type:\\\"end-profiling\\\"})}catch(e){postMessage({type:\\\"end-profiling\\\",err:e})}}}})()})();\\n\", \"Worker\", undefined, undefined);\n}\n","\"use strict\";\n\n/* eslint-env browser */\n\n/* eslint-disable no-undef, no-use-before-define, new-cap */\nmodule.exports = function (content, workerConstructor, workerOptions, url) {\n  var globalScope = self || window;\n\n  try {\n    try {\n      var blob;\n\n      try {\n        // New API\n        blob = new globalScope.Blob([content]);\n      } catch (e) {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = globalScope.BlobBuilder || globalScope.WebKitBlobBuilder || globalScope.MozBlobBuilder || globalScope.MSBlobBuilder;\n        blob = new BlobBuilder();\n        blob.append(content);\n        blob = blob.getBlob();\n      }\n\n      var URL = globalScope.URL || globalScope.webkitURL;\n      var objectURL = URL.createObjectURL(blob);\n      var worker = new globalScope[workerConstructor](objectURL, workerOptions);\n      URL.revokeObjectURL(objectURL);\n      return worker;\n    } catch (e) {\n      return new globalScope[workerConstructor](\"data:application/javascript,\".concat(encodeURIComponent(content)), workerOptions);\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error(\"Inline worker is not supported\");\n    }\n\n    return new globalScope[workerConstructor](url, workerOptions);\n  }\n};","var _scriptDir,e=(_scriptDir=\"undefined\"!=typeof document&&document.currentScript?document.currentScript.src:void 0,\"undefined\"!=typeof __filename&&(_scriptDir=_scriptDir||__filename),function(e={}){function n(){return F.buffer!=I.buffer&&P(),I}function t(){return F.buffer!=I.buffer&&P(),C}function r(){return F.buffer!=I.buffer&&P(),k}function a(){return F.buffer!=I.buffer&&P(),H}function o(){return F.buffer!=I.buffer&&P(),Y}var u,i,s;u||(u=void 0!==e?e:{}),u.ready=new Promise(((e,n)=>{i=e,s=n}));var f,c,l,p=Object.assign({},u),m=\"./this.program\",d=(e,n)=>{throw n},h=\"object\"==typeof window,g=\"function\"==typeof importScripts,y=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,b=u.ENVIRONMENT_IS_PTHREAD||!1,v=\"\";function _(e){return u.locateFile?u.locateFile(e,v):v+e}if(y){var w=require(\"fs\"),O=require(\"path\");let e;v=g?O.dirname(v)+\"/\":__dirname+\"/\",f=(e,n)=>(e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),w.readFileSync(e,n?void 0:\"utf8\")),l=e=>((e=f(e,!0)).buffer||(e=new Uint8Array(e)),e),c=(e,n,t,r=!0)=>{e=e.startsWith(\"file://\")?new URL(e):O.normalize(e),w.readFile(e,r?void 0:\"utf8\",((e,a)=>{e?t(e):n(r?a.buffer:a)}))},!u.thisProgram&&1<process.argv.length&&(m=process.argv[1].replace(/\\\\/g,\"/\")),process.argv.slice(2),d=(e,n)=>{throw process.exitCode=e,n},u.inspect=()=>\"[Emscripten Module object]\";try{e=require(\"worker_threads\")}catch(e){throw console.error('The \"worker_threads\" module is not supported in this node.js build - perhaps a newer version is needed?'),e}global.Worker=e.Worker}else(h||g)&&(g?v=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(v=document.currentScript.src),_scriptDir&&(v=_scriptDir),v=0!==v.indexOf(\"blob:\")?v.substr(0,v.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):\"\",y||(f=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.send(null),n.responseText},g&&(l=e=>{var n=new XMLHttpRequest;return n.open(\"GET\",e,!1),n.responseType=\"arraybuffer\",n.send(null),new Uint8Array(n.response)}),c=(e,n,t)=>{var r=new XMLHttpRequest;r.open(\"GET\",e,!0),r.responseType=\"arraybuffer\",r.onload=()=>{200==r.status||0==r.status&&r.response?n(r.response):t()},r.onerror=t,r.send(null)}));y&&\"undefined\"==typeof performance&&(global.performance=require(\"perf_hooks\").performance);var T=console.log.bind(console),M=console.warn.bind(console);y&&(T=(...e)=>w.writeSync(1,e.join(\" \")+\"\\n\"),M=(...e)=>w.writeSync(2,e.join(\" \")+\"\\n\"));var S,A=u.print||T,E=u.printErr||M;Object.assign(u,p),p=null,u.thisProgram&&(m=u.thisProgram),u.quit&&(d=u.quit),u.wasmBinary&&(S=u.wasmBinary);var R=u.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&Z(\"no native wasm support detected\");var F,D,x,I,C,k,H,Y,U=!1;function P(){var e=F.buffer;u.HEAP8=I=new Int8Array(e),u.HEAP16=new Int16Array(e),u.HEAP32=k=new Int32Array(e),u.HEAPU8=C=new Uint8Array(e),u.HEAPU16=new Uint16Array(e),u.HEAPU32=H=new Uint32Array(e),u.HEAPF32=new Float32Array(e),u.HEAPF64=Y=new Float64Array(e)}var W=u.INITIAL_MEMORY||16777216;if(5242880<=W||Z(\"INITIAL_MEMORY should be larger than STACK_SIZE, was \"+W+\"! (STACK_SIZE=5242880)\"),b)F=u.wasmMemory;else if(u.wasmMemory)F=u.wasmMemory;else if(!((F=new WebAssembly.Memory({initial:W/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw E(\"requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag\"),y&&E(\"(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and/or recent version)\"),Error(\"bad memory\");P(),W=F.buffer.byteLength;var G,L=[],j=[],N=[],z=0;function B(){return R||0<z}function q(){var e=u.preRun.shift();L.unshift(e)}var J,K=0,X=null,V=null;function Z(e){throw u.onAbort&&u.onAbort(e),E(e=\"Aborted(\"+e+\")\"),U=!0,x=1,e=new WebAssembly.RuntimeError(e+\". Build with -sASSERTIONS for more info.\"),s(e),e}function $(e){return e.startsWith(\"data:application/octet-stream;base64,\")}function Q(e){try{if(e==J&&S)return new Uint8Array(S);if(l)return l(e);throw\"both async and sync fetching of the wasm failed\"}catch(e){Z(e)}}function ee(e,n,t){return function(e){if(!S&&(h||g)){if(\"function\"==typeof fetch&&!e.startsWith(\"file://\"))return fetch(e,{credentials:\"same-origin\"}).then((n=>{if(!n.ok)throw\"failed to load wasm binary file at '\"+e+\"'\";return n.arrayBuffer()})).catch((()=>Q(e)));if(c)return new Promise(((n,t)=>{c(e,(e=>n(new Uint8Array(e))),t)}))}return Promise.resolve().then((()=>Q(e)))}(e).then((e=>WebAssembly.instantiate(e,n))).then((e=>e)).then(t,(e=>{E(\"failed to asynchronously prepare wasm: \"+e),Z(e)}))}function ne(e){this.name=\"ExitStatus\",this.message=\"Program terminated with exit(\"+e+\")\",this.status=e}function te(e){e.terminate(),e.onmessage=()=>{}}function re(e){(e=le.Fa[e])||Z(),le.ab(e)}function ae(e){var n=le.Va();if(!n)return 6;le.Ia.push(n),le.Fa[e.Ha]=n,n.Ha=e.Ha;var t={cmd:\"run\",start_routine:e.bb,arg:e.Ta,pthread_ptr:e.Ha};return y&&n.unref(),n.postMessage(t,e.ib),0}$(J=\"ort-wasm-threaded.wasm\")||(J=_(J));var oe=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;function ue(e,n,t){var r=(n>>>=0)+t;for(t=n;e[t]&&!(t>=r);)++t;if(16<t-n&&e.buffer&&oe)return oe.decode(e.buffer instanceof SharedArrayBuffer?e.slice(n,t):e.subarray(n,t));for(r=\"\";n<t;){var a=e[n++];if(128&a){var o=63&e[n++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|o);else{var u=63&e[n++];65536>(a=224==(240&a)?(15&a)<<12|o<<6|u:(7&a)<<18|o<<12|u<<6|63&e[n++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function ie(e,n){return(e>>>=0)?ue(t(),e,n):\"\"}function se(e){if(b)return ze(1,1,e);x=e,B()||(le.cb(),u.onExit&&u.onExit(e),U=!0),d(e,new ne(e))}function fe(e){if(x=e,b)throw me(e),\"unwind\";se(e)}function ce(e){e instanceof ne||\"unwind\"==e||d(1,e)}var le={La:[],Ia:[],Ra:[],Fa:{},Wa:function(){b&&le.Xa()},lb:function(){},Xa:function(){le.receiveObjectTransfer=le.$a,le.threadInitTLS=le.Qa,le.setExitStatus=le.Pa,R=!1},Pa:function(e){x=e},nb:[\"$terminateWorker\"],cb:function(){for(var e of le.Ia)te(e);for(e of le.La)te(e);le.La=[],le.Ia=[],le.Fa=[]},ab:function(e){var n=e.Ha;delete le.Fa[n],le.La.push(e),le.Ia.splice(le.Ia.indexOf(e),1),e.Ha=0,pn(n)},$a:function(){},Qa:function(){le.Ra.forEach((e=>e()))},Za:e=>new Promise((n=>{e.onmessage=t=>{var r=(t=t.data).cmd;if(e.Ha&&(le.Ua=e.Ha),t.targetThread&&t.targetThread!=sn()){var a=le.Fa[t.mb];a?a.postMessage(t,t.transferList):E('Internal error! Worker sent a message \"'+r+'\" to target pthread '+t.targetThread+\", but that thread no longer exists!\")}else\"checkMailbox\"===r?ke():\"spawnThread\"===r?ae(t):\"cleanupThread\"===r?re(t.thread):\"killThread\"===r?(t=t.thread,r=le.Fa[t],delete le.Fa[t],te(r),pn(t),le.Ia.splice(le.Ia.indexOf(r),1),r.Ha=0):\"cancelThread\"===r?le.Fa[t.thread].postMessage({cmd:\"cancel\"}):\"loaded\"===r?(e.loaded=!0,n(e)):\"print\"===r?A(\"Thread \"+t.threadId+\": \"+t.text):\"printErr\"===r?E(\"Thread \"+t.threadId+\": \"+t.text):\"alert\"===r?alert(\"Thread \"+t.threadId+\": \"+t.text):\"setimmediate\"===t.target?e.postMessage(t):\"callHandler\"===r?u[t.handler](...t.args):r&&E(\"worker sent an unknown command \"+r);le.Ua=void 0},e.onerror=e=>{throw E(\"worker sent an error! \"+e.filename+\":\"+e.lineno+\": \"+e.message),e},y&&(e.on(\"message\",(function(n){e.onmessage({data:n})})),e.on(\"error\",(function(n){e.onerror(n)})));var t,r=[];for(t of[\"onExit\",\"onAbort\",\"print\",\"printErr\"])u.hasOwnProperty(t)&&r.push(t);e.postMessage({cmd:\"load\",handlers:r,urlOrBlob:u.mainScriptUrlOrBlob||_scriptDir,wasmMemory:F,wasmModule:D})})),Ya:function(e){e()},Sa:function(){var e=_(\"ort-wasm-threaded.worker.js\");e=new Worker(e),le.La.push(e)},Va:function(){return 0==le.La.length&&(le.Sa(),le.Za(le.La[0])),le.La.pop()}};function pe(e){for(;0<e.length;)e.shift()(u)}function me(e){if(b)return ze(2,0,e);fe(e)}u.PThread=le,u.establishStackSpace=function(){var e=sn(),n=r()[e+52>>2>>>0];gn(n,n-(e=r()[e+56>>2>>>0])),bn(n)};var de=[];function he(e,n,t,r){return b?ze(3,1,e,n,t,r):ge(e,n,t,r)}function ge(e,n,t,r){if(\"undefined\"==typeof SharedArrayBuffer)return E(\"Current environment does not support SharedArrayBuffer, pthreads are not available!\"),6;var a=[];return b&&0===a.length?he(e,n,t,r):(e={bb:t,Ha:e,Ta:r,ib:a},b?(e.kb=\"spawnThread\",postMessage(e,a),0):ae(e))}function ye(e,n,t){return b?ze(4,1,e,n,t):0}function be(e,n){if(b)return ze(5,1,e,n)}function ve(e){for(var n=0,t=0;t<e.length;++t){var r=e.charCodeAt(t);127>=r?n++:2047>=r?n+=2:55296<=r&&57343>=r?(n+=4,++t):n+=3}return n}function _e(e,n,t,r){if(!(0<r))return 0;var a=t>>>=0;r=t+r-1;for(var o=0;o<e.length;++o){var u=e.charCodeAt(o);if(55296<=u&&57343>=u&&(u=65536+((1023&u)<<10)|1023&e.charCodeAt(++o)),127>=u){if(t>=r)break;n[t++>>>0]=u}else{if(2047>=u){if(t+1>=r)break;n[t++>>>0]=192|u>>6}else{if(65535>=u){if(t+2>=r)break;n[t++>>>0]=224|u>>12}else{if(t+3>=r)break;n[t++>>>0]=240|u>>18,n[t++>>>0]=128|u>>12&63}n[t++>>>0]=128|u>>6&63}n[t++>>>0]=128|63&u}}return n[t>>>0]=0,t-a}function we(e,n,r){return _e(e,t(),n,r)}function Oe(e,n){if(b)return ze(6,1,e,n)}function Te(e,n,t){if(b)return ze(7,1,e,n,t)}function Me(e,n,t){return b?ze(8,1,e,n,t):0}function Se(e,n){if(b)return ze(9,1,e,n)}function Ae(e,n,t){if(b)return ze(10,1,e,n,t)}function Ee(e,n,t,r){if(b)return ze(11,1,e,n,t,r)}function Re(e,n,t,r){if(b)return ze(12,1,e,n,t,r)}function Fe(e,n,t,r){if(b)return ze(13,1,e,n,t,r)}function De(e){if(b)return ze(14,1,e)}function xe(e,n){if(b)return ze(15,1,e,n)}function Ie(e,n,t){if(b)return ze(16,1,e,n,t)}function Ce(e){\"function\"==typeof Atomics.jb&&(Atomics.jb(r(),e>>2,e).value.then(ke),e+=128,Atomics.store(r(),e>>2,1))}function ke(){var e=sn();e&&(Ce(e),function(e){if(!U)try{if(hn(),!B())try{b?dn(x):fe(x)}catch(e){ce(e)}}catch(e){ce(e)}}())}function He(e){return a()[e>>>2]+4294967296*r()[e+4>>>2]}function Ye(e){return 0==e%4&&(0!=e%100||0==e%400)}u.invokeEntryPoint=function(e,n){var t=de[e];t||(e>=de.length&&(de.length=e+1),de[e]=t=G.get(e)),e=t(n),B()?le.Pa(e):dn(e)},u.__emscripten_thread_mailbox_await=Ce,u.checkMailbox=ke;var Ue,Pe=[0,31,60,91,121,152,182,213,244,274,305,335],We=[0,31,59,90,120,151,181,212,243,273,304,334];function Ge(e){return(Ye(e.getFullYear())?Pe:We)[e.getMonth()]+e.getDate()-1}function Le(e,n,t,r,a,o,u){return b?ze(17,1,e,n,t,r,a,o,u):-52}function je(e,n,t,r,a,o){if(b)return ze(18,1,e,n,t,r,a,o)}function Ne(e){var n=ve(e)+1,t=fn(n);return t&&we(e,t,n),t}function ze(e,n){var t=arguments.length-2,r=arguments;return function(e){var n=yn();return e=e(),bn(n),e}((()=>{for(var a=vn(8*t),u=a>>3,i=0;i<t;i++){var s=r[2+i];o()[u+i>>>0]=s}return ln(e,t,a,n)}))}Ue=y?()=>{var e=process.hrtime();return 1e3*e[0]+e[1]/1e6}:()=>performance.timeOrigin+performance.now();var Be,qe=[],Je={};function Ke(){if(!Be){var e,n={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:m||\"./this.program\"};for(e in Je)void 0===Je[e]?delete n[e]:n[e]=Je[e];var t=[];for(e in n)t.push(e+\"=\"+n[e]);Be=t}return Be}function Xe(e,t){if(b)return ze(19,1,e,t);var r=0;return Ke().forEach((function(o,u){var i=t+r;for(u=a()[e+4*u>>2>>>0]=i,i=0;i<o.length;++i)n()[u++>>0>>>0]=o.charCodeAt(i);n()[u>>0>>>0]=0,r+=o.length+1})),0}function Ve(e,n){if(b)return ze(20,1,e,n);var t=Ke();a()[e>>2>>>0]=t.length;var r=0;return t.forEach((function(e){r+=e.length+1})),a()[n>>2>>>0]=r,0}function Ze(e){return b?ze(21,1,e):52}function $e(e,n,t,r){return b?ze(22,1,e,n,t,r):52}function Qe(e,n,t,r,a){return b?ze(23,1,e,n,t,r,a):70}var en=[null,[],[]];function nn(e,n,r,o){if(b)return ze(24,1,e,n,r,o);for(var u=0,i=0;i<r;i++){var s=a()[n>>2>>>0],f=a()[n+4>>2>>>0];n+=8;for(var c=0;c<f;c++){var l=t()[s+c>>>0],p=en[e];0===l||10===l?((1===e?A:E)(ue(p,0)),p.length=0):p.push(l)}u+=f}return a()[o>>2>>>0]=u,0}var tn=[31,29,31,30,31,30,31,31,30,31,30,31],rn=[31,28,31,30,31,30,31,31,30,31,30,31];function an(e,t,a,o){function u(e,n,t){for(e=\"number\"==typeof e?e.toString():e||\"\";e.length<n;)e=t[0]+e;return e}function i(e,n){return u(e,n,\"0\")}function s(e,n){function t(e){return 0>e?-1:0<e?1:0}var r;return 0===(r=t(e.getFullYear()-n.getFullYear()))&&0===(r=t(e.getMonth()-n.getMonth()))&&(r=t(e.getDate()-n.getDate())),r}function f(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function c(e){var n=e.Ja;for(e=new Date(new Date(e.Ka+1900,0,1).getTime());0<n;){var t=e.getMonth(),r=(Ye(e.getFullYear())?tn:rn)[t];if(!(n>r-e.getDate())){e.setDate(e.getDate()+n);break}n-=r-e.getDate()+1,e.setDate(1),11>t?e.setMonth(t+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return t=new Date(e.getFullYear()+1,0,4),n=f(new Date(e.getFullYear(),0,4)),t=f(t),0>=s(n,e)?0>=s(t,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var l=r()[o+40>>2>>>0];for(var p in o={gb:r()[o>>2>>>0],fb:r()[o+4>>2>>>0],Ma:r()[o+8>>2>>>0],Oa:r()[o+12>>2>>>0],Na:r()[o+16>>2>>>0],Ka:r()[o+20>>2>>>0],Ga:r()[o+24>>2>>>0],Ja:r()[o+28>>2>>>0],ob:r()[o+32>>2>>>0],eb:r()[o+36>>2>>>0],hb:l?ie(l):\"\"},a=ie(a),l={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"})a=a.replace(new RegExp(p,\"g\"),l[p]);var m=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),d=\"January February March April May June July August September October November December\".split(\" \");for(p in l={\"%a\":function(e){return m[e.Ga].substring(0,3)},\"%A\":function(e){return m[e.Ga]},\"%b\":function(e){return d[e.Na].substring(0,3)},\"%B\":function(e){return d[e.Na]},\"%C\":function(e){return i((e.Ka+1900)/100|0,2)},\"%d\":function(e){return i(e.Oa,2)},\"%e\":function(e){return u(e.Oa,2,\" \")},\"%g\":function(e){return c(e).toString().substring(2)},\"%G\":function(e){return c(e)},\"%H\":function(e){return i(e.Ma,2)},\"%I\":function(e){return 0==(e=e.Ma)?e=12:12<e&&(e-=12),i(e,2)},\"%j\":function(e){for(var n=0,t=0;t<=e.Na-1;n+=(Ye(e.Ka+1900)?tn:rn)[t++]);return i(e.Oa+n,3)},\"%m\":function(e){return i(e.Na+1,2)},\"%M\":function(e){return i(e.fb,2)},\"%n\":function(){return\"\\n\"},\"%p\":function(e){return 0<=e.Ma&&12>e.Ma?\"AM\":\"PM\"},\"%S\":function(e){return i(e.gb,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(e){return e.Ga||7},\"%U\":function(e){return i(Math.floor((e.Ja+7-e.Ga)/7),2)},\"%V\":function(e){var n=Math.floor((e.Ja+7-(e.Ga+6)%7)/7);if(2>=(e.Ga+371-e.Ja-2)%7&&n++,n)53==n&&(4==(t=(e.Ga+371-e.Ja)%7)||3==t&&Ye(e.Ka)||(n=1));else{n=52;var t=(e.Ga+7-e.Ja-1)%7;(4==t||5==t&&Ye(e.Ka%400-1))&&n++}return i(n,2)},\"%w\":function(e){return e.Ga},\"%W\":function(e){return i(Math.floor((e.Ja+7-(e.Ga+6)%7)/7),2)},\"%y\":function(e){return(e.Ka+1900).toString().substring(2)},\"%Y\":function(e){return e.Ka+1900},\"%z\":function(e){var n=0<=(e=e.eb);return e=Math.abs(e)/60,(n?\"+\":\"-\")+String(\"0000\"+(e/60*100+e%60)).slice(-4)},\"%Z\":function(e){return e.hb},\"%%\":function(){return\"%\"}},a=a.replace(/%%/g,\"\\0\\0\"),l)a.includes(p)&&(a=a.replace(new RegExp(p,\"g\"),l[p](o)));return p=function(e){var n=Array(ve(e)+1);return _e(e,n,0,n.length),n}(a=a.replace(/\\0\\0/g,\"%\")),p.length>t?0:(function(e,t){n().set(e,t>>>0)}(p,e),p.length-1)}le.Wa();var on=[null,se,me,he,ye,be,Oe,Te,Me,Se,Ae,Ee,Re,Fe,De,xe,Ie,Le,je,Xe,Ve,Ze,$e,Qe,nn],un={v:function(){Z(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},P:function(e){cn(e,!g,1,!h),le.Qa()},h:function(e){b?postMessage({cmd:\"cleanupThread\",thread:e}):re(e)},D:ge,e:ye,V:be,z:Oe,B:Te,p:Me,T:Se,K:Ae,S:Ee,j:Re,A:Fe,x:De,U:xe,y:Ie,E:function(){return 131072},m:function(){return!0},s:function(e,n){e==n?setTimeout((()=>ke())):b?postMessage({targetThread:e,cmd:\"checkMailbox\"}):(e=le.Fa[e])&&e.postMessage({cmd:\"checkMailbox\"})},N:function(){return-1},O:Ce,l:function(e){y&&le.Fa[e].ref()},H:function(e,n){e=new Date(1e3*He(e)),r()[n>>2>>>0]=e.getUTCSeconds(),r()[n+4>>2>>>0]=e.getUTCMinutes(),r()[n+8>>2>>>0]=e.getUTCHours(),r()[n+12>>2>>>0]=e.getUTCDate(),r()[n+16>>2>>>0]=e.getUTCMonth(),r()[n+20>>2>>>0]=e.getUTCFullYear()-1900,r()[n+24>>2>>>0]=e.getUTCDay(),e=(e.getTime()-Date.UTC(e.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,r()[n+28>>2>>>0]=e},I:function(e,n){e=new Date(1e3*He(e)),r()[n>>2>>>0]=e.getSeconds(),r()[n+4>>2>>>0]=e.getMinutes(),r()[n+8>>2>>>0]=e.getHours(),r()[n+12>>2>>>0]=e.getDate(),r()[n+16>>2>>>0]=e.getMonth(),r()[n+20>>2>>>0]=e.getFullYear()-1900,r()[n+24>>2>>>0]=e.getDay();var t=0|Ge(e);r()[n+28>>2>>>0]=t,r()[n+36>>2>>>0]=-60*e.getTimezoneOffset(),t=new Date(e.getFullYear(),6,1).getTimezoneOffset();var a=new Date(e.getFullYear(),0,1).getTimezoneOffset();e=0|(t!=a&&e.getTimezoneOffset()==Math.min(a,t)),r()[n+32>>2>>>0]=e},J:function(e){var n=new Date(r()[e+20>>2>>>0]+1900,r()[e+16>>2>>>0],r()[e+12>>2>>>0],r()[e+8>>2>>>0],r()[e+4>>2>>>0],r()[e>>2>>>0],0),t=r()[e+32>>2>>>0],a=n.getTimezoneOffset(),o=new Date(n.getFullYear(),6,1).getTimezoneOffset(),u=new Date(n.getFullYear(),0,1).getTimezoneOffset(),i=Math.min(u,o);return 0>t?r()[e+32>>2>>>0]=Number(o!=u&&i==a):0<t!=(i==a)&&(o=Math.max(u,o),n.setTime(n.getTime()+6e4*((0<t?i:o)-a))),r()[e+24>>2>>>0]=n.getDay(),t=0|Ge(n),r()[e+28>>2>>>0]=t,r()[e>>2>>>0]=n.getSeconds(),r()[e+4>>2>>>0]=n.getMinutes(),r()[e+8>>2>>>0]=n.getHours(),r()[e+12>>2>>>0]=n.getDate(),r()[e+16>>2>>>0]=n.getMonth(),r()[e+20>>2>>>0]=n.getYear(),n.getTime()/1e3|0},F:Le,G:je,r:function(e,n,t){function o(e){return(e=e.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?e[1]:\"GMT\"}var u=(new Date).getFullYear(),i=new Date(u,0,1),s=new Date(u,6,1);u=i.getTimezoneOffset();var f=s.getTimezoneOffset(),c=Math.max(u,f);a()[e>>2>>>0]=60*c,r()[n>>2>>>0]=Number(u!=f),e=o(i),n=o(s),e=Ne(e),n=Ne(n),f<u?(a()[t>>2>>>0]=e,a()[t+4>>2>>>0]=n):(a()[t>>2>>>0]=n,a()[t+4>>2>>>0]=e)},b:function(){Z(\"\")},W:function(){Z(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},i:function(){},f:function(){return Date.now()},k:function(){throw z+=1,\"unwind\"},t:function(){return 4294901760},c:Ue,u:function(){return y?require(\"os\").cpus().length:navigator.hardwareConcurrency},L:function(e,n,t){qe.length=n,t>>=3;for(var r=0;r<n;r++)qe[r]=o()[t+r>>>0];return on[e].apply(null,qe)},q:function(e){var n=t().length;if((e>>>=0)<=n||4294901760<e)return!1;for(var r=1;4>=r;r*=2){var a=n*(1+.2/r);a=Math.min(a,e+100663296);var o=Math,u=o.min;a=Math.max(e,a),a+=(65536-a%65536)%65536;e:{var i=F.buffer;try{F.grow(u.call(o,4294901760,a)-i.byteLength+65535>>>16),P();var s=1;break e}catch(e){}s=void 0}if(s)return!0}return!1},Q:Xe,R:Ve,C:fe,d:Ze,g:$e,n:Qe,w:nn,a:F||u.wasmMemory,M:an,o:function(e,n,t,r){return an(e,n,t,r)}};!function(){function e(e,n){return e=e.exports,u.asm=e,le.Ra.push(u.asm.ta),G=u.asm.ua,j.unshift(u.asm.X),D=n,le.Ya((()=>{if(K--,u.monitorRunDependencies&&u.monitorRunDependencies(K),0==K&&(null!==X&&(clearInterval(X),X=null),V)){var e=V;V=null,e()}})),e}var n={a:un};if(K++,u.monitorRunDependencies&&u.monitorRunDependencies(K),u.instantiateWasm)try{return u.instantiateWasm(n,e)}catch(e){E(\"Module.instantiateWasm callback failed with error: \"+e),s(e)}(function(e,n){var t=J;return S||\"function\"!=typeof WebAssembly.instantiateStreaming||$(t)||t.startsWith(\"file://\")||y||\"function\"!=typeof fetch?ee(t,e,n):fetch(t,{credentials:\"same-origin\"}).then((r=>WebAssembly.instantiateStreaming(r,e).then(n,(function(r){return E(\"wasm streaming compile failed: \"+r),E(\"falling back to ArrayBuffer instantiation\"),ee(t,e,n)}))))})(n,(function(n){e(n.instance,n.module)})).catch(s)}(),u._OrtInit=function(){return(u._OrtInit=u.asm.Y).apply(null,arguments)},u._OrtGetLastError=function(){return(u._OrtGetLastError=u.asm.Z).apply(null,arguments)},u._OrtCreateSessionOptions=function(){return(u._OrtCreateSessionOptions=u.asm._).apply(null,arguments)},u._OrtAppendExecutionProvider=function(){return(u._OrtAppendExecutionProvider=u.asm.$).apply(null,arguments)},u._OrtAddSessionConfigEntry=function(){return(u._OrtAddSessionConfigEntry=u.asm.aa).apply(null,arguments)},u._OrtReleaseSessionOptions=function(){return(u._OrtReleaseSessionOptions=u.asm.ba).apply(null,arguments)},u._OrtCreateSession=function(){return(u._OrtCreateSession=u.asm.ca).apply(null,arguments)},u._OrtReleaseSession=function(){return(u._OrtReleaseSession=u.asm.da).apply(null,arguments)},u._OrtGetInputOutputCount=function(){return(u._OrtGetInputOutputCount=u.asm.ea).apply(null,arguments)},u._OrtGetInputName=function(){return(u._OrtGetInputName=u.asm.fa).apply(null,arguments)},u._OrtGetOutputName=function(){return(u._OrtGetOutputName=u.asm.ga).apply(null,arguments)},u._OrtFree=function(){return(u._OrtFree=u.asm.ha).apply(null,arguments)},u._OrtCreateTensor=function(){return(u._OrtCreateTensor=u.asm.ia).apply(null,arguments)},u._OrtGetTensorData=function(){return(u._OrtGetTensorData=u.asm.ja).apply(null,arguments)},u._OrtReleaseTensor=function(){return(u._OrtReleaseTensor=u.asm.ka).apply(null,arguments)},u._OrtCreateRunOptions=function(){return(u._OrtCreateRunOptions=u.asm.la).apply(null,arguments)},u._OrtAddRunConfigEntry=function(){return(u._OrtAddRunConfigEntry=u.asm.ma).apply(null,arguments)},u._OrtReleaseRunOptions=function(){return(u._OrtReleaseRunOptions=u.asm.na).apply(null,arguments)},u._OrtRun=function(){return(u._OrtRun=u.asm.oa).apply(null,arguments)},u._OrtEndProfiling=function(){return(u._OrtEndProfiling=u.asm.pa).apply(null,arguments)};var sn=u._pthread_self=function(){return(sn=u._pthread_self=u.asm.qa).apply(null,arguments)},fn=u._malloc=function(){return(fn=u._malloc=u.asm.ra).apply(null,arguments)};u._free=function(){return(u._free=u.asm.sa).apply(null,arguments)},u.__emscripten_tls_init=function(){return(u.__emscripten_tls_init=u.asm.ta).apply(null,arguments)};var cn=u.__emscripten_thread_init=function(){return(cn=u.__emscripten_thread_init=u.asm.va).apply(null,arguments)};function ln(){return(ln=u.asm.xa).apply(null,arguments)}function pn(){return(pn=u.asm.ya).apply(null,arguments)}u.__emscripten_thread_crashed=function(){return(u.__emscripten_thread_crashed=u.asm.wa).apply(null,arguments)};var mn,dn=u.__emscripten_thread_exit=function(){return(dn=u.__emscripten_thread_exit=u.asm.za).apply(null,arguments)},hn=u.__emscripten_check_mailbox=function(){return(hn=u.__emscripten_check_mailbox=u.asm.Aa).apply(null,arguments)};function gn(){return(gn=u.asm.Ba).apply(null,arguments)}function yn(){return(yn=u.asm.Ca).apply(null,arguments)}function bn(){return(bn=u.asm.Da).apply(null,arguments)}function vn(){return(vn=u.asm.Ea).apply(null,arguments)}function _n(){function e(){if(!mn&&(mn=!0,u.calledRun=!0,!U)&&(b||pe(j),i(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),!b)){if(u.postRun)for(\"function\"==typeof u.postRun&&(u.postRun=[u.postRun]);u.postRun.length;){var e=u.postRun.shift();N.unshift(e)}pe(N)}}if(!(0<K))if(b)i(u),b||pe(j),startWorker(u);else{if(u.preRun)for(\"function\"==typeof u.preRun&&(u.preRun=[u.preRun]);u.preRun.length;)q();pe(L),0<K||(u.setStatus?(u.setStatus(\"Running...\"),setTimeout((function(){setTimeout((function(){u.setStatus(\"\")}),1),e()}),1)):e())}}if(u.keepRuntimeAlive=B,u.wasmMemory=F,u.stackAlloc=vn,u.stackSave=yn,u.stackRestore=bn,u.UTF8ToString=ie,u.stringToUTF8=we,u.lengthBytesUTF8=ve,u.ExitStatus=ne,u.PThread=le,V=function e(){mn||_n(),mn||(V=e)},u.preInit)for(\"function\"==typeof u.preInit&&(u.preInit=[u.preInit]);0<u.preInit.length;)u.preInit.pop()();return _n(),e.ready});\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e:\"function\"==typeof define&&define.amd?define([],(function(){return e})):\"object\"==typeof exports&&(exports.ortWasmThreaded=e);\n","\nvar ortWasm = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;\n  return (\nfunction(ortWasm = {})  {\n\nvar c;c||(c=typeof ortWasm !== 'undefined' ? ortWasm : {});var h,p;c.ready=new Promise((a,b)=>{h=a;p=b});var t=Object.assign({},c),w=\"./this.program\",y=\"object\"==typeof window,z=\"function\"==typeof importScripts,A=\"object\"==typeof process&&\"object\"==typeof process.versions&&\"string\"==typeof process.versions.node,B=\"\",C,D,E;\nif(A){var fs=require(\"fs\"),F=require(\"path\");B=z?F.dirname(B)+\"/\":__dirname+\"/\";C=(a,b)=>{a=a.startsWith(\"file://\")?new URL(a):F.normalize(a);return fs.readFileSync(a,b?void 0:\"utf8\")};E=a=>{a=C(a,!0);a.buffer||(a=new Uint8Array(a));return a};D=(a,b,e,f=!0)=>{a=a.startsWith(\"file://\")?new URL(a):F.normalize(a);fs.readFile(a,f?void 0:\"utf8\",(g,k)=>{g?e(g):b(f?k.buffer:k)})};!c.thisProgram&&1<process.argv.length&&(w=process.argv[1].replace(/\\\\/g,\"/\"));process.argv.slice(2);c.inspect=()=>\"[Emscripten Module object]\"}else if(y||\nz)z?B=self.location.href:\"undefined\"!=typeof document&&document.currentScript&&(B=document.currentScript.src),_scriptDir&&(B=_scriptDir),0!==B.indexOf(\"blob:\")?B=B.substr(0,B.replace(/[?#].*/,\"\").lastIndexOf(\"/\")+1):B=\"\",C=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.send(null);return b.responseText},z&&(E=a=>{var b=new XMLHttpRequest;b.open(\"GET\",a,!1);b.responseType=\"arraybuffer\";b.send(null);return new Uint8Array(b.response)}),D=(a,b,e)=>{var f=new XMLHttpRequest;f.open(\"GET\",a,!0);f.responseType=\n\"arraybuffer\";f.onload=()=>{200==f.status||0==f.status&&f.response?b(f.response):e()};f.onerror=e;f.send(null)};var aa=c.print||console.log.bind(console),G=c.printErr||console.warn.bind(console);Object.assign(c,t);t=null;c.thisProgram&&(w=c.thisProgram);var H;c.wasmBinary&&(H=c.wasmBinary);var noExitRuntime=c.noExitRuntime||!0;\"object\"!=typeof WebAssembly&&I(\"no native wasm support detected\");var J,K=!1,L,M,N,O;\nfunction ba(){var a=J.buffer;c.HEAP8=L=new Int8Array(a);c.HEAP16=new Int16Array(a);c.HEAP32=N=new Int32Array(a);c.HEAPU8=M=new Uint8Array(a);c.HEAPU16=new Uint16Array(a);c.HEAPU32=O=new Uint32Array(a);c.HEAPF32=new Float32Array(a);c.HEAPF64=new Float64Array(a)}var ca=[],da=[],ea=[];function fa(){var a=c.preRun.shift();ca.unshift(a)}var P=0,Q=null,R=null;\nfunction I(a){if(c.onAbort)c.onAbort(a);a=\"Aborted(\"+a+\")\";G(a);K=!0;a=new WebAssembly.RuntimeError(a+\". Build with -sASSERTIONS for more info.\");p(a);throw a;}function ha(a){return a.startsWith(\"data:application/octet-stream;base64,\")}var S;S=\"ort-wasm.wasm\";if(!ha(S)){var ia=S;S=c.locateFile?c.locateFile(ia,B):B+ia}function ja(a){try{if(a==S&&H)return new Uint8Array(H);if(E)return E(a);throw\"both async and sync fetching of the wasm failed\";}catch(b){I(b)}}\nfunction ka(a){if(!H&&(y||z)){if(\"function\"==typeof fetch&&!a.startsWith(\"file://\"))return fetch(a,{credentials:\"same-origin\"}).then(b=>{if(!b.ok)throw\"failed to load wasm binary file at '\"+a+\"'\";return b.arrayBuffer()}).catch(()=>ja(a));if(D)return new Promise((b,e)=>{D(a,f=>b(new Uint8Array(f)),e)})}return Promise.resolve().then(()=>ja(a))}function la(a,b,e){return ka(a).then(f=>WebAssembly.instantiate(f,b)).then(f=>f).then(e,f=>{G(\"failed to asynchronously prepare wasm: \"+f);I(f)})}\nfunction ma(a,b){var e=S;return H||\"function\"!=typeof WebAssembly.instantiateStreaming||ha(e)||e.startsWith(\"file://\")||A||\"function\"!=typeof fetch?la(e,a,b):fetch(e,{credentials:\"same-origin\"}).then(f=>WebAssembly.instantiateStreaming(f,a).then(b,function(g){G(\"wasm streaming compile failed: \"+g);G(\"falling back to ArrayBuffer instantiation\");return la(e,a,b)}))}function T(a){for(;0<a.length;)a.shift()(c)}var na=\"undefined\"!=typeof TextDecoder?new TextDecoder(\"utf8\"):void 0;\nfunction oa(a,b,e){b>>>=0;var f=b+e;for(e=b;a[e]&&!(e>=f);)++e;if(16<e-b&&a.buffer&&na)return na.decode(a.subarray(b,e));for(f=\"\";b<e;){var g=a[b++];if(g&128){var k=a[b++]&63;if(192==(g&224))f+=String.fromCharCode((g&31)<<6|k);else{var l=a[b++]&63;g=224==(g&240)?(g&15)<<12|k<<6|l:(g&7)<<18|k<<12|l<<6|a[b++]&63;65536>g?f+=String.fromCharCode(g):(g-=65536,f+=String.fromCharCode(55296|g>>10,56320|g&1023))}}else f+=String.fromCharCode(g)}return f}function U(a,b){return(a>>>=0)?oa(M,a,b):\"\"}\nfunction V(a){for(var b=0,e=0;e<a.length;++e){var f=a.charCodeAt(e);127>=f?b++:2047>=f?b+=2:55296<=f&&57343>=f?(b+=4,++e):b+=3}return b}\nfunction pa(a,b,e,f){e>>>=0;if(!(0<f))return 0;var g=e;f=e+f-1;for(var k=0;k<a.length;++k){var l=a.charCodeAt(k);if(55296<=l&&57343>=l){var q=a.charCodeAt(++k);l=65536+((l&1023)<<10)|q&1023}if(127>=l){if(e>=f)break;b[e++>>>0]=l}else{if(2047>=l){if(e+1>=f)break;b[e++>>>0]=192|l>>6}else{if(65535>=l){if(e+2>=f)break;b[e++>>>0]=224|l>>12}else{if(e+3>=f)break;b[e++>>>0]=240|l>>18;b[e++>>>0]=128|l>>12&63}b[e++>>>0]=128|l>>6&63}b[e++>>>0]=128|l&63}}b[e>>>0]=0;return e-g}\nfunction qa(a,b,e){return pa(a,M,b,e)}function W(a){return 0===a%4&&(0!==a%100||0===a%400)}var ra=[0,31,60,91,121,152,182,213,244,274,305,335],sa=[0,31,59,90,120,151,181,212,243,273,304,334];function ta(a){return(W(a.getFullYear())?ra:sa)[a.getMonth()]+a.getDate()-1}function xa(a){var b=V(a)+1,e=ya(b);e&&qa(a,e,b);return e}var X={};\nfunction za(){if(!Y){var a={USER:\"web_user\",LOGNAME:\"web_user\",PATH:\"/\",PWD:\"/\",HOME:\"/home/web_user\",LANG:(\"object\"==typeof navigator&&navigator.languages&&navigator.languages[0]||\"C\").replace(\"-\",\"_\")+\".UTF-8\",_:w||\"./this.program\"},b;for(b in X)void 0===X[b]?delete a[b]:a[b]=X[b];var e=[];for(b in a)e.push(b+\"=\"+a[b]);Y=e}return Y}var Y,Aa=[null,[],[]],Ba=[31,29,31,30,31,30,31,31,30,31,30,31],Ca=[31,28,31,30,31,30,31,31,30,31,30,31];\nfunction Da(a){var b=Array(V(a)+1);pa(a,b,0,b.length);return b}\nfunction Ea(a,b,e,f){function g(d,m,n){for(d=\"number\"==typeof d?d.toString():d||\"\";d.length<m;)d=n[0]+d;return d}function k(d,m){return g(d,m,\"0\")}function l(d,m){function n(ua){return 0>ua?-1:0<ua?1:0}var x;0===(x=n(d.getFullYear()-m.getFullYear()))&&0===(x=n(d.getMonth()-m.getMonth()))&&(x=n(d.getDate()-m.getDate()));return x}function q(d){switch(d.getDay()){case 0:return new Date(d.getFullYear()-1,11,29);case 1:return d;case 2:return new Date(d.getFullYear(),0,3);case 3:return new Date(d.getFullYear(),\n0,2);case 4:return new Date(d.getFullYear(),0,1);case 5:return new Date(d.getFullYear()-1,11,31);case 6:return new Date(d.getFullYear()-1,11,30)}}function v(d){var m=d.ka;for(d=new Date((new Date(d.la+1900,0,1)).getTime());0<m;){var n=d.getMonth(),x=(W(d.getFullYear())?Ba:Ca)[n];if(m>x-d.getDate())m-=x-d.getDate()+1,d.setDate(1),11>n?d.setMonth(n+1):(d.setMonth(0),d.setFullYear(d.getFullYear()+1));else{d.setDate(d.getDate()+m);break}}n=new Date(d.getFullYear()+1,0,4);m=q(new Date(d.getFullYear(),\n0,4));n=q(n);return 0>=l(m,d)?0>=l(n,d)?d.getFullYear()+1:d.getFullYear():d.getFullYear()-1}var u=N[f+40>>2>>>0];f={ra:N[f>>2>>>0],qa:N[f+4>>2>>>0],ma:N[f+8>>2>>>0],oa:N[f+12>>2>>>0],na:N[f+16>>2>>>0],la:N[f+20>>2>>>0],ga:N[f+24>>2>>>0],ka:N[f+28>>2>>>0],ta:N[f+32>>2>>>0],pa:N[f+36>>2>>>0],sa:u?U(u):\"\"};e=U(e);u={\"%c\":\"%a %b %d %H:%M:%S %Y\",\"%D\":\"%m/%d/%y\",\"%F\":\"%Y-%m-%d\",\"%h\":\"%b\",\"%r\":\"%I:%M:%S %p\",\"%R\":\"%H:%M\",\"%T\":\"%H:%M:%S\",\"%x\":\"%m/%d/%y\",\"%X\":\"%H:%M:%S\",\"%Ec\":\"%c\",\"%EC\":\"%C\",\"%Ex\":\"%m/%d/%y\",\n\"%EX\":\"%H:%M:%S\",\"%Ey\":\"%y\",\"%EY\":\"%Y\",\"%Od\":\"%d\",\"%Oe\":\"%e\",\"%OH\":\"%H\",\"%OI\":\"%I\",\"%Om\":\"%m\",\"%OM\":\"%M\",\"%OS\":\"%S\",\"%Ou\":\"%u\",\"%OU\":\"%U\",\"%OV\":\"%V\",\"%Ow\":\"%w\",\"%OW\":\"%W\",\"%Oy\":\"%y\"};for(var r in u)e=e.replace(new RegExp(r,\"g\"),u[r]);var va=\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),wa=\"January February March April May June July August September October November December\".split(\" \");u={\"%a\":function(d){return va[d.ga].substring(0,3)},\"%A\":function(d){return va[d.ga]},\"%b\":function(d){return wa[d.na].substring(0,\n3)},\"%B\":function(d){return wa[d.na]},\"%C\":function(d){return k((d.la+1900)/100|0,2)},\"%d\":function(d){return k(d.oa,2)},\"%e\":function(d){return g(d.oa,2,\" \")},\"%g\":function(d){return v(d).toString().substring(2)},\"%G\":function(d){return v(d)},\"%H\":function(d){return k(d.ma,2)},\"%I\":function(d){d=d.ma;0==d?d=12:12<d&&(d-=12);return k(d,2)},\"%j\":function(d){for(var m=0,n=0;n<=d.na-1;m+=(W(d.la+1900)?Ba:Ca)[n++]);return k(d.oa+m,3)},\"%m\":function(d){return k(d.na+1,2)},\"%M\":function(d){return k(d.qa,\n2)},\"%n\":function(){return\"\\n\"},\"%p\":function(d){return 0<=d.ma&&12>d.ma?\"AM\":\"PM\"},\"%S\":function(d){return k(d.ra,2)},\"%t\":function(){return\"\\t\"},\"%u\":function(d){return d.ga||7},\"%U\":function(d){return k(Math.floor((d.ka+7-d.ga)/7),2)},\"%V\":function(d){var m=Math.floor((d.ka+7-(d.ga+6)%7)/7);2>=(d.ga+371-d.ka-2)%7&&m++;if(m)53==m&&(n=(d.ga+371-d.ka)%7,4==n||3==n&&W(d.la)||(m=1));else{m=52;var n=(d.ga+7-d.ka-1)%7;(4==n||5==n&&W(d.la%400-1))&&m++}return k(m,2)},\"%w\":function(d){return d.ga},\"%W\":function(d){return k(Math.floor((d.ka+\n7-(d.ga+6)%7)/7),2)},\"%y\":function(d){return(d.la+1900).toString().substring(2)},\"%Y\":function(d){return d.la+1900},\"%z\":function(d){d=d.pa;var m=0<=d;d=Math.abs(d)/60;return(m?\"+\":\"-\")+String(\"0000\"+(d/60*100+d%60)).slice(-4)},\"%Z\":function(d){return d.sa},\"%%\":function(){return\"%\"}};e=e.replace(/%%/g,\"\\x00\\x00\");for(r in u)e.includes(r)&&(e=e.replace(new RegExp(r,\"g\"),u[r](f)));e=e.replace(/\\0\\0/g,\"%\");r=Da(e);if(r.length>b)return 0;L.set(r,a>>>0);return r.length-1}\nvar Fa={j:function(){I(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},c:function(){return 0},h:function(){},t:function(){},v:function(){},m:function(){return 0},H:function(){},C:function(){},G:function(){},g:function(){},u:function(){},r:function(){},I:function(){},s:function(){},i:function(){return!0},z:function(a,b){a=new Date(1E3*(O[a>>>2]+4294967296*N[a+4>>>2]));N[b>>2>>>0]=a.getUTCSeconds();N[b+4>>2>>>0]=a.getUTCMinutes();N[b+\n8>>2>>>0]=a.getUTCHours();N[b+12>>2>>>0]=a.getUTCDate();N[b+16>>2>>>0]=a.getUTCMonth();N[b+20>>2>>>0]=a.getUTCFullYear()-1900;N[b+24>>2>>>0]=a.getUTCDay();N[b+28>>2>>>0]=(a.getTime()-Date.UTC(a.getUTCFullYear(),0,1,0,0,0,0))/864E5|0},A:function(a,b){a=new Date(1E3*(O[a>>>2]+4294967296*N[a+4>>>2]));N[b>>2>>>0]=a.getSeconds();N[b+4>>2>>>0]=a.getMinutes();N[b+8>>2>>>0]=a.getHours();N[b+12>>2>>>0]=a.getDate();N[b+16>>2>>>0]=a.getMonth();N[b+20>>2>>>0]=a.getFullYear()-1900;N[b+24>>2>>>0]=a.getDay();N[b+\n28>>2>>>0]=ta(a)|0;N[b+36>>2>>>0]=-(60*a.getTimezoneOffset());var e=(new Date(a.getFullYear(),6,1)).getTimezoneOffset(),f=(new Date(a.getFullYear(),0,1)).getTimezoneOffset();N[b+32>>2>>>0]=(e!=f&&a.getTimezoneOffset()==Math.min(f,e))|0},B:function(a){var b=new Date(N[a+20>>2>>>0]+1900,N[a+16>>2>>>0],N[a+12>>2>>>0],N[a+8>>2>>>0],N[a+4>>2>>>0],N[a>>2>>>0],0),e=N[a+32>>2>>>0],f=b.getTimezoneOffset(),g=(new Date(b.getFullYear(),6,1)).getTimezoneOffset(),k=(new Date(b.getFullYear(),0,1)).getTimezoneOffset(),\nl=Math.min(k,g);0>e?N[a+32>>2>>>0]=Number(g!=k&&l==f):0<e!=(l==f)&&(g=Math.max(k,g),b.setTime(b.getTime()+6E4*((0<e?l:g)-f)));N[a+24>>2>>>0]=b.getDay();N[a+28>>2>>>0]=ta(b)|0;N[a>>2>>>0]=b.getSeconds();N[a+4>>2>>>0]=b.getMinutes();N[a+8>>2>>>0]=b.getHours();N[a+12>>2>>>0]=b.getDate();N[a+16>>2>>>0]=b.getMonth();N[a+20>>2>>>0]=b.getYear();return b.getTime()/1E3|0},w:function(){return-52},x:function(){},o:function(a,b,e){function f(v){return(v=v.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?v[1]:\"GMT\"}\nvar g=(new Date).getFullYear(),k=new Date(g,0,1),l=new Date(g,6,1);g=k.getTimezoneOffset();var q=l.getTimezoneOffset();O[a>>2>>>0]=60*Math.max(g,q);N[b>>2>>>0]=Number(g!=q);a=f(k);b=f(l);a=xa(a);b=xa(b);q<g?(O[e>>2>>>0]=a,O[e+4>>2>>>0]=b):(O[e>>2>>>0]=b,O[e+4>>2>>>0]=a)},a:function(){I(\"\")},J:function(){I(\"To use dlopen, you need enable dynamic linking, see https://emscripten.org/docs/compiling/Dynamic-Linking.html\")},e:function(){return Date.now()},p:function(){return 4294901760},b:A?()=>{var a=\nprocess.hrtime();return 1E3*a[0]+a[1]/1E6}:()=>performance.now(),F:function(a,b,e){M.copyWithin(a>>>0,b>>>0,b+e>>>0)},n:function(a){var b=M.length;a>>>=0;if(4294901760<a)return!1;for(var e=1;4>=e;e*=2){var f=b*(1+.2/e);f=Math.min(f,a+100663296);var g=Math,k=g.min;f=Math.max(a,f);f+=(65536-f%65536)%65536;a:{var l=J.buffer;try{J.grow(k.call(g,4294901760,f)-l.byteLength+65535>>>16);ba();var q=1;break a}catch(v){}q=void 0}if(q)return!0}return!1},D:function(a,b){var e=0;za().forEach(function(f,g){var k=\nb+e;g=O[a+4*g>>2>>>0]=k;for(k=0;k<f.length;++k)L[g++>>0>>>0]=f.charCodeAt(k);L[g>>0>>>0]=0;e+=f.length+1});return 0},E:function(a,b){var e=za();O[a>>2>>>0]=e.length;var f=0;e.forEach(function(g){f+=g.length+1});O[b>>2>>>0]=f;return 0},d:function(){return 52},f:function(){return 52},k:function(){return 70},q:function(a,b,e,f){for(var g=0,k=0;k<e;k++){var l=O[b>>2>>>0],q=O[b+4>>2>>>0];b+=8;for(var v=0;v<q;v++){var u=M[l+v>>>0],r=Aa[a];0===u||10===u?((1===a?aa:G)(oa(r,0)),r.length=0):r.push(u)}g+=q}O[f>>\n2>>>0]=g;return 0},y:Ea,l:function(a,b,e,f){return Ea(a,b,e,f)}};\n(function(){function a(e){e=e.exports;c.asm=e;J=c.asm.K;ba();da.unshift(c.asm.L);P--;c.monitorRunDependencies&&c.monitorRunDependencies(P);if(0==P&&(null!==Q&&(clearInterval(Q),Q=null),R)){var f=R;R=null;f()}return e}var b={a:Fa};P++;c.monitorRunDependencies&&c.monitorRunDependencies(P);if(c.instantiateWasm)try{return c.instantiateWasm(b,a)}catch(e){G(\"Module.instantiateWasm callback failed with error: \"+e),p(e)}ma(b,function(e){a(e.instance)}).catch(p);return{}})();\nc._OrtInit=function(){return(c._OrtInit=c.asm.M).apply(null,arguments)};c._OrtGetLastError=function(){return(c._OrtGetLastError=c.asm.N).apply(null,arguments)};c._OrtCreateSessionOptions=function(){return(c._OrtCreateSessionOptions=c.asm.O).apply(null,arguments)};c._OrtAppendExecutionProvider=function(){return(c._OrtAppendExecutionProvider=c.asm.P).apply(null,arguments)};c._OrtAddSessionConfigEntry=function(){return(c._OrtAddSessionConfigEntry=c.asm.Q).apply(null,arguments)};\nc._OrtReleaseSessionOptions=function(){return(c._OrtReleaseSessionOptions=c.asm.R).apply(null,arguments)};c._OrtCreateSession=function(){return(c._OrtCreateSession=c.asm.S).apply(null,arguments)};c._OrtReleaseSession=function(){return(c._OrtReleaseSession=c.asm.T).apply(null,arguments)};c._OrtGetInputOutputCount=function(){return(c._OrtGetInputOutputCount=c.asm.U).apply(null,arguments)};c._OrtGetInputName=function(){return(c._OrtGetInputName=c.asm.V).apply(null,arguments)};\nc._OrtGetOutputName=function(){return(c._OrtGetOutputName=c.asm.W).apply(null,arguments)};c._OrtFree=function(){return(c._OrtFree=c.asm.X).apply(null,arguments)};c._OrtCreateTensor=function(){return(c._OrtCreateTensor=c.asm.Y).apply(null,arguments)};c._OrtGetTensorData=function(){return(c._OrtGetTensorData=c.asm.Z).apply(null,arguments)};c._OrtReleaseTensor=function(){return(c._OrtReleaseTensor=c.asm._).apply(null,arguments)};\nc._OrtCreateRunOptions=function(){return(c._OrtCreateRunOptions=c.asm.$).apply(null,arguments)};c._OrtAddRunConfigEntry=function(){return(c._OrtAddRunConfigEntry=c.asm.aa).apply(null,arguments)};c._OrtReleaseRunOptions=function(){return(c._OrtReleaseRunOptions=c.asm.ba).apply(null,arguments)};c._OrtRun=function(){return(c._OrtRun=c.asm.ca).apply(null,arguments)};c._OrtEndProfiling=function(){return(c._OrtEndProfiling=c.asm.da).apply(null,arguments)};\nvar ya=c._malloc=function(){return(ya=c._malloc=c.asm.ea).apply(null,arguments)};c._free=function(){return(c._free=c.asm.fa).apply(null,arguments)};function Ga(){return(Ga=c.asm.ha).apply(null,arguments)}function Ha(){return(Ha=c.asm.ia).apply(null,arguments)}function Ia(){return(Ia=c.asm.ja).apply(null,arguments)}c.stackAlloc=Ia;c.stackSave=Ga;c.stackRestore=Ha;c.UTF8ToString=U;c.stringToUTF8=qa;c.lengthBytesUTF8=V;var Z;R=function Ja(){Z||Ka();Z||(R=Ja)};\nfunction Ka(){function a(){if(!Z&&(Z=!0,c.calledRun=!0,!K)){T(da);h(c);if(c.onRuntimeInitialized)c.onRuntimeInitialized();if(c.postRun)for(\"function\"==typeof c.postRun&&(c.postRun=[c.postRun]);c.postRun.length;){var b=c.postRun.shift();ea.unshift(b)}T(ea)}}if(!(0<P)){if(c.preRun)for(\"function\"==typeof c.preRun&&(c.preRun=[c.preRun]);c.preRun.length;)fa();T(ca);0<P||(c.setStatus?(c.setStatus(\"Running...\"),setTimeout(function(){setTimeout(function(){c.setStatus(\"\")},1);a()},1)):a())}}\nif(c.preInit)for(\"function\"==typeof c.preInit&&(c.preInit=[c.preInit]);0<c.preInit.length;)c.preInit.pop()();Ka();\n\n\n  return ortWasm.ready\n}\n\n);\n})();\nif (typeof exports === 'object' && typeof module === 'object')\n  module.exports = ortWasm;\nelse if (typeof define === 'function' && define['amd'])\n  define([], function() { return ortWasm; });\nelse if (typeof exports === 'object')\n  exports[\"ortWasm\"] = ortWasm;\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nexports.__esModule = true;\r\nvar Guid = /** @class */ (function () {\r\n    function Guid(guid) {\r\n        if (!guid) {\r\n            throw new TypeError(\"Invalid argument; `value` has no value.\");\r\n        }\r\n        this.value = Guid.EMPTY;\r\n        if (guid && Guid.isGuid(guid)) {\r\n            this.value = guid;\r\n        }\r\n    }\r\n    Guid.isGuid = function (guid) {\r\n        var value = guid.toString();\r\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\r\n    };\r\n    Guid.create = function () {\r\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\r\n    };\r\n    Guid.createEmpty = function () {\r\n        return new Guid(\"emptyguid\");\r\n    };\r\n    Guid.parse = function (guid) {\r\n        return new Guid(guid);\r\n    };\r\n    Guid.raw = function () {\r\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\r\n    };\r\n    Guid.gen = function (count) {\r\n        var out = \"\";\r\n        for (var i = 0; i < count; i++) {\r\n            // tslint:disable-next-line:no-bitwise\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    };\r\n    Guid.prototype.equals = function (other) {\r\n        // Comparing string `value` against provided `guid` will auto-call\r\n        // toString on `guid` for comparison\r\n        return Guid.isGuid(other) && this.value === other.toString();\r\n    };\r\n    Guid.prototype.isEmpty = function () {\r\n        return this.value === Guid.EMPTY;\r\n    };\r\n    Guid.prototype.toString = function () {\r\n        return this.value;\r\n    };\r\n    Guid.prototype.toJSON = function () {\r\n        return {\r\n            value: this.value\r\n        };\r\n    };\r\n    Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\r\n    Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\r\n    return Guid;\r\n}());\r\nexports.Guid = Guid;\r\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// minimal library entry point.\n\n\"use strict\";\nmodule.exports = require(\"./src/index-minimal\");\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader       = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util         = require(\"./util/minimal\");\nprotobuf.rpc          = require(\"./rpc\");\nprotobuf.roots        = require(\"./roots\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.util._configure();\n    protobuf.Writer._configure(protobuf.BufferWriter);\n    protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup(buffer) {\n            return (Reader.create = function create_buffer(buffer) {\n                return util.Buffer.isBuffer(buffer)\n                    ? new BufferReader(buffer)\n                    /* istanbul ignore next */\n                    : create_array(buffer);\n            })(buffer);\n        }\n        /* istanbul ignore next */\n        : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n    Reader.create = create();\n    BufferReader._configure();\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\nBufferReader._configure = function () {\n    /* istanbul ignore else */\n    if (util.Buffer)\n        BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice\n        ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len))\n        : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\"\n                   && global\n                   && global.process\n                   && global.process.versions\n                   && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global\n           || typeof window !== \"undefined\" && window\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: new Error().stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(\"./util/minimal\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\nvar create = function create() {\n    return util.Buffer\n        ? function create_buffer_setup() {\n            return (Writer.create = function create_buffer() {\n                return new BufferWriter();\n            })();\n        }\n        /* istanbul ignore next */\n        : function create_array() {\n            return new Writer();\n        };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n    Writer.create = create();\n    BufferWriter._configure();\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\nBufferWriter._configure = function () {\n    /**\n     * Allocates a buffer of the specified size.\n     * @function\n     * @param {number} size Buffer size\n     * @returns {Buffer} Buffer\n     */\n    BufferWriter.alloc = util._Buffer_allocUnsafe;\n\n    BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\"\n        ? function writeBytesBuffer_set(val, buf, pos) {\n          buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n          // also works for plain array values\n        }\n        /* istanbul ignore next */\n        : function writeBytesBuffer_copy(val, buf, pos) {\n          if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n          else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n        };\n};\n\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(BufferWriter.writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else if (buf.utf8Write)\n        buf.utf8Write(val, pos);\n    else\n        buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = util.Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();\n","module.exports = __WEBPACK_EXTERNAL_MODULE__1670__;","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZE_PREFIX_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {!flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {!Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {!flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n * @param {boolean=} opt_size_prefix\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {\n  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);\n  this.addOffset(root_table);\n  if (size_prefix) {\n    this.addInt32(this.bb.capacity() - this.space);\n  }\n  this.bb.setPosition(this.space);\n};\n\n/**\n * Finalize a size prefixed buffer, pointing to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finishSizePrefixed = function (root_table, opt_file_identifier) {\n  this.finish(root_table, opt_file_identifier, true);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {!flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|!Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {!flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(1057);\n"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__1670__","async","pathOrBuffer","options","session","Session","loadModel","OnnxjsSessionHandler","env","wasm","initTimeout","simd","proxy","numThreads","Number","isInteger","numCpuLogicalCores","navigator","cpus","length","hardwareConcurrency","Math","min","ceil","initializeWebAssemblyInstance","handler","OnnxruntimeWebAssemblySessionHandler","Promise","resolve","onnxjsBackend","registerBackend","wasmBackend","versions","web","version","AttributeWithCacheKeyImpl","constructor","attribute","Object","assign","this","cacheKey","_cacheKey","getOwnPropertyNames","sort","map","name","join","createAttributeWithCacheKey","ortFbs","onnxruntime","experimental","fbs","Attribute","attributes","_attributes","Map","attr","onnx","AttributeProto","set","getValue","getType","size","Error","key","type","value","delete","getFloat","defaultValue","get","getInt","getString","getTensor","getFloats","getInts","getStrings","getTensors","valueAndType","undefined","static","AttributeType","FLOAT","INT","STRING","TENSOR","FLOATS","INTS","STRINGS","TENSORS","attrType","GRAPH","GRAPHS","getValueNoCheck","LongUtil","isLong","longToNumber","arr","numberValue","Array","maybeLong","Tensor","fromProto","fromOrtTensor","utf8String","decodeUtf8String","getValueNoCheckFromOnnxFormat","getValueNoCheckFromOrtFormat","f","s","t","g","floats","ints","strings","tensors","graphs","floatsArray","intsLength","push","stringsLength","tensorsLength","backendsCache","tryLoadBackend","backendHint","backendObj","backend","obj","o","initialize","createSessionHandler","dispose","isBackend","init","webgl","WebGLBackend","resolveBackend","hint","hints","cache","contextId","matmulMaxBatchSize","textureCacheMode","pack","glContext","createWebGLContext","Logger","setWithEnv","verbose","e","warning","context","WebGLSessionHandler","CoordsGlslLib","GlslLib","super","getFunctions","offsetToCoords","coordsToOffset","toVec","valueFrom","getCommonUtilFuncs","getInputsSamplingSnippets","getOutputSamplingSnippet","getCustomTypes","GlslLibRoutine","outputLayout","outputTextureLayout","isPacked","getPackedOutputSamplingSnippet","getUnpackedOutputSamplingSnippet","outShape","unpackedShape","outTexShape","width","height","result","funcName","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","floatTextureSetRGBASource","getGlsl","output","getOutputUnpacked1DCoords","getOutputUnpacked2DCoords","getOutputUnpacked3DCoords","getOutputUnpacked4DCoords","getOutputUnpacked5DCoords","getOutputUnpacked6DCoords","floatTextureSetRSource","shape","texShape","packedTexShape","source","ArrayUtil","arraysEqual","texelsInLogicalRow","texelsInBatch","texelsInBatchN","batches","coords","b","rank","strides","coordsToCompute","coordsFromIndexSnippet","stride","glsl","texture2D","programInfo","inputNames","forEach","samplerName","inputLayout","inputTextureLayouts","generateShaderFuncNameFromInputSamplerName","getPackedSamplerFromInput","getUnpackedSamplerFromInput","outCoordFuncName","generateShaderFuncNameFromInputSamplerNameAtOutCoords","getPackedSamplerAtOutputCoords","getUnpackedSamplerAtOutputCoords","inShape","texName","texFuncSnippet","inRank","outRank","broadcastDims","BroadcastUtil","getBroadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","getGlChannels","d","unpackedCoordsSnippet","isInputScalar","ShapeUtil","isOutputScalar","rows","cols","indexOf","inTexShape","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","getUnpackedSamplerScalar","getUnpackedSampler1D","getUnpackedSampler2D","getUnpackedSampler3D","getUnpackedSampler4D","getUnpackedSampler5D","getUnpackedSampler6D","texNumR","texNumC","packedSampler","valuesPerRow","squeezedShape","slice","keptDims","newInputShape","squeezeInputShape","params","newInputLayout","JSON","parse","stringify","samplerRoutine","routineBody","getSqueezedParams","dependencies","index","tNumR","tNumC","newShape","squeezeShape","stride0","stride1","routine","revDims","reverse","stride2","stride3","stride4","xScale","yScale","stridesBlock","body","layout","getValueFromSingle","varName","transpose","getPackedValueFrom","FunctionType","addDependency","node","nodes","cycleCheck","Set","alreadyTraversed","createOrderedNodes","graphNodes","dfsTraverse","has","add","EncodingGlslLib","encodeFloat32","decodeFloat32","encode","decode","encodeUint8","endianness","isLittleEndian","decodeUint8","ArrayBuffer","Uint32Array","c","Uint8Array","FragColorGlslLib","setFragColor","getColorAsFloat","INLINE_FUNC_DEF_REGEX","script","inlineDefs","match","exec","split","tokens","trim","filter","v","regexString","replace","regex","RegExp","variable","declLine","newBody","paramRedecLine","replacement","libs","glslLibRoutineDependencyGraph","GlslContext","keys","glslRegistry","lib","libName","routinesInLib","currentNode","GlslLibRoutineNode","preprocess","shaderSource","hasMain","getDefaultFragShaderMain","replaceInlines","getFragShaderPreamble","getUniforms","variables","getImports","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","TopologicalSortGlslRoutines","returnOrderedNodes","samplers","uniformLines","sampler","arrayLength","VecGlslLib","ShapeUtilsGlslLib","bcastIndex","bcastMatmulIndex","offsetToIndices","indicesToOffset","incrementIndices","outputRank","dimOffset","block","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","GLSL_ES_2_0","varyingVertex","varyingFrag","outputDeclaration","GLSL_ES_3_0","outputShapeLength","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","sub","mul","div","fname","assignmentBlock","packedTextureDataCache","unpackedTextureDataCache","calculateTextureWidthAndHeight","textureType","layoutStrategy","executeProgram","program","inputs","inputTypes","inputTextureDatas","getOrCreateTextureData","texture","cacheHint","getProgramInfoUniqueKey","artifact","programManager","getArtifact","createTextureLayoutFromTextureType","dims","outputTextureData","createTextureData","build","setArtifact","runProgram","run","tensor","TextureType","packed","td","getTextureData","dataId","unpack","packedLastDimension","group","channels","adjustedKernelShape","adjustedLayout","buffer","numberData","numFeatureMaps","oldRowSize","newRowSize","Float32Array","oldOffset","newOffset","subarray","unpackedTextureLayout","createTextureLayoutFromShape","reverseWH","unpackedTextureData","createTextureDataFromLayoutBindTensor","dataType","data","usage","textureManager","createTextureFromLayout","createTextureDataFromTexture","reshapeUnpacked","input","reshapedDims","inputTD","unpacked","newTextureLayout","computeStrides","reshapePacked","isReshapeCheap","squeezedInputShape","processDims3D","squeezedOutputShape","squeezedInputTensor","squeezedOutputTensor","createPackedReshape3DProgramInfoLoader","cast","tensorId","textureData","_id","readTexture","readTextureAsync","setTextureData","isInitializer","isTextureLayoutCached","clearActiveTextures","releaseTexture","isFloat32DownloadSupported","readUint8TextureAsFloat","encodeAsUint8","createPackProgramInfoLoader","createUnpackProgramInfoLoader","WEBGL_OP_RESOLVE_RULES","unaryOps","abs","acos","binaryOps","and","asin","atan","averagePool","parseAveragePoolAttributes","batchNormalization","parseBatchNormalizationAttributes","parseCastAttributes","clip","parseClipAttributes","clipV11","concat","parseConcatAttributes","conv","parseConvAttributes","convTranspose","parseConvTransposeAttributes","cos","identity","depthToSpace","parseDepthToSpaceAttributes","equal","elu","parseEluAttributes","exp","flatten","parseFlattenAttributes","floor","gather","parseGatherAttributes","gemm","parseGemmAttributesV7","parseGemmAttributesV11","globalAveragePool","parseGlobalAveragePoolAttributes","globalMaxPool","greater","imageScaler","parseImageScalerAttributes","instanceNormalization","parseInstanceNormalizationAttributes","leakyRelu","parseLeakyReluAttributes","less","lrn","parseLrnAttributes","log","matMul","parseMatMulAttributes","maxPool","parseMaxPoolAttributes","neg","not","or","padV2","parsePadAttributesV2","padV11","parsePadAttributesV11","pow","pRelu","reduceLogSum","parseReduceAttributes","reduceMax","reduceMean","reduceMin","reduceProd","reduceSum","reduceLogSumSquare","relu","reshape","resize","parseResizeAttributesV10","parseResizeAttributesV11","sigmoid","sin","sliceV10","parseSliceAttributes","softmax","parseSoftmaxAttributes","softmaxV13","parseSoftmaxAttributesV13","parseSplitAttributes","sqrt","squeeze","parseSqueezeAttributes","squeezeV13","sum","tan","tanh","tile","parseTransposeAttributes","upsample","parseUpsampleAttributesV7","parseUpsampleAttributesV9","unsqueeze","parseUnsqueezeAttributes","unsqueezeV13","xor","batchNormalizationProgramMetadata","inferenceHandler","validateInputs","createBatchNormalizationProgramInfo","epsilon","momentum","spatial","scaleWidth","scaleHeight","X","scale","B","mean","var_","glslAdd","ValueBased","glslDiv","glslMul","glslSub","glslEqual","glslGreater","glslLess","glslAnd","glslOr","glslXor","glslPow","glslBuiltinBinary","glslPRelu","createBinaryProgramInfoLoader","glslFunc","outputTensorType","createBinaryProgramInfo","isBroadcast","areEqual","outputShape","usePackedTexture","calculatedShape","calcShape","aRank","bRank","aBcast","bBcast","to","ProtoUtil","tensorDataTypeFromProto","createPackedConcatProgramInfoLoader","metadata","inputCount","from","fill","axis","inputShape","dataNShape","axisIndex","getChannels","dtype","unpackChannel","unpackFromChannel","shapes","offsets","channel","lastChannels","allChannels","getValueSnippet","shift","getShiftedChannelsSnippet","lastIndex","x","createPackedConcatProgramInfo","channelIdx","idx","createUnpackedConcatProgramInfoLoader","sizeInConcatAxis","previousSum","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","getFetchDataFromCorrectTextureMethod","getGetSizeInConcatAxisValueFromIndexMethod","createUnpackedConcatProgramInfo","numberOfTensors","tensorRank","codeLines","inputType","inputDimensionality","createUnpackedGroupedConvProgramInfoLoader","hasBias","processBias","xShape","wShape","outputChannelsPerGroup","autoPad","dilations","kernelShape","pads","calculateOutputShape","activationFunction","applyActivation","getActivationSnippet","createUnpackedGroupedConvProgramInfo","conv2DPackedPointwise","xshape","kshape","reshapedX","reshapedK","matmulInputs","matmulOutput","createPackedMatmulProgramInfoLoader","conv2DPacked","im2colOutput","createPackedIm2ColProgramInfoLoader","kernelReshaped","computeTotalPad","inDim","adj","kernel","dilation","outSize","distributePadding","totalPad","head","tail","smallPad","convTranspose2d","adjustedAttributes","getAdjustedConvTransposeAttributes","convTranspose2DUnpacked","valueInit","inputChannelsPerGroup","createUnpackedConvTransposeProgramInfo","createUnpackedConvTransposeProgramInfoLoader","outputPadding","spatialRank","updateShape","calculateOutputShapeAndPads","newAttributes","activationAttributes","parseInternalActivationAttributes","featureMaps","adjustPads","batchSize","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","conv2d","getAdjustedConvAttributes","packMode","isPointwise","conv2DUnpackedPointwise","conv2DUnpacked","createMatmulProgramInfoLoader","xIm2Col","createIm2ColProgramInfoLoader","dotProductInputs","createDotProductProgramInfoLoader","PoolConvUtil","adjustPadsBasedOnAutoPad","blocksize","blocksizeSqr","transposePerm","mode","firstReshapeShape","firstReshapedTensor","transposeAttributes","perm","transposeOutput","secondReshapeShape","TypeError","activationCacheKey","createDotProductProgramMetadata","im2colShape","calculateIm2ColDims","kWidth","kHeight","im2colStrides","im2colWidth","im2colHeight","initValue","sharedDim","createDotProductProgramInfo","outputDims","flattenShape","r","func","activation","glslRelu","glslSigmoid","glslClip","clipMin","clipMax","activationName","MIN_CLIP","MAX_CLIP","createGatherProgramInfoLoader","gatherProgramMetadata","indexDataShape","normalizeAxis","indexCopyOps","createGatherProgramInfo","NUMBER_TYPES","createGemmProgramInfoLoader","parseGemmAttributes","isOptionalC","transA","transB","alpha","beta","createGemmProgramInfo","aShape","bShape","M","N","GemmUtil","getShapeOfGemmResult","line","w","wshape","kernelSize","unrolled","row","col","createPackedIm2ColProgramInfo","im2colDims","createIm2ColProgramInfo","createImageScalerProgramInfoLoader","bias","imageScalerProgramMetadata","createGetBiasMethod","createImageScalerProgramInfo","numChannels","meanAndVariance","createMeanAndVarianceProgramInfoLoader","createComputeOutputProgramInfoLoader","meanAndVarianceProgramMetadata","xDims","channelSize","createMeanAndVarianceProgramInfo","computeOutputProgramMetadata","meanAndVarianceShape","textureWidth","textureHeight","meanAndVarianceWidth","meanAndVarianceHeight","createComputeOutputProgramInfo","createLrnProgramInfoLoader","lrnProgramMetadata","C","createLrnProgramInfo","sharedDimIndex","coordsDataType","allGlChannels","getBiasForMatmulSnippet","getBiasForMatmul","getBcastedSamplerForMatmulSnippet","unpackedACoordsSnippet","unpackedBCoordsSnippet","inAShape","inBShape","inARank","inBRank","rankADiff","rankBDiff","broadcastADims","broadcastBDims","coordsASnippet","coordsBSnippet","swapDimSnippet","getBcastSamplerForMatmul","getSamplerAInLoopSnippet","res","getA","getSamplerBInLoopSnippet","getB","createPackedMatmulProgramInfo","createMatmulProgramMetadata","arank","brank","createMatmulProgramInfo","packProgramMetadata","unpackedReversed","inputRank","setup","reversedInputWH","outOfBoundsCondition","cond","getOutOfBoundsCondition","D","getOutput","createPackProgramInfo","getVecChannels","padProgramMetadata","validateInputsV2","createPadProgramInfo","validateInputsV11","attrubutes","generatePadAttributesFromInputs","integerData","floatData","padShape","getPadFunction","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","ceilMode","countIncludePad","isGlobalOperator","getAdjustedPoolAttributesAndOutputShape","op2","generatePoolingCode","createMaxPoolProgramInfo","storageOrder","hasDilations","hasOwnProperty","call","adjustPoolAttributes","computePoolOutputShape","globalMaxPoolAttributes","globalMaxPoolMetadata","inputDims","op1","start","kw","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","kh","sh","phStart","phEnd","dimH","kernelStrides","stridesRank","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","copyStrides","padCode","reduce","cur","array","arrayName","reduceOp","reduceProgramMetadata","createReduceProgramInfo","axes","keepDims","iRank","idxCopy","normalizeAxes","ops","reduceOps","k","idxZero","input3D","outputShape3D","createPackedReshape3DProgramMetadata","inputShape3D","mainLoop","outputCoords","getReshapedInputCoords","getFlattenedIndexFrom3D","createPackedReshape3DProgramInfo","batch","isCheapReshape","calculateReshapedDims","resizeProgramMetadata","createPackedResizeProgramInfo","parseUpsampleAttributes","scales","prepareInputs","every","coordinateTransformMode","dim","outputHeight","outputWidth","inputHeight","inputWidth","scalesHeight","scalesWidth","getSourceFracIndex","outputSizes","scalesTensor","scalesInputIdx","sizesInputIdx","parseScalesData","isResize","sizesTensor","parseScalesDataFromOutputSize","yDims","scalesValidation","end","Int32Array","sliceProgramMetadata","createSliceProgramInfo","starts","ends","val","normalizedAxes","sliceOps","validateInputsV10","generateSliceAttributesFromInputs","some","softmaxComputeMaxProgramMetadata","softmaxComputeScaleProgramMetadata","softmaxProgramMetadata","logicalRowCount","sizeToDimension","featureCount","sizeFromDimension","computeSoftmax","isTransposeRequired","transposedInputShape","transposeAttribute","transposedInputs","_","p","computeMaxProgramInfo","createComputeMaxProgramInfo","max","computeScaleProgramInfo","createComputScaleProgramInfo","softMaxProgramInfo","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","splitProgramMetadata","count","getProgramCount","createSplitProgramInfo","numOutputs","outputs","SplitUtil","splitShape","offset","validateInputsV13","sumProgramMetadata","createSumProgramInfo","j","tileProgramMetadata","createTileProgramInfo","tileOps","transposeProgramMetadata","createTransposeProgramInfo","getAdjustedPerm","unpackedOutputShape","getOutputShape","getPermFunctionBody","sortBasedOnPerm","reverseFunc","downloadUint8AsFloat","glslAbs","glslBuiltinUnary","glslAcos","glslAsin","glslAtan","glslCeil","glslCos","glslElu","glslExp","glslFloor","glslIdentity","glslLeakyRelu","glslLog","glslNeg","glslNot","glslSin","glslSqrt","glslTan","glslTanh","createElementwiseProgramInfoLoader","createElementwiseProgramInfo","generateClipAttributesFromInputs","unpackProgramMetadata","createUnpackProgramInfo","innerDims","sourceCoords","getSourceCoords","unsqueezeShape","upsampleProgramMetadata","createUpsampleProgramInfo","opset","extrapolationValue","needRoiInput","useExtrapolation","nearestMode","cubicCoefficientA","excludeOutside","useNearest2xOptimization","roiInputIdx","outputPitches","inputPitches","precalculatedPitches","getInputFloatFunction","profiler","textureLayoutStrategy","repo","attributesBound","buildArtifact","event","gl","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","uniformLocations","err","error","draw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","getVertexShaderSource","compileShader","VERTEX_SHADER","debug","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","position","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","location","find","bindTexture","uniform1fv","uniform1f","uniform1iv","uniform1i","uniformHandle","bindTextureToUniform","getAttribLocation","getUniformLocation","reference","PreferLogicalStrategy","maxTextureSize","ProgramManager","TextureManager","reuseTextures","pack2unpackMap","unpack2packMap","createInferenceHandler","WebGLInferenceHandler","onGraphInitialized","graph","initializers","getValues","addInitializer","opsets","op","resolveOperator","impl","opImpl","opInit","internalFormat","R32F","format","RED","RGBA32F","RGBA","src","textureSize","allocate","dataSize","dest","ALPHA","UNSIGNED_BYTE","_textureSize","byteOffset","byteLength","isEmptyArray","isArray","parseAxisParam","assert","ax","isInt","sizeFromShape","sizeToSquarishShape","computeTextureWH","prefs","breakAxis","wsize","hsize","totalSize","wh","computeTexture","logShape","squeezeResult","dimsToSkip","inferredDims","reversedWH","config","pendingRead","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","encoder","getEncoder","pop","updateTexture","toTextureData","allocateTexture","toTensorData","subscribers","createAndWaitForFence","tensorData","deleteTexture","splice","Int16Array","Int8Array","Uint16Array","Float64Array","_dataType","len","checkFn","delayFn","_counter","maxCounter","reject","tryCount","tryFn","nextBackoff","setTimeout","charAt","toUpperCase","createNewWebGLContext","canvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","OffscreenCanvas","createOffscreenCanvas","document","createElement","createCanvas","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","linearSearchLastTrue","frameBufferBound","itemsToPoll","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","checkError","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","readPixels","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","label","toString","DataEncoders","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","finish","createDefaultGeometry","createBuffer","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","isBlendSupported","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","disjointTimerQueryWebgl2Extension","textureFloatExtension","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","beginTimer","gl2","ext","query","createQuery","beginQuery","TIME_ELAPSED_EXT","endTimer","endQuery","isTimerResultAvailable","available","disjoint","getQueryParameter","QUERY_RESULT_AVAILABLE","GPU_DISJOINT_EXT","getTimerResult","timeElapsed","QUERY_RESULT","deleteQuery","repeatedTry","fenceContext","createFence","pollFence","isFencePassed","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","status","clientWaitSync","ALREADY_SIGNALED","CONDITION_SATISFIED","addItemToPoll","pollItems","isDoneFn","resolveFn","KernelOp","getNodes","_ops","reset","_starter","resolved","_values","getInputIndices","sessionHandler","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","inputList","inputTensors","outputList","downstreamNodes","currentDownstreamNodeIndex","currentDownstreamNode","getOutputIndices","outputIndex","outputTensor","getData","Graph","graphProto","initializer","GraphImpl","Value","valueInfo","_from","_to","tensorValueTypeFromProto","tensorType","Node","_nodeProto","NodeProto","opType","tensorAttributesFromORTFormat","executeNode","graphInitializer","buildGraph","transformGraph","checkIsAcyclic","_allInputIndices","getInputNames","_allInputNames","_allOutputIndices","getOutputNames","_allOutputNames","_allData","_nodes","GraphProto","buildGraphFromOnnxFormat","buildGraphFromOrtFormat","dataIndices","nodesIndices","inputValueNames","currentIndex","tensorDimsFromProto","nodeProto","pick","dataIndex","inputsLength","inputName","nodeArgsLength","nodeArgs","valueType","TypeInfoValue","tensor_type","TensorTypeAndShape","elemType","dimLength","dimValue","initializersLength","tensorDimsFromORTFormat","outputsLength","outputName","nodesLength","attributesLength","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","fuseConvActivationNodes","finalizeGraph","newIndices","nodePossition","ind","currentData","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","replaceIndex","isActivation","n","next","child","SEVERITY_VALUE","info","fatal","LOGGER_PROVIDER_MAP","_severity","_content","_category","severity","content","category","console","color","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","bind","logInternal","stack","Date","toISOString","previousConfig","logLevel","Event","startTime","endCallback","timer","ctx","waitForQueryAndGetTime","EventRecord","endTime","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","begin","isPromise","then","reason","eventRes","endSync","checkTimer","toFixed","currentTime","previousPointer","started","performance","load","buf","isOrtFormat","loadFromOnnxFormat","loadFromOrtFormat","modelProto","ModelProto","irVersion","_opsets","opsetImport","domain","_graph","flatbuffers","ByteBuffer","ortModel","InferenceSession","getRootAsInferenceSession","model","opsetImportLength","opsetId","INT_TYPES","FLOAT_TYPES","matchSelector","selector","endsWith","rangeStart","parseInt","substring","isNaN","pair","rangeEnd","rules","rule","versionSelector","DimensionValueType","TensorDataType","NodeType","Shape","bb","bb_pos","__init","readInt32","setPosition","SIZE_PREFIX_LENGTH","__offset","Dimension","__indirect","__vector","__vector_len","builder","startObject","addFieldOffset","startVector","addOffset","endVector","numElems","endObject","startShape","addDim","endShape","DimensionValue","denotation","optionalEncoding","__string","valueOffset","denotationOffset","startDimension","addValue","addDenotation","endDimension","dimType","readInt8","UNKNOWN","readInt64","createLong","dimParam","addFieldInt8","addFieldInt64","dimParamOffset","startDimensionValue","addDimType","addDimValue","addDimParam","endDimensionValue","UNDEFINED","addFieldInt32","shapeOffset","startTensorTypeAndShape","addElemType","addShape","endTensorTypeAndShape","MapType","keyType","TypeInfo","valueTypeOffset","startMapType","addKeyType","addValueType","endMapType","SequenceType","elemTypeOffset","startSequenceType","endSequenceType","EdgeEnd","readUint32","srcArgIndex","dstArgIndex","node_index","src_arg_index","dst_arg_index","prep","writeInt32","NodeEdge","inputEdges","inputEdgesLength","outputEdges","outputEdgesLength","inputEdgesOffset","outputEdgesOffset","startNodeEdge","addNodeIndex","addInputEdges","addOutputEdges","endNodeEdge","docString","sinceVersion","Primitive","executionProviderType","inputArgCounts","inputArgCountsLength","inputArgCountsArray","bytes","implicitInputs","implicitInputsLength","nameOffset","docStringOffset","domainOffset","opTypeOffset","executionProviderTypeOffset","inputsOffset","outputsOffset","attributesOffset","inputArgCountsOffset","addInt32","implicitInputsOffset","startNode","addName","addDocString","addDomain","addSinceVersion","addIndex","addOpType","addType","addExecutionProviderType","addInputs","addOutputs","addAttributes","addInputArgCounts","addImplicitInputs","endNode","ValueInfo","typeOffset","startValueInfo","endValueInfo","readUint8","NONE","__union","startTypeInfo","endTypeInfo","OperatorSetId","startOperatorSetId","addVersion","endOperatorSetId","dimsLength","rawData","rawDataLength","rawDataArray","stringData","stringDataLength","dimsOffset","addInt64","rawDataOffset","addInt8","stringDataOffset","startTensor","addDims","addDataType","addRawData","addStringData","endTensor","SparseTensor","values","indices","valuesOffset","indicesOffset","startSparseTensor","addValues","addIndices","endSparseTensor","readFloat32","floatsLength","graphsLength","addFieldFloat32","sOffset","tOffset","gOffset","floatsOffset","addFloat32","intsOffset","stringsOffset","tensorsOffset","graphsOffset","startAttribute","addF","addI","addS","addT","addG","addFloats","addInts","addStrings","addTensors","addGraphs","endAttribute","maxNodeIndex","nodeEdges","nodeEdgesLength","sparseInitializers","sparseInitializersLength","initializersOffset","nodeArgsOffset","nodesOffset","nodeEdgesOffset","sparseInitializersOffset","startGraph","addInitializers","addNodeArgs","addNodes","addMaxNodeIndex","addNodeEdges","addSparseInitializers","endGraph","Model","producerName","producerVersion","modelVersion","graphDocString","opsetImportOffset","producerNameOffset","producerVersionOffset","graphOffset","graphDocStringOffset","startModel","addIrVersion","addOpsetImport","addProducerName","addProducerVersion","addModelVersion","addGraph","addGraphDocString","endModel","KernelCreateInfos","nodeIndices","nodeIndicesLength","nodeIndicesArray","kernelDefHashes","readUint64","kernelDefHashesLength","nodeIndicesOffset","kernelDefHashesOffset","startKernelCreateInfos","addNodeIndices","addKernelDefHashes","endKernelCreateInfos","SubGraphSessionState","graphId","sessionState","SessionState","graphIdOffset","sessionStateOffset","requiredField","startSubGraphSessionState","addGraphId","addSessionState","endSubGraphSessionState","kernels","subGraphSessionStates","subGraphSessionStatesLength","kernelsOffset","subGraphSessionStatesOffset","startSessionState","addKernels","addSubGraphSessionStates","endSessionState","__has_identifier","ortVersion","ortVersionOffset","modelOffset","startInferenceSession","addOrtVersion","addModel","endInferenceSession","outputNames","feeds","_fetches","_options","inputMap","feed","outputMap","startProfiling","endProfiling","_initialized","Profiler","create","graphInputTypes","graphInputDims","_model","arg","process","promisify","readFile","response","fetch","arrayBuffer","isView","modelProtoBlob","initializeOps","_executionPlan","ExecutionPlan","normalizeAndValidateInputs","outputTensors","execute","createOutput","modelInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","dataProvider","asyncDataProvider","_strides","Guid","validateDimsAndCalcSize","empty","RangeError","dataviewConstructor","sizeof","dataBuffer","createView","tensorProto","str","dataDest","dataSource","DataView","elementSize","sizeofProto","readProto","TensorProto","DataType","INT32","INT16","UINT16","INT8","UINT8","BOOL","int32Data","INT64","int64Data","DOUBLE","doubleData","UINT32","UINT64","uint64Data","element","ortTensor","greaterThanOrEqual","lessThan","toNumber","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","expectedDimensions","expr","msg","n1","n2","MatMulUtil","dimsA","dimsB","adims","bdims","isMatMul","crank","cdims","cShapeMatMul","calcMatMulShape","aLen","bLen","broadcastedIndices","originalShape","originalIndices","fillIndex","inplace","resultType","outputIndices","originalIndicesA","originalIndicesB","rest","valA","valB","isAScalar","isBScalar","finalShape","finalRank","unshift","target","targetIndex","sourceIndex","blockSize","leftShape","transLeft","rightShape","transRight","biasShape","K","kDim","isValidBroadcast","typeProto","unsigned","Long","fromValue","low","high","getSizeFromDimensionRange","axisToIncrementOn","originalDims","shapeHints","nDims","unknownDimension","newTensorSize","oldTensorSize","pad","shape1","shape2","total","y","right","inSqueezeList","inputDimsIterator","determineSplit","numElementsAlongAxis","ReduceUtil","keepdims","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","curAxisInd","pos","step","adjustPadAndReturnShape","computeShapeHelper","filterDims","inSize","padHeadIndex","padTailIndex","dkernel","padNeeded","TextDecoder","isProxy","proxyWorker","initWasmCallbacks","initOrtCallbacks","initializing","initialized","aborted","createSessionAllocateCallbacks","createSessionFinalizeCallbacks","createSessionCallbacks","releaseSessionCallbacks","runCallbacks","endProfilingCallbacks","ensureWorker","onProxyWorkerMessage","ev","out","scriptSrc","currentScript","wasmPaths","substr","lastIndexOf","terminate","onmessage","message","in","postMessage","initializeWebAssembly","initializeRuntime","core","initRuntime","createSessionAllocate","createSessionFinalize","modeldata","createSession","releaseSession","sessionId","inputIndices","extractTransferableBuffers","setRunOptions","getInstance","runOptionsHandle","allocs","runOptions","logSeverityLevel","logVerbosityLevel","tagDataOffset","tag","allocWasmString","_OrtCreateRunOptions","checkLastError","extra","iterateExtraOptions","WeakSet","keyDataOffset","valueDataOffset","_OrtAddRunConfigEntry","_OrtReleaseRunOptions","alloc","_free","runtimeInitialized","path","modelData","fetches","inputArray","entries","kvp","setSessionOptions","sessionOptionsHandle","sessionOptions","use_ort_model_bytes_directly","executionProviders","ep","enableMemPattern","appendDefaultOptions","graphOptimizationLevel","getGraphOptimzationLevel","executionMode","getExecutionMode","logIdDataOffset","logId","optimizedModelFilePathOffset","optimizedModelFilePath","_OrtCreateSessionOptions","enableCpuMemArena","enableProfiling","epName","webnnOptions","deviceType","_OrtAddSessionConfigEntry","powerPreference","epNameDataOffset","_OrtAppendExecutionProvider","setExecutionProviders","_OrtReleaseSessionOptions","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","getTensorElementSize","dateType","tensorTypeToTypedArrayConstructor","BigInt64Array","BigUint64Array","logLevelStringToEnum","loggingLevel","_OrtInit","activeSessions","modelDataOffset","_malloc","HEAPU8","sessionHandle","inputNamesUTF8Encoded","outputNamesUTF8Encoded","_OrtCreateSession","outputCount","stackSave","dataOffset","stackAlloc","_OrtGetInputOutputCount","HEAP32","stackRestore","getSessionInputOutputCount","_OrtGetInputName","UTF8ToString","_OrtGetOutputName","_OrtFree","_OrtReleaseSession","runOptionsAllocs","inputValues","inputAllocs","dataByteLength","HEAPU32","dimIndex","_OrtCreateTensor","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","inputValuesIndex","inputNamesIndex","outputValuesIndex","outputNamesIndex","errorCode","_OrtRun","runPromise","jsepRunPromise","beforeGetTensorDataStack","tensorDataOffset","_OrtGetTensorData","tensorDataIndex","maxBytesToRead","_OrtReleaseTensor","profileFileName","_OrtEndProfiling","buffers","ortWasmFactory","ortWasmFactoryThreaded","flags","timeout","useThreads","SharedArrayBuffer","MessageChannel","port1","WebAssembly","validate","isMultiThreadSupported","useSimd","isSimdSupported","wasmPrefixOverride","wasmFileName","getWasmFileName","wasmPathOverride","isTimeout","tasks","locateFile","fileName","scriptDirectory","Blob","URL","createObjectURL","mainScriptUrlOrBlob","__dirname","scriptSourceCode","what","race","PThread","terminateAllThreads","dataLength","lengthBytesUTF8","stringToUTF8","prefix","seen","paramsOffset","_OrtGetLastError","errorMessagePointer","errorMessage","Worker_fn","workerConstructor","workerOptions","url","globalScope","window","blob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","webkitURL","objectURL","worker","revokeObjectURL","encodeURIComponent","_scriptDir","__filename","F","I","P","H","Y","u","ready","l","m","h","importScripts","ENVIRONMENT_IS_PTHREAD","O","dirname","startsWith","normalize","readFileSync","thisProgram","argv","exitCode","inspect","global","Worker","href","XMLHttpRequest","open","send","responseText","responseType","onload","onerror","T","warn","writeSync","S","A","print","E","printErr","quit","wasmBinary","R","noExitRuntime","Z","U","HEAP8","HEAP16","HEAPU16","HEAPF32","HEAPF64","W","INITIAL_MEMORY","wasmMemory","Memory","initial","maximum","shared","G","L","z","q","preRun","J","V","onAbort","RuntimeError","$","Q","ee","credentials","ok","catch","instantiate","ne","te","re","le","Fa","ab","ae","Va","Ia","Ha","cmd","start_routine","Ta","pthread_ptr","unref","ib","oe","ue","String","fromCharCode","ie","se","ze","cb","onExit","fe","me","ce","La","Ra","Wa","Xa","lb","receiveObjectTransfer","$a","threadInitTLS","Qa","setExitStatus","Pa","nb","pn","Za","Ua","targetThread","sn","mb","transferList","ke","thread","loaded","threadId","text","alert","args","filename","lineno","on","handlers","urlOrBlob","wasmModule","Ya","Sa","pe","establishStackSpace","gn","bn","de","he","ge","kb","ye","be","ve","charCodeAt","_e","we","Oe","Te","Me","Se","Ae","Ee","Re","Fe","De","xe","Ie","Ce","Atomics","jb","store","hn","dn","He","Ye","invokeEntryPoint","__emscripten_thread_mailbox_await","checkMailbox","Ue","Pe","We","Ge","getFullYear","getMonth","getDate","Le","je","Ne","fn","arguments","yn","vn","ln","hrtime","timeOrigin","Be","qe","Je","Ke","USER","LOGNAME","PATH","PWD","HOME","LANG","languages","Xe","Ve","Ze","$e","Qe","en","nn","tn","rn","an","getDay","Ja","Ka","getTime","setDate","setMonth","setFullYear","gb","Ma","Oa","Na","Ga","ob","eb","hb","includes","un","cn","ref","getUTCSeconds","getUTCMinutes","getUTCHours","getUTCDate","getUTCMonth","getUTCFullYear","getUTCDay","UTC","getSeconds","getMinutes","getHours","getTimezoneOffset","setTime","getYear","toTimeString","apply","grow","asm","ta","ua","monitorRunDependencies","clearInterval","instantiateWasm","instantiateStreaming","instance","aa","ba","da","ea","fa","ga","ha","ia","ja","ka","la","ma","na","oa","pa","_pthread_self","qa","ra","sa","__emscripten_tls_init","__emscripten_thread_init","va","xa","ya","__emscripten_thread_crashed","wa","mn","__emscripten_thread_exit","za","__emscripten_check_mailbox","Aa","Ba","Ca","Da","Ea","_n","calledRun","onRuntimeInitialized","postRun","startWorker","setStatus","keepRuntimeAlive","ExitStatus","preInit","ortWasm","fs","copyWithin","pending","base64","string","b64","s64","parts","chunk","invalidEncoding","test","EventEmitter","_listeners","prototype","evt","off","listeners","emit","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","round","exponent","LN2","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","inquire","moduleName","mod","eval","SIZE","MAX","slab","utf8","read","write","c1","c2","__esModule","guid","EMPTY","isGuid","validator","gen","createEmpty","raw","random","equals","other","isEmpty","toJSON","Instance","Module","__isLong__","defineProperty","INT_CACHE","UINT_CACHE","fromInt","cachedObj","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","comp","lt","lessThanOrEqual","lte","greaterThan","gt","gte","compare","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","toUnsigned","shru","shr","shl","log2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","valuesById","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Version","properties","refAttrName","newBuffer","emptyArray","writer","uint32","float","int64","fork","ldelim","int32","encodeDelimited","reader","end2","skipType","decodeDelimited","verify","isString","fromObject","object","LongBits","toObject","arrays","defaults","long","longs","enums","json","isFinite","toJSONOptions","ValueInfoProto","TypeProto","metadataProps","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","$oneOfFields","oneOfGetter","oneOfSetter","oneofs","protobuf","configure","_configure","BufferWriter","BufferReader","rpc","indexOutOfRange","writeLength","create_array","Buffer","isBuffer","readLongVarint","bits","readFixed32_end","readFixed64","_slice","sint32","bool","fixed32","sfixed32","skip","wireType","BufferReader_","merge","sint64","zzDecode","fixed64","sfixed64","utf8Slice","Service","rpcImpl","requestDelimited","responseDelimited","Boolean","rpcCall","method","requestCtor","responseCtor","request","callback","asPromise","endedByRPC","zero","zzEncode","zeroHash","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","ifNotSet","newError","CustomError","captureStackTrace","pool","isNode","freeze","emptyObject","isObject","isset","isSet","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longToHash","longFromHash","lcFirst","toLowerCase","ProtocolError","fieldNames","fieldMap","encoding","allocUnsafe","Op","noop","State","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","BufferWriter_","writeStringBuffer","writeBytesBuffer","copy","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","float32","float64","toFloat64","Builder","opt_initial_size","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","asUint8Array","additional_bytes","align_size","old_buf_size","growByteBuffer","byte_size","writeInt8","writeInt16","writeInt64","writeFloat32","writeFloat64","addInt16","addFloat64","voffset","slot","addFieldInt16","addFieldFloat64","addFieldStruct","nested","notNested","new_buf_size","nbb","numfields","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","root_table","opt_file_identifier","opt_size_prefix","size_prefix","file_identifier","finishSizePrefixed","table","field","table_start","vtable_start","elem_size","num_elems","alignment","createString","codePoint","bytes_","position_","readUint16","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","vtable_offset","opt_encoding","ident","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","definition","enumerable","Symbol","toStringTag","__webpack_exports__"],"sourceRoot":""}